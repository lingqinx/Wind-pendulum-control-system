###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2012  04:25:39 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\drivers\steer\steer. #
#                    c                                                        #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\drivers\steer\steer. #
#                    c -lCN D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM #
#                    \List\ -lB D:\workspace\myworkspace\SW_K60\build\SX_demo #
#                    \RAM\List\ -o D:\workspace\myworkspace\SW_K60\build\SX_d #
#                    emo\RAM\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\ -I D:\workspace\myworkspace\SW_K60\build\SX_demo\. #
#                    .\..\src\common\ -I D:\workspace\myworkspace\SW_K60\buil #
#                    d\SX_demo\..\..\src\cpu\ -I                              #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\..\src\drivers\gpio\ -I                             #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\mcg\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\lptmr\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\LED\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\fun\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\FTM\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\pit\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\DIPswitch\ -I D:\workspace\myworkspace\SW_K60\bu #
#                    ild\SX_demo\..\..\src\drivers\steer\ -I                  #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ccd\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\dma\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\motor\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\platforms\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    projects\ -I D:\workspace\myworkspace\SW_K60\build\SX_de #
#                    mo\..\..\src\projects\SX_demo\ -Ol                       #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\s #
#                    teer.lst                                                 #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Obj\st #
#                    eer.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\drivers\steer\steer.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[steer.c] 
      5          * 描  述 ：舵机驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：舵机驱动函数
      9          ***********************************************************************
     10          */
     11          
     12          #include "steer.h"
     13          
     14          
     15          
     16          /********************************************************************
     17          ** 函数名称 : void steer_init() 
     18          ** 功能描述 : 设置舵机转向
     19          ** 入口     ：
     20          ** 出口     ：
     21          ** 说明     :  初始化PWM波及占空比
     22          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          void steer_init()         
     24          {
   \                     steer_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     25              ASSERT_RST(STEER_INIT_VAL <= FTM_PRECISON,"舵机0最大值不能超过PWM精度值");        
     26              FTM_PWM_init(STEER_FTMN,STEER_FTMCH,STEER_FREQ,STEER_INIT_VAL); 
   \   00000002   0xF44F 0x6396      MOV      R3,#+1200
   \   00000006   0x2264             MOVS     R2,#+100
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       FTM_PWM_init
     27          #if STEER_DOUBLE
     28              ASSERT_RST(STEER_INIT_VAL1 <= FTM_PRECISON,"舵机最大值不能超过PWM精度值");
     29              FTM_PWM_init(STEER_FTMN,STEER_FTMCH1,STEER_FREQ,STEER_INIT_VAL1); 
   \   00000010   0xF44F 0x6396      MOV      R3,#+1200
   \   00000014   0x2264             MOVS     R2,#+100
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       FTM_PWM_init
     30          #endif
     31          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     32          
     33          /********************************************************************
     34          ** 函数名称: void PWMSetSteer(int angle_pwm) 
     35          ** 功能描述: 设置舵机转向
     36          ** 入口：角度值
     37          ** 出口：
     38          ** 说明:  
     39          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     40          void PWMSetSteer(int angle_pwm)         
     41          {
   \                     PWMSetSteer:
   \   00000000   0xB580             PUSH     {R7,LR}
     42              //占空比不能超过上限（防止过压）
     43              //同时防止方向打死  
     44              //这个保护措施是必要的
     45              if(angle_pwm < STEER_RIGHT)
   \   00000002   0x28C8             CMP      R0,#+200
   \   00000004   0xDA00             BGE.N    ??PWMSetSteer_0
     46                   angle_pwm = STEER_RIGHT;
   \   00000006   0x20C8             MOVS     R0,#+200
     47              if(angle_pwm > STEER_LEFT)
   \                     ??PWMSetSteer_0:
   \   00000008   0xF241 0x3189      MOVW     R1,#+5001
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xDB01             BLT.N    ??PWMSetSteer_1
     48                   angle_pwm = STEER_LEFT;
   \   00000010   0xF241 0x3088      MOVW     R0,#+5000
     49                  
     50              FTM_PWM_Duty(STEER_FTMN,STEER_FTMCH,angle_pwm);
   \                     ??PWMSetSteer_1:
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       FTM_PWM_Duty
     51          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     52          
     53          
     54          /********************************************************************
     55          ** 函数名称: steerCtrl
     56          ** 功能描述: 速度控制算法
     57          ** 入口：
     58          ** 出口：
     59          ** 说明:  
     60          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void steerCtrl()
     62          {
     63              /*
     64              int angle_pwm;
     65              angle_pwm = 0;    //去除warning
     66              
     67              //自己的舵机控制算法
     68              
     69              
     70              PWMSetSteer(angle_pwm) ; 
     71              */ 
     72          }
   \                     steerCtrl:
   \   00000000   0x4770             BX       LR               ;; return
     73          
     74          
     75          #if STEER_DOUBLE

   \                                 In section .text, align 2, keep-with-next
     76          void PWMSetSteer1(int angle_pwm)         
     77          {
   \                     PWMSetSteer1:
   \   00000000   0xB580             PUSH     {R7,LR}
     78              //占空比不能超过上限（防止过压）
     79              //同时防止方向打死  
     80              //这个保护措施是必要的
     81              if(angle_pwm < STEER_RIGHT1)
   \   00000002   0x28C8             CMP      R0,#+200
   \   00000004   0xDA00             BGE.N    ??PWMSetSteer1_0
     82                   angle_pwm = STEER_RIGHT1;
   \   00000006   0x20C8             MOVS     R0,#+200
     83              if(angle_pwm > STEER_LEFT1)
   \                     ??PWMSetSteer1_0:
   \   00000008   0xF241 0x3189      MOVW     R1,#+5001
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xDB01             BLT.N    ??PWMSetSteer1_1
     84                   angle_pwm = STEER_LEFT1;
   \   00000010   0xF241 0x3088      MOVW     R0,#+5000
     85              
     86              
     87              FTM_PWM_Duty(STEER_FTMN,STEER_FTMCH1,angle_pwm);
   \                     ??PWMSetSteer1_1:
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       FTM_PWM_Duty
     88          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     89          
     90          
     91          /********************************************************************
     92          ** 函数名称: steerCtrl
     93          ** 功能描述: 速度控制算法
     94          ** 入口：
     95          ** 出口：
     96          ** 说明:  
     97          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     98          void steerCtrl1()
     99          {
    100              /*
    101              int angle_pwm;
    102              angle_pwm = 0;    //去除warning
    103              
    104              //自己的舵机控制算法
    105              
    106              
    107              
    108              PWMSetSteer1(angle_pwm) ;  
    109              */
    110          }
   \                     steerCtrl1:
   \   00000000   0x4770             BX       LR               ;; return
    111          
    112          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  PWMSetSteer
             8 -> FTM_PWM_Duty
        8  PWMSetSteer1
             8 -> FTM_PWM_Duty
        0  steerCtrl
        0  steerCtrl1
        8  steer_init
             8 -> FTM_PWM_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  PWMSetSteer
      32  PWMSetSteer1
       2  steerCtrl
       2  steerCtrl1
      32  steer_init

 
 100 bytes in section .text
 
 100 bytes of CODE memory

Errors: none
Warnings: none
