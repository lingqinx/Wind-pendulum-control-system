###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2012  04:25:35 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\drivers\motor\motor. #
#                    c                                                        #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\drivers\motor\motor. #
#                    c -lCN D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM #
#                    \List\ -lB D:\workspace\myworkspace\SW_K60\build\SX_demo #
#                    \RAM\List\ -o D:\workspace\myworkspace\SW_K60\build\SX_d #
#                    emo\RAM\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\ -I D:\workspace\myworkspace\SW_K60\build\SX_demo\. #
#                    .\..\src\common\ -I D:\workspace\myworkspace\SW_K60\buil #
#                    d\SX_demo\..\..\src\cpu\ -I                              #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\..\src\drivers\gpio\ -I                             #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\mcg\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\lptmr\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\LED\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\fun\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\FTM\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\pit\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\DIPswitch\ -I D:\workspace\myworkspace\SW_K60\bu #
#                    ild\SX_demo\..\..\src\drivers\steer\ -I                  #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ccd\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\dma\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\motor\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\platforms\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    projects\ -I D:\workspace\myworkspace\SW_K60\build\SX_de #
#                    mo\..\..\src\projects\SX_demo\ -Ol                       #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\m #
#                    otor.lst                                                 #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Obj\mo #
#                    tor.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\drivers\motor\motor.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[motor.c] 
      5          * 描  述 ：电机驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：电机驱动函数
      9          ***********************************************************************
     10          */
     11          
     12          #include "motor.h"
     13          
     14          
     15          
     16          /********************************************************************
     17          ** 函数名称: void steer_init() 
     18          ** 功能描述: 设置舵机转向
     19          ** 入口：角度值
     20          ** 出口：
     21          ** 说明:  
     22          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          void motor_init()         
     24          {
   \                     motor_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     25              ASSERT_RST(abs(MOTOR_MAX) <= FTM_PRECISON,"最大值不能超过PWM精度值");
   \   00000002   0xF242 0x7010      MOVW     R0,#+10000
   \   00000006   0x.... 0x....      BL       abs
   \   0000000A   0xF242 0x7111      MOVW     R1,#+10001
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD304             BCC.N    ??motor_init_0
   \   00000012   0x....             LDR.N    R2,??DataTable1
   \   00000014   0x2119             MOVS     R1,#+25
   \   00000016   0x....             LDR.N    R0,??DataTable1_1
   \   00000018   0x.... 0x....      BL       assert_failed_rst
     26              ASSERT_RST(abs(MOTOR_MIN) <= FTM_PRECISON,"最小值不能超过PWM精度值");
   \                     ??motor_init_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable1_2  ;; 0xffffd8f0
   \   0000001E   0x.... 0x....      BL       abs
   \   00000022   0xF242 0x7111      MOVW     R1,#+10001
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD304             BCC.N    ??motor_init_1
   \   0000002A   0x....             LDR.N    R2,??DataTable1_3
   \   0000002C   0x211A             MOVS     R1,#+26
   \   0000002E   0x....             LDR.N    R0,??DataTable1_1
   \   00000030   0x.... 0x....      BL       assert_failed_rst
     27              
     28              //初始化FTM2_CH0输出频率为100HZ,占空比为13%的PWM ：FTM2_CH0对应PTA10口
     29              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH0,MOTOR_FREQ,MOTOR_INIT_VAL); 
   \                     ??motor_init_1:
   \   00000034   0x2300             MOVS     R3,#+0
   \   00000036   0xF44F 0x527A      MOV      R2,#+16000
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       FTM_PWM_init
     30              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH1,MOTOR_FREQ,MOTOR_INIT_VAL); 
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0xF44F 0x527A      MOV      R2,#+16000
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       FTM_PWM_init
     31          #if MOTOR_DOUBLE
     32              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH2,MOTOR_FREQ,MOTOR_INIT_VAL); 
   \   00000050   0x2300             MOVS     R3,#+0
   \   00000052   0xF44F 0x527A      MOV      R2,#+16000
   \   00000056   0x2102             MOVS     R1,#+2
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       FTM_PWM_init
     33              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH3,MOTOR_FREQ,MOTOR_INIT_VAL); 
   \   0000005E   0x2300             MOVS     R3,#+0
   \   00000060   0xF44F 0x527A      MOV      R2,#+16000
   \   00000064   0x2103             MOVS     R1,#+3
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       FTM_PWM_init
     34          #endif
     35          }
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return
     36          #if !MOTOR_DOUBLE
     37          /********************************************************************
     38          ** 函数名称: PWMSetMotor
     39          ** 功能描述: 设置速度
     40          ** 入口：速度
     41          ** 出口：
     42          ** 说明:  
     43          *********************************************************************/
     44          void PWMSetMotor(s32 speed_pwm)         
     45          {
     46              if(speed_pwm < MOTOR_MIN)
     47              {
     48                speed_pwm = MOTOR_MIN;
     49              }
     50              if(speed_pwm > MOTOR_MAX)
     51              {
     52                speed_pwm = MOTOR_MAX;
     53              }
     54              
     55              if(speed_pwm > 0) 
     56              {
     57                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,(u32)speed_pwm);
     58                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,0);
     59              } 
     60              else 
     61              {
     62                 speed_pwm = -speed_pwm;
     63                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,(u32)speed_pwm);
     64                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,0);
     65              }
     66          }
     67          
     68          /********************************************************************
     69          ** 函数名称: motorCtrl
     70          ** 功能描述: 速度控制算法
     71          ** 入口：
     72          ** 出口：
     73          ** 说明:  
     74          *********************************************************************/
     75          void motorCtrl()
     76          {
     77              /***
     78            s32 speed_pwm;
     79              
     80              speed_pwm = 0;    //去除warning
     81              
     82              //自己的速度控制算法
     83              
     84              
     85              
     86              PWMSetMotor(speed_pwm);
     87            ***/
     88          }
     89          
     90          #endif
     91          
     92          
     93          #if MOTOR_DOUBLE
     94          /********************************************************************
     95          ** 函数名称: PWMSetMotor
     96          ** 功能描述: 设置速度
     97          ** 入口：左右速度
     98          ** 出口：
     99          ** 说明:  
    100          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          void PWMSetMotor2(s32 speed_pwmL,s32 speed_pwmR)         
    102          {
   \                     PWMSetMotor2:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    103              if(speed_pwmL < MOTOR_MIN)
   \   00000004   0x....             LDR.N    R1,??DataTable1_2  ;; 0xffffd8f0
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xDA00             BGE.N    ??PWMSetMotor2_0
    104              {
    105                speed_pwmL = MOTOR_MIN;
   \   0000000A   0x....             LDR.N    R0,??DataTable1_2  ;; 0xffffd8f0
    106              }
    107              if(speed_pwmL > MOTOR_MAX)
   \                     ??PWMSetMotor2_0:
   \   0000000C   0xF242 0x7111      MOVW     R1,#+10001
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xDB01             BLT.N    ??PWMSetMotor2_1
    108              {
    109                speed_pwmL = MOTOR_MAX;
   \   00000014   0xF242 0x7010      MOVW     R0,#+10000
    110              }
    111              
    112              if(speed_pwmR < MOTOR_MIN)
   \                     ??PWMSetMotor2_1:
   \   00000018   0x....             LDR.N    R1,??DataTable1_2  ;; 0xffffd8f0
   \   0000001A   0x428C             CMP      R4,R1
   \   0000001C   0xDA00             BGE.N    ??PWMSetMotor2_2
    113              {
    114                speed_pwmR = MOTOR_MIN;
   \   0000001E   0x....             LDR.N    R4,??DataTable1_2  ;; 0xffffd8f0
    115              }
    116              if(speed_pwmR > MOTOR_MAX)
   \                     ??PWMSetMotor2_2:
   \   00000020   0xF242 0x7111      MOVW     R1,#+10001
   \   00000024   0x428C             CMP      R4,R1
   \   00000026   0xDB01             BLT.N    ??PWMSetMotor2_3
    117              {
    118                speed_pwmR = MOTOR_MAX;
   \   00000028   0xF242 0x7410      MOVW     R4,#+10000
    119              }
    120              
    121              if(speed_pwmL > 0) 
   \                     ??PWMSetMotor2_3:
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xDB0A             BLT.N    ??PWMSetMotor2_4
    122              {
    123                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,(u32)speed_pwmL);
   \   00000030   0x0002             MOVS     R2,R0
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       FTM_PWM_Duty
    124                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,0);
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       FTM_PWM_Duty
   \   00000044   0xE00A             B.N      ??PWMSetMotor2_5
    125              } 
    126              else 
    127              {
    128                 speed_pwmL = -speed_pwmL;
   \                     ??PWMSetMotor2_4:
   \   00000046   0x4240             RSBS     R0,R0,#+0
    129                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,(u32)speed_pwmL);
   \   00000048   0x0002             MOVS     R2,R0
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       FTM_PWM_Duty
    130                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,0);
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      BL       FTM_PWM_Duty
    131              }
    132              
    133              if(speed_pwmR > 0) 
   \                     ??PWMSetMotor2_5:
   \   0000005C   0x2C01             CMP      R4,#+1
   \   0000005E   0xDB0A             BLT.N    ??PWMSetMotor2_6
    134              {
    135                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH2,(u32)speed_pwmR);
   \   00000060   0x0022             MOVS     R2,R4
   \   00000062   0x2102             MOVS     R1,#+2
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       FTM_PWM_Duty
    136                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH3,0);
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       FTM_PWM_Duty
   \   00000074   0xE00A             B.N      ??PWMSetMotor2_7
    137              } 
    138              else 
    139              {
    140                 speed_pwmR = -speed_pwmR;
   \                     ??PWMSetMotor2_6:
   \   00000076   0x4264             RSBS     R4,R4,#+0
    141                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH3,(u32)speed_pwmR);
   \   00000078   0x0022             MOVS     R2,R4
   \   0000007A   0x2103             MOVS     R1,#+3
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x.... 0x....      BL       FTM_PWM_Duty
    142                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH2,0);
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x2102             MOVS     R1,#+2
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       FTM_PWM_Duty
    143              }
    144          }
   \                     ??PWMSetMotor2_7:
   \   0000008C   0xBD10             POP      {R4,PC}          ;; return
    145          
    146          /********************************************************************
    147          ** 函数名称: motorCtrl
    148          ** 功能描述: 速度控制算法
    149          ** 入口：
    150          ** 出口：
    151          ** 说明:  
    152          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          void motorCtrl()
    154          {
    155            /***
    156              s32 speed_pwm;
    157              
    158              speed_pwm = 0;    //去除warning
    159              
    160              //自己的速度控制算法
    161              
    162              
    163              
    164              PWMSetMotor2(speed_pwm,speed_pwm);
    165            ***/
    166          }
   \                     motorCtrl:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `?<Constant "\\327\\356\\264\\363\\326\\265\\262\\273\\3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\workspace\\\\myworksp...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xFFFFD8F0         DC32     0xffffd8f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `?<Constant "\\327\\356\\320\\241\\326\\265\\262\\273\\3`

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\workspace\\\\myworksp...">`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 77H, 6FH, 72H, 6BH, 73H
   \              0x5C 0x77    
   \              0x6F 0x72    
   \              0x6B 0x73    
   \   00000008   0x70 0x61          DC8 70H, 61H, 63H, 65H, 5CH, 6DH, 79H, 77H
   \              0x63 0x65    
   \              0x5C 0x6D    
   \              0x79 0x77    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000018   0x5C 0x53          DC8 5CH, 53H, 57H, 5FH, 4BH, 36H, 30H, 5CH
   \              0x57 0x5F    
   \              0x4B 0x36    
   \              0x30 0x5C    
   \   00000020   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 64H, 72H, 69H, 76H
   \              0x63 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \   00000028   0x65 0x72          DC8 65H, 72H, 73H, 5CH, 6DH, 6FH, 74H, 6FH
   \              0x73 0x5C    
   \              0x6D 0x6F    
   \              0x74 0x6F    
   \   00000030   0x72 0x5C          DC8 72H, 5CH, 6DH, 6FH, 74H, 6FH, 72H, 2EH
   \              0x6D 0x6F    
   \              0x74 0x6F    
   \              0x72 0x2E    
   \   00000038   0x63 0x00          DC8 63H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\327\\356\\264\\363\\326\\265\\262\\273\\3`:
   \   00000000   0xD7 0xEE          DC8 "\327\356\264\363\326\265\262\273\304\334\263\254\271\375PWM\276\253\266\310\326\265"
   \              0xB4 0xF3    
   \              0xD6 0xB5    
   \              0xB2 0xBB    
   \              0xC4 0xDC    
   \              0xB3 0xAC    
   \              0xB9 0xFD    
   \              0x50 0x57    
   \              0x4D 0xBE    
   \              0xAB 0xB6    
   \              0xC8 0xD6    
   \              0xB5 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\327\\356\\320\\241\\326\\265\\262\\273\\3`:
   \   00000000   0xD7 0xEE          DC8 "\327\356\320\241\326\265\262\273\304\334\263\254\271\375PWM\276\253\266\310\326\265"
   \              0xD0 0xA1    
   \              0xD6 0xB5    
   \              0xB2 0xBB    
   \              0xC4 0xDC    
   \              0xB3 0xAC    
   \              0xB9 0xFD    
   \              0x50 0x57    
   \              0x4D 0xBE    
   \              0xAB 0xB6    
   \              0xC8 0xD6    
   \              0xB5 0x00    
    167          
    168          #endif
    169          
    170          
    171          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  PWMSetMotor2
             8 -> FTM_PWM_Duty
        0  motorCtrl
        8  motor_init
             8 -> FTM_PWM_init
             8 -> abs
             8 -> assert_failed_rst


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ?<Constant "D:\\workspace\\myworksp...">
      24  ?<Constant "\327\356\264\363\326\265\262\273\3
      24  ?<Constant "\327\356\320\241\326\265\262\273\3
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
     142  PWMSetMotor2
       2  motorCtrl
     110  motor_init

 
 108 bytes in section .rodata
 270 bytes in section .text
 
 270 bytes of CODE  memory
 108 bytes of CONST memory

Errors: none
Warnings: none
