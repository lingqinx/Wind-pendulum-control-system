###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2012  05:05:25 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\mai #
#                    n.c                                                      #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\mai #
#                    n.c -lCN D:\workspace\myworkspace\SW_K60\build\SX_demo\R #
#                    AM\List\ -lB D:\workspace\myworkspace\SW_K60\build\SX_de #
#                    mo\RAM\List\ -o D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\ -I D:\workspace\myworkspace\SW_K60\build\SX_demo\. #
#                    .\..\src\common\ -I D:\workspace\myworkspace\SW_K60\buil #
#                    d\SX_demo\..\..\src\cpu\ -I                              #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\..\src\drivers\gpio\ -I                             #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\mcg\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\lptmr\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\LED\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\fun\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\FTM\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\pit\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\DIPswitch\ -I D:\workspace\myworkspace\SW_K60\bu #
#                    ild\SX_demo\..\..\src\drivers\steer\ -I                  #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ccd\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\dma\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\motor\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\platforms\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    projects\ -I D:\workspace\myworkspace\SW_K60\build\SX_de #
#                    mo\..\..\src\projects\SX_demo\ -Ol                       #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\m #
#                    ain.lst                                                  #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Obj\ma #
#                    in.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\main.c
      1          /*******************************************************************************
      2                                        北京邮电大学 K60 学习例程
      3          【例程名称】北京邮电大学摄像头组例程
      4          【Designed】snowwolf
      5          【E-mail  】snowwolf2012@qq.com
      6          【软件版本】V1.0
      7          【最后更新】2012年3月24日
      8          ------------------------------------------------
      9          【dev.env.】IAR 6.3
     10          【Target  】K60X256
     11          【Crystal 】50.000Mhz
     12          【busclock】48.000MHz
     13          【pllclock】96.000MHz   
     14          【 说  明 】仅做内部学习使用，请勿外传
     15          【 参  考 】野火嵌入式开发工作室
     16                      龙丘开发例程
     17                      苏州大学《嵌入式系统原理与实践》
     18          
     19          接口说明：
     20                    拨码开关：PA14    PA15    PA16    PA17
     21                    舵机    ：PA12    PA13
     22                    电机    ：PC1     PC2     PC3     PC4
     23                    行中断  ：PB18
     24                    场中断  ：PB19
     25                    Y0-Y7   : PD0-PD7  (数字摄像头or外部AD数据线)
     26                    PLCK    ：PA29    (需要用DMA的才要接这一个信号，PLCK经过4分频后接PA19)
     27                              我是用HD74LS161AP做的分频电路
     28                    串口    ：PB16  PB17  波特率 115200  收不到信号可以把收发反转一个
     29                    编码器  ：PC5
     30          需要修改主频的到 k60_bupt.h里修改（不建议修改）
     31          ********************************************************************************/	
     32          
     33          
     34          #include "common.h"
     35          #include "include.h"
     36          
     37          

   \                                 In section .text, align 4, keep-with-next
     38          void main()
     39          {
   \                     main:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     40            DisableInterrupts;  
   \   00000002   0xB672             CPSID i         
     41            
     42            uartPrintf("北京邮电大学摄像头组例程\n");
   \   00000004   0x4874             LDR.N    R0,??main_0
   \   00000006   0x.... 0x....      BL       uartPrintf
     43            //初始化拨码开关
     44            DIPswitch_ctrl();
   \   0000000A   0x.... 0x....      BL       DIPswitch_ctrl
     45            //初始化舵机
     46            steer_init();
   \   0000000E   0x.... 0x....      BL       steer_init
     47            //电机初始化
     48            motor_init();
   \   00000012   0x.... 0x....      BL       motor_init
     49            //摄像头初始化
     50            CCD_init();
   \   00000016   0x.... 0x....      BL       CCD_init
     51            
     52            //初始化PIT   100Hz  
     53            pit_init(PIT0,100); 
   \   0000001A   0x2164             MOVS     R1,#+100
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       pit_init
     54            //使能PIT  测试时关闭  程序正常运行时使能
     55            //除实验六七外都需要关闭使能
     56            //PIT_IRQ_EN(PIT0);
     57            //gpio_init(PORTD,0,GPO,0);   //用于测试PIT
     58            
     59            //初始化外部测速  接PC5   第二个参数用65535 否则计数提前清零 这是一个16位计数器
     60            lptmr_counter_init(LPT0_ALT2,65535,2,LPT_Rising);   
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x2202             MOVS     R2,#+2
   \   00000026   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x.... 0x....      BL       lptmr_counter_init
     61            //打开串口中断
     62            UART_IRQ_EN(UART0); 
   \   00000030   0x486A             LDR.N    R0,??main_0+0x4
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x78C0             LDRB     R0,[R0, #+3]
   \   00000036   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000003A   0x4968             LDR.N    R1,??main_0+0x4
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x70C8             STRB     R0,[R1, #+3]
   \   00000040   0x202D             MOVS     R0,#+45
   \   00000042   0x.... 0x....      BL       enable_irq
     63            EnableInterrupts;    
   \   00000046   0xB662             CPSIE i         
     64            while(1)
     65            {
     66          //以下 “1”表示打开当前测试程序，“0表示关闭”
     67          //实验一
     68          #if 0           //测试拨码开关     测试结果： 成功
     69                          //操作把 PA14    PA15    PA16    PA17 接在拨码开关电路上（主板上是设计好的就是这几个引脚）
     70                          uartPrintf("切换拔码开关观看效果\n");
     71                          DIPswitch_ctrl();
     72                          delayms(1000);
     73          //实验二
     74          #elif 0         //测试舵机        测试结果： 成功
     75                          //操作  将PA12    PA13 接在示波器上，看波型  目前左右极限是200 - 5000 即1% -- 50%
     76                          //100Hz
     77                          u32 i = 0;
     78                          
     79                          //在 i = 0 和 i = 5500 时不在安全范围内应该不反应
     80                          //占空比每一秒加5%
     81                          for(i = 0;i<10500;i+=500)
     82                          {
     83                            uartPrintf("当前占空比 %d %%\n",i*100/FTM_PRECISON);
     84                            PWMSetSteer(i) ; 
     85          #if STEER_DOUBLE
     86                            PWMSetSteer1(i) ;
     87          #endif
     88                            delayms(2000);
     89                          }
     90                          
     91          //实验三
     92          #elif 0         //测试电机        测试结果：成功
     93                          //操作  将 PC1     PC2     PC3     PC4 接在示波器上，看波型
     94                          int i = 0;
     95                          //占空比每一秒加5%
     96                          //范围 0%-100%
     97                          //小于 0 是 PC2 PC4是有波型 PC1 PC3为0电平
     98                          //大于 0 是 PC1 PC3是有波型 PC2 PC4为0电平
     99                          for(i = -10000;i<10500;i+=500)
    100                          {
    101                            uartPrintf("当前占空比 %d %%\n",abs(i)*100/FTM_PRECISON);
    102          #if MOTOR_DOUBLE
    103                            PWMSetMotor2(i,i);  
    104          #else
    105                            PWMSetMotor(i);  
    106          #endif            
    107                            delayms(2000);
    108                          }
    109          //实验四
    110          #elif 1         //测试中断法取图像  测试结果
    111          #ifdef CCD_DMA
    112                #error "这里是中断法采集图像，请注释掉 CCD_DMA!"            
    113          #endif
    114                          while(1)
    115                          {
    116                          uint32 tick0 = 0,tick1 = 0;	
   \                     ??main_1:
   \   00000048   0x2400             MOVS     R4,#+0
   \   0000004A   0x2500             MOVS     R5,#+0
    117                          uartPrintf("\n输入 s  开始采集一幅图像\n");   
   \   0000004C   0x4864             LDR.N    R0,??main_0+0x8
   \   0000004E   0x.... 0x....      BL       uartPrintf
    118                          if( (showChoice & 0x01) )
   \   00000052   0x4864             LDR.N    R0,??main_0+0xC
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x07C0             LSLS     R0,R0,#+31
   \   00000058   0xF140 0x80B7      BPL.W    ??main_2
    119                           {
    120                              uartPrintf("\n开始采集一幅图像\n");   
   \   0000005C   0x4862             LDR.N    R0,??main_0+0x10
   \   0000005E   0x.... 0x....      BL       uartPrintf
    121                          
    122                              PIT_RELOAD(PIT0,100); 
   \   00000062   0x4862             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x0840             LSRS     R0,R0,#+1
   \   00000068   0x0040             LSLS     R0,R0,#+1
   \   0000006A   0x4960             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0x4860             LDR.N    R0,??main_0+0x18
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF44F 0x717A      MOV      R1,#+1000
   \   00000076   0x4348             MULS     R0,R1,R0
   \   00000078   0x2164             MOVS     R1,#+100
   \   0000007A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000007E   0x1E40             SUBS     R0,R0,#+1
   \   00000080   0x495C             LDR.N    R1,??main_0+0x1C  ;; 0x40037100
   \   00000082   0x6008             STR      R0,[R1, #+0]
   \   00000084   0x4859             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000008C   0x4957             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    123                              tick0 = GET_PITCNTus(PIT0);
   \   00000090   0x4857             LDR.N    R0,??main_0+0x18
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF44F 0x717A      MOV      R1,#+1000
   \   00000098   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000009C   0x4956             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0xFBB1 0xF4F0      UDIV     R4,R1,R0
    124                              WritePicTest();WritePicTest();
   \   000000A4   0x.... 0x....      BL       WritePicTest
   \   000000A8   0x.... 0x....      BL       WritePicTest
    125                              WritePicTest();WritePicTest();
   \   000000AC   0x.... 0x....      BL       WritePicTest
   \   000000B0   0x.... 0x....      BL       WritePicTest
    126                              WritePicTest();WritePicTest();
   \   000000B4   0x.... 0x....      BL       WritePicTest
   \   000000B8   0x.... 0x....      BL       WritePicTest
    127                              WritePicTest();WritePicTest();
   \   000000BC   0x.... 0x....      BL       WritePicTest
   \   000000C0   0x.... 0x....      BL       WritePicTest
    128                              WritePicTest();WritePicTest();
   \   000000C4   0x.... 0x....      BL       WritePicTest
   \   000000C8   0x.... 0x....      BL       WritePicTest
    129                              
    130                              tick1 = GET_PITCNTus(PIT0);        
   \   000000CC   0x4848             LDR.N    R0,??main_0+0x18
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0xF44F 0x717A      MOV      R1,#+1000
   \   000000D4   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000D8   0x4947             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   000000DA   0x6809             LDR      R1,[R1, #+0]
   \   000000DC   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    131                              uartPrintf("\n图像数据遍历10遍 用时：%d us\n",tick0 - tick1);
   \   000000E0   0x1B61             SUBS     R1,R4,R5
   \   000000E2   0x4846             LDR.N    R0,??main_0+0x24
   \   000000E4   0x.... 0x....      BL       uartPrintf
    132                             
    133                              PIT_RELOAD(PIT0,100); 
   \   000000E8   0x4840             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x0840             LSRS     R0,R0,#+1
   \   000000EE   0x0040             LSLS     R0,R0,#+1
   \   000000F0   0x493E             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   000000F2   0x6008             STR      R0,[R1, #+0]
   \   000000F4   0x483E             LDR.N    R0,??main_0+0x18
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF44F 0x717A      MOV      R1,#+1000
   \   000000FC   0x4348             MULS     R0,R1,R0
   \   000000FE   0x2164             MOVS     R1,#+100
   \   00000100   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000104   0x1E40             SUBS     R0,R0,#+1
   \   00000106   0x493B             LDR.N    R1,??main_0+0x1C  ;; 0x40037100
   \   00000108   0x6008             STR      R0,[R1, #+0]
   \   0000010A   0x4838             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000112   0x4936             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   00000114   0x6008             STR      R0,[R1, #+0]
    134                              tick0 = GET_PITCNTus(PIT0);
   \   00000116   0x4836             LDR.N    R0,??main_0+0x18
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000011E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000122   0x4935             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   00000124   0x6809             LDR      R1,[R1, #+0]
   \   00000126   0xFBB1 0xF4F0      UDIV     R4,R1,R0
    135                              //GetPhoto();    //这个函数里有开中断操作
    136                              time_delay_ms(10);
   \   0000012A   0x200A             MOVS     R0,#+10
   \   0000012C   0x.... 0x....      BL       time_delay_ms
    137                              tick1 = GET_PITCNTus(PIT0);        
   \   00000130   0x482F             LDR.N    R0,??main_0+0x18
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0xF44F 0x717A      MOV      R1,#+1000
   \   00000138   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000013C   0x492E             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   0000013E   0x6809             LDR      R1,[R1, #+0]
   \   00000140   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    138                              uartPrintf("\n采集到一幅图像 用时：%d us\n",tick0 - tick1);
   \   00000144   0x1B61             SUBS     R1,R4,R5
   \   00000146   0x482E             LDR.N    R0,??main_0+0x28
   \   00000148   0x.... 0x....      BL       uartPrintf
    139                              
    140                              PIT_RELOAD(PIT0,100); 
   \   0000014C   0x4827             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x0840             LSRS     R0,R0,#+1
   \   00000152   0x0040             LSLS     R0,R0,#+1
   \   00000154   0x4925             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   00000156   0x6008             STR      R0,[R1, #+0]
   \   00000158   0x4825             LDR.N    R0,??main_0+0x18
   \   0000015A   0x6800             LDR      R0,[R0, #+0]
   \   0000015C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000160   0x4348             MULS     R0,R1,R0
   \   00000162   0x2164             MOVS     R1,#+100
   \   00000164   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000168   0x1E40             SUBS     R0,R0,#+1
   \   0000016A   0x4922             LDR.N    R1,??main_0+0x1C  ;; 0x40037100
   \   0000016C   0x6008             STR      R0,[R1, #+0]
   \   0000016E   0x481F             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000176   0x491D             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   00000178   0x6008             STR      R0,[R1, #+0]
    141                              tick0 = GET_PITCNTus(PIT0);
   \   0000017A   0x481D             LDR.N    R0,??main_0+0x18
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000182   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000186   0x491C             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   00000188   0x6809             LDR      R1,[R1, #+0]
   \   0000018A   0xFBB1 0xF4F0      UDIV     R4,R1,R0
    142                              GetBlackLine() ;
   \   0000018E   0x.... 0x....      BL       GetBlackLine
    143                              tick1 = GET_PITCNTus(PIT0);  
   \   00000192   0x4817             LDR.N    R0,??main_0+0x18
   \   00000194   0x6800             LDR      R0,[R0, #+0]
   \   00000196   0xF44F 0x717A      MOV      R1,#+1000
   \   0000019A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000019E   0x4916             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   000001A0   0x6809             LDR      R1,[R1, #+0]
   \   000001A2   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    144                              uartPrintf("\n处理一幅图像 用时：%d us\n",tick0 - tick1);
   \   000001A6   0x1B61             SUBS     R1,R4,R5
   \   000001A8   0x4816             LDR.N    R0,??main_0+0x2C
   \   000001AA   0x.... 0x....      BL       uartPrintf
    145                              
    146                              ShowPhoto();
   \   000001AE   0x.... 0x....      BL       ShowPhoto
    147                              
    148                              WritePicBlack();
   \   000001B2   0x.... 0x....      BL       WritePicBlack
    149                              
    150                              //SendCenterLine3(Line_Center_L, Line_Center, Line_Center_R);
    151                              
    152                              showChoice &= 0xFE;//采集结束
   \   000001B6   0x480B             LDR.N    R0,??main_0+0xC
   \   000001B8   0x7800             LDRB     R0,[R0, #+0]
   \   000001BA   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   000001BE   0x4909             LDR.N    R1,??main_0+0xC
   \   000001C0   0x7008             STRB     R0,[R1, #+0]
    153                              delayms(1000);
   \   000001C2   0xF44F 0x707A      MOV      R0,#+1000
   \   000001C6   0x.... 0x....      BL       delayms
    154                          }//end of if
    155                           water_lights();
   \                     ??main_2:
   \   000001CA   0x.... 0x....      BL       water_lights
    156                          delayms(1000);
   \   000001CE   0xF44F 0x707A      MOV      R0,#+1000
   \   000001D2   0x.... 0x....      BL       delayms
   \   000001D6   0xE737             B.N      ??main_1
   \                     ??main_0:
   \   000001D8   0x........         DC32     `?<Constant "\\261\\261\\276\\251\\323\\312\\265\\347\\2`
   \   000001DC   0x........         DC32     UARTx
   \   000001E0   0x........         DC32     `?<Constant "\\n\\312\\344\\310\\353 s  \\277\\252\\312`
   \   000001E4   0x........         DC32     showChoice
   \   000001E8   0x........         DC32     `?<Constant "\\n\\277\\252\\312\\274\\262\\311\\274\\257`
   \   000001EC   0x40037108         DC32     0x40037108
   \   000001F0   0x........         DC32     bus_clk_khz
   \   000001F4   0x40037100         DC32     0x40037100
   \   000001F8   0x40037104         DC32     0x40037104
   \   000001FC   0x........         DC32     `?<Constant "\\n\\315\\274\\317\\361\\312\\375\\276\\335`
   \   00000200   0x........         DC32     `?<Constant "\\n\\262\\311\\274\\257\\265\\275\\322\\273`
   \   00000204   0x........         DC32     `?<Constant "\\n\\264\\246\\300\\355\\322\\273\\267\\371`
    157                          }
    158                          
    159          //实验五
    160          #elif 0         //测试DMA法取图像  测试结果                
    161          #ifndef CCD_DMA
    162                #error "这里是DMA法采集图像，请定义 CCD_DMA!"            
    163          #endif
    164                          
    165          //实验六
    166          #elif 0         //测试PIT       测试结果： 成功  
    167                            // 操作 :从初始化部分打开中断
    168                                   //设置PD0输出可以看到有一个650Hz的方波 说明PIT1300Hz正常
    169                                   
    170                          
    171          //实验七               
    172          #elif 0         //测试外部测速   测试结果:  成功
    173                          //从初始化部分打开中断
    174                          //用 PWM 模拟编码器  将 PC1 与PC5短接
    175                          int i = 0;  
    176                          for(i = 1;i<60;i+=4)
    177                          {
    178                            FTM_PWM_freq(MOTOR_FTMN,i*1000) ;
    179                            FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0, 5000);
    180                            delayms(1000); 
    181                            uartPrintf("当前PWM波频率%7dHz ",i*1000); 
    182                            uartPrintf("10ms读取脉冲(速度):%4d个\n",trueSpeed); 
    183                       
    184                          }
    185          //实验八
    186          #elif 0         //中断法读串口数据  测试结果 
    187                          
    188          #endif    
    189              
    190            }
    191          }

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\261\\261\\276\\251\\323\\312\\265\\347\\2`:
   \   00000000   0xB1 0xB1          DC8 "\261\261\276\251\323\312\265\347\264\363\321\247\311\343\317\361\315\267\327\351\300\375\263\314\012"
   \              0xBE 0xA9    
   \              0xD3 0xCA    
   \              0xB5 0xE7    
   \              0xB4 0xF3    
   \              0xD1 0xA7    
   \              0xC9 0xE3    
   \              0xCF 0xF1    
   \              0xCD 0xB7    
   \              0xD7 0xE9    
   \              0xC0 0xFD    
   \              0xB3 0xCC    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\312\\344\\310\\353 s  \\277\\252\\312`:
   \   00000000   0x0A 0xCA          DC8 "\012\312\344\310\353 s  \277\252\312\274\262\311\274\257\322\273\267\371\315\274\317\361\012"
   \              0xE4 0xC8    
   \              0xEB 0x20    
   \              0x73 0x20    
   \              0x20 0xBF    
   \              0xAA 0xCA    
   \              0xBC 0xB2    
   \              0xC9 0xBC    
   \              0xAF 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\277\\252\\312\\274\\262\\311\\274\\257`:
   \   00000000   0x0A 0xBF          DC8 "\012\277\252\312\274\262\311\274\257\322\273\267\371\315\274\317\361\012"
   \              0xAA 0xCA    
   \              0xBC 0xB2    
   \              0xC9 0xBC    
   \              0xAF 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\315\\274\\317\\361\\312\\375\\276\\335`:
   \   00000000   0x0A 0xCD          DC8 "\012\315\274\317\361\312\375\276\335\261\351\300\37210\261\351 \323\303\312\261\243\272%d us\012"
   \              0xBC 0xCF    
   \              0xF1 0xCA    
   \              0xFD 0xBE    
   \              0xDD 0xB1    
   \              0xE9 0xC0    
   \              0xFA 0x31    
   \              0x30 0xB1    
   \              0xE9 0x20    
   \              0xD3 0xC3    
   \              0xCA 0xB1    
   \              0xA3 0xBA    
   \              0x25 0x64    
   \              0x20 0x75    
   \              0x73 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\262\\311\\274\\257\\265\\275\\322\\273`:
   \   00000000   0x0A 0xB2          DC8 "\012\262\311\274\257\265\275\322\273\267\371\315\274\317\361 \323\303\312\261\243\272%d us\012"
   \              0xC9 0xBC    
   \              0xAF 0xB5    
   \              0xBD 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x20    
   \              0xD3 0xC3    
   \              0xCA 0xB1    
   \              0xA3 0xBA    
   \              0x25 0x64    
   \              0x20 0x75    
   \              0x73 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\264\\246\\300\\355\\322\\273\\267\\371`:
   \   00000000   0x0A 0xB4          DC8 "\012\264\246\300\355\322\273\267\371\315\274\317\361 \323\303\312\261\243\272%d us\012"
   \              0xA6 0xC0    
   \              0xED 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x20    
   \              0xD3 0xC3    
   \              0xCA 0xB1    
   \              0xA3 0xBA    
   \              0x25 0x64    
   \              0x20 0x75    
   \              0x73 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  main
             16 -> CCD_init
             16 -> DIPswitch_ctrl
             16 -> GetBlackLine
             16 -> ShowPhoto
             16 -> WritePicBlack
             16 -> WritePicTest
             16 -> delayms
             16 -> enable_irq
             16 -> lptmr_counter_init
             16 -> motor_init
             16 -> pit_init
             16 -> steer_init
             16 -> time_delay_ms
             16 -> uartPrintf
             16 -> water_lights


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "\261\261\276\251\323\312\265\347\2
      32  ?<Constant "\n\262\311\274\257\265\275\322\273
      28  ?<Constant "\n\264\246\300\355\322\273\267\371
      20  ?<Constant "\n\277\252\312\274\262\311\274\257
      28  ?<Constant "\n\312\344\310\353 s  \277\252\312
      32  ?<Constant "\n\315\274\317\361\312\375\276\335
     520  main

 
 168 bytes in section .rodata
 520 bytes in section .text
 
 520 bytes of CODE  memory
 168 bytes of CONST memory

Errors: none
Warnings: none
