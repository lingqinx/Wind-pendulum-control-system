###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2012  04:25:36 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\cpu\arm_cm4.c        #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\cpu\arm_cm4.c -lCN   #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\  #
#                    -lB D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Li #
#                    st\ -o D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM #
#                    \Obj\ --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0_3\arm\INC\c\DLib_Config_Normal.h" -I       #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\ -I     #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    common\ -I D:\workspace\myworkspace\SW_K60\build\SX_demo #
#                    \..\..\src\cpu\ -I D:\workspace\myworkspace\SW_K60\build #
#                    \SX_demo\..\..\src\drivers\ -I                           #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\gpio\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\wdog\ -I                        #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\mcg\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\uart\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\lptmr\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\drivers\LED\ -I                        #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\fun\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\FTM\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\pit\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\DIPswitch\ -I                    #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\steer\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\drivers\ccd\ -I                        #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\dma\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\motor\ -I                        #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    platforms\ -I D:\workspace\myworkspace\SW_K60\build\SX_d #
#                    emo\..\..\src\projects\ -I D:\workspace\myworkspace\SW_K #
#                    60\build\SX_demo\..\..\src\projects\SX_demo\ -Ol         #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\a #
#                    rm_cm4.lst                                               #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Obj\ar #
#                    m_cm4.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\cpu\arm_cm4.c
      1          /******************** (C) COPYRIGHT 2011 野火嵌入式开发工作室 ********************
      2           * 文件名       ：arm_cm4.c
      3           * 描述         ：通用ARM Cortex M4内核函数
      4           *
      5           * 实验平台     ：野火kinetis开发板
      6           * 库版本       ：
      7           * 嵌入系统     ：
      8           *
      9           * 作者         ：arm公司（cmsis库自带）
     10           * 淘宝店       ：http://firestm32.taobao.com
     11           * 技术支持论坛 ：http://www.ourdev.cn/bbs/bbs_list.jsp?bbs_id=1008
     12          **********************************************************************************/	
     13          
     14          #include "common.h"
     15          #include "uart.h"
     16          
     17          /***********************************************************************/
     18          /*
     19           * Configures the ARM system control register for STOP (deep sleep) mode
     20           * and then executes the WFI instruction to enter the mode.
     21           *
     22           * Parameters:
     23           * none
     24           *
     25           * Note: Might want to change this later to allow for passing in a parameter
     26           *       to optionally set the sleep on exit bit.
     27           */
     28          

   \                                 In section .text, align 4, keep-with-next
     29          void stop (void)
     30          {
     31          	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
     32          	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
   \                     stop:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     33          
     34          	/* WFI instruction will start entry into STOP mode */
     35          	asm("WFI");
   \   0000000C   0xBF30             WFI              
     36          }
   \   0000000E   0x4770             BX       LR               ;; return
     37          /***********************************************************************/
     38          /*
     39           * Configures the ARM system control register for WAIT (sleep) mode
     40           * and then executes the WFI instruction to enter the mode.
     41           *
     42           * Parameters:
     43           * none
     44           *
     45           * Note: Might want to change this later to allow for passing in a parameter
     46           *       to optionally set the sleep on exit bit.
     47           */
     48          

   \                                 In section .text, align 4, keep-with-next
     49          void wait (void)
     50          {
     51          	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
     52          	 * of deep sleep.
     53          	 */
     54          	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
   \                     wait:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     55          
     56          	/* WFI instruction will start entry into WAIT mode */
     57          	asm("WFI");
   \   0000000C   0xBF30             WFI              
     58          }
   \   0000000E   0x4770             BX       LR               ;; return
     59          /***********************************************************************/
     60          /*
     61           * Change the value of the vector table offset register to the specified value.
     62           *
     63           * Parameters:
     64           * vtor     new value to write to the VTOR
     65           */
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void write_vtor (int vtor)
     68          {
     69                  /* Write the VTOR with the new value */
     70                  SCB_VTOR = vtor;	
   \                     write_vtor:
   \   00000000   0x....             LDR.N    R1,??DataTable5_1  ;; 0xe000ed08
   \   00000002   0x6008             STR      R0,[R1, #+0]
     71          }
   \   00000004   0x4770             BX       LR               ;; return
     72          /***********************************************************************/
     73          /*
     74           * Initialize the NVIC to enable the specified IRQ.
     75           *
     76           * NOTE: The function only initializes the NVIC to enable a single IRQ.
     77           * Interrupts will also need to be enabled in the ARM core. This can be
     78           * done using the EnableInterrupts macro.
     79           *
     80           * Parameters:
     81           * irq    irq number to be enabled (the irq number NOT the vector number)
     82           */
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void enable_irq (int irq)
     85          {
   \                     enable_irq:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     86              int div;
     87          
     88              /* Make sure that the IRQ is an allowable number. Right now up to 91 is
     89               * used.
     90               */
     91              if (irq > 91)
   \   00000004   0x2C5C             CMP      R4,#+92
   \   00000006   0xDB02             BLT.N    ??enable_irq_0
     92                  uart0Printf("\nERR! Invalid IRQ value passed to enable irq function!\n");
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x.... 0x....      BL       uart0Printf
     93          
     94              /* Determine which of the NVICISERs corresponds to the irq */
     95              div = irq/32;
   \                     ??enable_irq_0:
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xFB94 0xF0F0      SDIV     R0,R4,R0
     96          
     97              switch (div)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??enable_irq_1
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD027             BEQ.N    ??enable_irq_2
   \   0000001C   0xD313             BCC.N    ??enable_irq_3
   \   0000001E   0xE037             B.N      ??enable_irq_4
     98              {
     99              	case 0x0:
    100                        NVICICPR0 = 1 << (irq%32);
   \                     ??enable_irq_1:
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2120             MOVS     R1,#+32
   \   00000024   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000028   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000002C   0x4090             LSLS     R0,R0,R2
   \   0000002E   0x....             LDR.N    R1,??DataTable5_3  ;; 0xe000e280
   \   00000030   0x6008             STR      R0,[R1, #+0]
    101                        NVICISER0 = 1 << (irq%32);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x2120             MOVS     R1,#+32
   \   00000036   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000003A   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000003E   0x4090             LSLS     R0,R0,R2
   \   00000040   0x....             LDR.N    R1,??DataTable5_4  ;; 0xe000e100
   \   00000042   0x6008             STR      R0,[R1, #+0]
    102                        break;
   \   00000044   0xE024             B.N      ??enable_irq_4
    103              	case 0x1:
    104                        NVICICPR1 = 1 << (irq%32);
   \                     ??enable_irq_3:
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2120             MOVS     R1,#+32
   \   0000004A   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000004E   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000052   0x4090             LSLS     R0,R0,R2
   \   00000054   0x....             LDR.N    R1,??DataTable5_5  ;; 0xe000e284
   \   00000056   0x6008             STR      R0,[R1, #+0]
    105                        NVICISER1 = 1 << (irq%32);
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x2120             MOVS     R1,#+32
   \   0000005C   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000060   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000064   0x4090             LSLS     R0,R0,R2
   \   00000066   0x....             LDR.N    R1,??DataTable5_6  ;; 0xe000e104
   \   00000068   0x6008             STR      R0,[R1, #+0]
    106                        break;
   \   0000006A   0xE011             B.N      ??enable_irq_4
    107              	case 0x2:
    108                        NVICICPR2 = 1 << (irq%32);
   \                     ??enable_irq_2:
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x2120             MOVS     R1,#+32
   \   00000070   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000074   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000078   0x4090             LSLS     R0,R0,R2
   \   0000007A   0x....             LDR.N    R1,??DataTable5_7  ;; 0xe000e288
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    109                        NVICISER2 = 1 << (irq%32);
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x2120             MOVS     R1,#+32
   \   00000082   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000086   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000008A   0x4090             LSLS     R0,R0,R2
   \   0000008C   0x....             LDR.N    R1,??DataTable5_8  ;; 0xe000e108
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    110                        break;
    111              }
    112          }
   \                     ??enable_irq_4:
   \   00000090   0xBD10             POP      {R4,PC}          ;; return
    113          /***********************************************************************/
    114          /*
    115           * Initialize the NVIC to disable the specified IRQ.
    116           *
    117           * NOTE: The function only initializes the NVIC to disable a single IRQ.
    118           * If you want to disable all interrupts, then use the DisableInterrupts
    119           * macro instead.
    120           *
    121           * Parameters:
    122           * irq    irq number to be disabled (the irq number NOT the vector number)
    123           */
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void disable_irq (int irq)
    126          {
   \                     disable_irq:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    127              int div;
    128          
    129              /* Make sure that the IRQ is an allowable number. Right now up to 91 is
    130               * used.
    131               */
    132              if (irq > 91)
   \   00000004   0x2C5C             CMP      R4,#+92
   \   00000006   0xDB02             BLT.N    ??disable_irq_0
    133                  uart0Printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
   \   00000008   0x....             LDR.N    R0,??DataTable5_9
   \   0000000A   0x.... 0x....      BL       uart0Printf
    134          
    135              /* Determine which of the NVICICERs corresponds to the irq */
    136              div = irq/32;
   \                     ??disable_irq_0:
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xFB94 0xF0F0      SDIV     R0,R4,R0
    137          
    138              switch (div)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??disable_irq_1
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD015             BEQ.N    ??disable_irq_2
   \   0000001C   0xD30A             BCC.N    ??disable_irq_3
   \   0000001E   0xE01C             B.N      ??disable_irq_4
    139              {
    140              	case 0x0:
    141                         NVICICER0 = 1 << (irq%32);
   \                     ??disable_irq_1:
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2120             MOVS     R1,#+32
   \   00000024   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000028   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000002C   0x4090             LSLS     R0,R0,R2
   \   0000002E   0x....             LDR.N    R1,??DataTable5_10  ;; 0xe000e180
   \   00000030   0x6008             STR      R0,[R1, #+0]
    142                        break;
   \   00000032   0xE012             B.N      ??disable_irq_4
    143              	case 0x1:
    144                        NVICICER1 = 1 << (irq%32);
   \                     ??disable_irq_3:
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x2120             MOVS     R1,#+32
   \   00000038   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000003C   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000040   0x4090             LSLS     R0,R0,R2
   \   00000042   0x....             LDR.N    R1,??DataTable5_11  ;; 0xe000e184
   \   00000044   0x6008             STR      R0,[R1, #+0]
    145                        break;
   \   00000046   0xE008             B.N      ??disable_irq_4
    146              	case 0x2:
    147                        NVICICER2 = 1 << (irq%32);
   \                     ??disable_irq_2:
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x2120             MOVS     R1,#+32
   \   0000004C   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000050   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000054   0x4090             LSLS     R0,R0,R2
   \   00000056   0x....             LDR.N    R1,??DataTable5_12  ;; 0xe000e188
   \   00000058   0x6008             STR      R0,[R1, #+0]
    148                        break;
    149              }
    150          }
   \                     ??disable_irq_4:
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    151          /***********************************************************************/
    152          /*
    153           * Initialize the NVIC to set specified IRQ priority.
    154           *
    155           * NOTE: The function only initializes the NVIC to set a single IRQ priority.
    156           * Interrupts will also need to be enabled in the ARM core. This can be
    157           * done using the EnableInterrupts macro.
    158           *
    159           * Parameters:
    160           * irq    irq number to be enabled (the irq number NOT the vector number)
    161           * prio   irq priority. 0-15 levels. 0 max priority
    162           */
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void set_irq_priority (int irq, int prio)
    165          {
   \                     set_irq_priority:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    166              /*irq priority pointer*/
    167              uint8 *prio_reg;
    168          
    169              /* Make sure that the IRQ is an allowable number. Right now up to 91 is
    170               * used.
    171               */
    172              if (irq > 91)
   \   00000006   0x2C5C             CMP      R4,#+92
   \   00000008   0xDB02             BLT.N    ??set_irq_priority_0
    173                  uart0Printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
   \   0000000A   0x....             LDR.N    R0,??DataTable5_13
   \   0000000C   0x.... 0x....      BL       uart0Printf
    174          
    175              if (prio > 15)
   \                     ??set_irq_priority_0:
   \   00000010   0x2D10             CMP      R5,#+16
   \   00000012   0xDB02             BLT.N    ??set_irq_priority_1
    176                  uart0Printf("\nERR! Invalid priority value passed to priority irq function!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable5_14
   \   00000016   0x.... 0x....      BL       uart0Printf
    177          
    178              /* Determine which of the NVICIPx corresponds to the irq */
    179              prio_reg = (uint8 *)(((uint32)&NVICIP0) + irq);
   \                     ??set_irq_priority_1:
   \   0000001A   0xF104 0x4060      ADD      R0,R4,#-536870912
   \   0000001E   0xF510 0x4064      ADDS     R0,R0,#+58368
    180              /* Assign priority to IRQ */
    181              *prio_reg = ( (prio&0xF) << (8 - ARM_INTERRUPT_LEVEL_BITS) );
   \   00000022   0x0129             LSLS     R1,R5,#+4
   \   00000024   0x7001             STRB     R1,[R0, #+0]
    182          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E284         DC32     0xe000e284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0xE000E104         DC32     0xe000e104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000E288         DC32     0xe000e288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0xE000E108         DC32     0xe000e108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0xE000E184         DC32     0xe000e184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0xE000E188         DC32     0xe000e188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid priorit...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 65H, 6EH, 61H, 62H, 6CH, 65H
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 72H, 71H, 20H, 66H, 75H, 6EH
   \              0x72 0x71    
   \              0x20 0x66    
   \              0x75 0x6E    
   \   00000030   0x63 0x74          DC8 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x69 0x6F    
   \              0x6E 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_1`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 64H, 69H, 73H, 61H, 62H, 6CH
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \   00000028   0x65 0x20          DC8 65H, 20H, 69H, 72H, 71H, 20H, 66H, 75H
   \              0x69 0x72    
   \              0x71 0x20    
   \              0x66 0x75    
   \   00000030   0x6E 0x63          DC8 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_2`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 70H, 72H, 69H, 6FH, 72H, 69H
   \              0x70 0x72    
   \              0x69 0x6F    
   \              0x72 0x69    
   \   00000028   0x74 0x79          DC8 74H, 79H, 20H, 69H, 72H, 71H, 20H, 66H
   \              0x20 0x69    
   \              0x72 0x71    
   \              0x20 0x66    
   \   00000030   0x75 0x6E          DC8 75H, 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x21    
   \   00000038   0x0A 0x00          DC8 0AH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid priorit...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 70H, 72H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x72    
   \   00000010   0x69 0x6F          DC8 69H, 6FH, 72H, 69H, 74H, 79H, 20H, 76H
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x76    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 20H, 70H, 61H, 73H
   \              0x75 0x65    
   \              0x20 0x70    
   \              0x61 0x73    
   \   00000020   0x73 0x65          DC8 73H, 65H, 64H, 20H, 74H, 6FH, 20H, 70H
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \   00000028   0x72 0x69          DC8 72H, 69H, 6FH, 72H, 69H, 74H, 79H, 20H
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \   00000030   0x69 0x72          DC8 69H, 72H, 71H, 20H, 66H, 75H, 6EH, 63H
   \              0x71 0x20    
   \              0x66 0x75    
   \              0x6E 0x63    
   \   00000038   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0
    183          /***********************************************************************/
    184          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  disable_irq
              8 -> uart0Printf
        8  enable_irq
              8 -> uart0Printf
       16  set_irq_priority
             16 -> uart0Printf
        0  stop
        0  wait
        0  write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Constant "\nERR! Invalid IRQ val...">
      60  ?<Constant "\nERR! Invalid IRQ val...">_1
      60  ?<Constant "\nERR! Invalid IRQ val...">_2
      64  ?<Constant "\nERR! Invalid priorit...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      92  disable_irq
     146  enable_irq
      40  set_irq_priority
      16  stop
      16  wait
       6  write_vtor

 
 240 bytes in section .rodata
 376 bytes in section .text
 
 376 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: none
