###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     05/Apr/2012  05:05:24 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\isr #
#                    .c                                                       #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\isr #
#                    .c -lCN D:\workspace\myworkspace\SW_K60\build\SX_demo\RA #
#                    M\List\ -lB D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\RAM\List\ -o D:\workspace\myworkspace\SW_K60\build\SX_ #
#                    demo\RAM\Obj\ --no_cse --no_unroll --no_inline           #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\ -I D:\workspace\myworkspace\SW_K60\build\SX_demo\. #
#                    .\..\src\common\ -I D:\workspace\myworkspace\SW_K60\buil #
#                    d\SX_demo\..\..\src\cpu\ -I                              #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ -I D:\workspace\myworkspace\SW_K60\build\SX_dem #
#                    o\..\..\src\drivers\gpio\ -I                             #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\mcg\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build\S #
#                    X_demo\..\..\src\drivers\lptmr\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\LED\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\fun\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\FTM\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\pit\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\DIPswitch\ -I D:\workspace\myworkspace\SW_K60\bu #
#                    ild\SX_demo\..\..\src\drivers\steer\ -I                  #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\ccd\ -I D:\workspace\myworkspace\SW_K60\build\SX #
#                    _demo\..\..\src\drivers\dma\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    drivers\motor\ -I D:\workspace\myworkspace\SW_K60\build\ #
#                    SX_demo\..\..\src\platforms\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\SX_demo\..\..\src\ #
#                    projects\ -I D:\workspace\myworkspace\SW_K60\build\SX_de #
#                    mo\..\..\src\projects\SX_demo\ -Ol                       #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\List\i #
#                    sr.lst                                                   #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\SX_demo\RAM\Obj\is #
#                    r.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\projects\SX_demo\isr.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[isr.c] 
      5          * 描  述 ：中断处理例程
      6          * 原创   ：野火嵌入式开发工作室
      7          *设计改进：snowwolf
      8          *  Email ：snowwolf2012@qq.com
      9          * 说  明 ：所有的中断函数写在这里
     10          ***********************************************************************
     11          */
     12          
     13          
     14          
     15          #include "common.h"
     16          #include "include.h"
     17          #include "isr.h"
     18          #include "global.h"
     19          

   \                                 In section .bss, align 1
     20          u8 PITcounter = 0;
   \                     PITcounter:
   \   00000000                      DS8 1
     21          /************************************************************************* 
     22          *  函数名称：PIT0_IRQHandler
     23          *  功能说明：PIT0 定时中断服务函数
     24          *  参数说明：无   
     25          *  函数返回：无
     26          *  修改时间：2012-2-18    已测试
     27          *  备    注：建议大家在写程序时尽量用宏定义，这样写出的代码可移值性强
     28          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     29          void PIT0_IRQHandler(void)
     30          {
   \                     PIT0_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
     31              PIT_Flag_Clear(PIT0);                 //清中断标志位
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable2  ;; 0x4003710c
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     32             
     33              trueSpeed = LPTMR0_CNR;   //保存脉冲计数器计算值
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1
   \   00000010   0x....             LDR.N    R1,??DataTable2_2  ;; 0x4004000c
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x6001             STR      R1,[R0, #+0]
     34              lptmr_counter_clean(); 
   \   00000016   0x.... 0x....      BL       lptmr_counter_clean
     35              //速度控制算法
     36              motorCtrl();
   \   0000001A   0x.... 0x....      BL       motorCtrl
     37                
     38              GPIO_TURN(PORTB,0);       //用于测试PIT频率
   \   0000001E   0x....             LDR.N    R0,??DataTable2_3
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000028   0x....             LDR.N    R1,??DataTable2_3
   \   0000002A   0x6849             LDR      R1,[R1, #+4]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     39              PITcounter = (PITcounter + 1) % 13;
   \   0000002E   0x....             LDR.N    R0,??DataTable2_4
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x210D             MOVS     R1,#+13
   \   00000036   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000003A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003E   0x....             LDR.N    R1,??DataTable2_4
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     40          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
     41          
     42          
     43          

   \                                 In section .bss, align 4
     44          u32 tmpline = 0;//行号
   \                     tmpline:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          u32 tmprow = 0; //列号
   \                     tmprow:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     46          u32 tmpnum = 0; //场号
   \                     tmpnum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          u32 picLineSum = 0;//总行数
   \                     picLineSum:
   \   00000000                      DS8 4
     48          
     49          
     50          #ifdef CCD_DMA
     51          
     52          #warning  "this is DMA"
     53          void FTM2_IRQHandler()
     54          {
     55              u8 s=FTM2_STATUS;               //读取捕捉和比较状态  All CHnF bits can be checked using only one read of STATUS.
     56              u8 CHn;
     57             
     58              DisableInterrupts; 
     59              FTM2_STATUS=0x00;               //清中断标志位
     60              
     61              //行中断 PTA8
     62              CHn=0;//中断标志位被置位，且中断使能 
     63              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
     64              {
     65                  tmpline++; 
     66                  
     67          
     68                  if(0 == (tmpline % 2))
     69                  {
     70                      ASSERT_RST(DMA_CITER_ELINKNO(CCD_DMA_CH) == COLUMN,"DMA末传输结束");
     71                      DMA_SETDAADDR(CCD_DMA_CH,&Pic_Buffer[tmprow][0]);
     72                      DMA_EN(CCD_DMA_CH);                         //开始DMA传输 
     73                      
     74                      tmprow++;
     75                      if(tmprow >= ROW)
     76                      {
     77                          photeCompleteFlag = 1;
     78                      }
     79                  }
     80                  
     81              }
     82              
     83              //场中断      PTA9
     84              CHn=1;
     85              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
     86              {
     87                 //uartSendChar(UART0,'v');
     88                 //uartPrintf("场中断开\n");
     89                 tmpnum++;
     90                 picLineSum = tmpline;
     91                 tmpline = 0;
     92                 tmprow = 0;
     93                 DMA_IRQ_CLEAN(CCD_DMA_CH);
     94                 En_HREF;     //打开行中断
     95              }
     96              EnableInterrupts; 
     97          }
     98          
     99          #else //#ifdef CCD_DMA
    100          
    101          #warning  "this interrupt"
    102          
    103          
    104          /*
    105          以下是一96M 系统时钟 48M总线时钟下调试成功，其他摄像头需要自己调配
    106          */
    107          #define nops()  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop")

   \                                 In section .text, align 4, keep-with-next
    108          void FTM2_IRQHandler()
    109          {
   \                     FTM2_IRQHandler:
   \   00000000   0xB410             PUSH     {R4}
    110              u8 s=FTM2_STATUS;               //读取捕捉和比较状态  All CHnF bits can be checked using only one read of STATUS.
   \   00000002   0x....             LDR.N    R0,??DataTable2_5  ;; 0x400b8050
   \   00000004   0x6800             LDR      R0,[R0, #+0]
    111              u8 CHn;
    112              u8 tmpcol = 0;
   \   00000006   0x2100             MOVS     R1,#+0
    113              DisableInterrupts; 
   \   00000008   0xB672             CPSID i         
    114              FTM2_STATUS=0x00;               //清中断标志位
   \   0000000A   0x....             LDR.N    R2,??DataTable2_5  ;; 0x400b8050
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x6013             STR      R3,[R2, #+0]
    115              
    116              //行中断 PTA8
    117              CHn=0;//中断标志位被置位，且中断使能 
   \   00000010   0x2200             MOVS     R2,#+0
    118              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
   \   00000012   0x2301             MOVS     R3,#+1
   \   00000014   0x4093             LSLS     R3,R3,R2
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x421C             TST      R4,R3
   \   0000001C   0xD033             BEQ.N    ??FTM2_IRQHandler_0
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x....             LDR.N    R1,??DataTable2_6
   \   00000022   0x6889             LDR      R1,[R1, #+8]
   \   00000024   0xEB11 0x01C2      ADDS     R1,R1,R2, LSL #+3
   \   00000028   0x68C9             LDR      R1,[R1, #+12]
   \   0000002A   0x0649             LSLS     R1,R1,#+25
   \   0000002C   0xD52B             BPL.N    ??FTM2_IRQHandler_0
    119              {
    120                  tmpline++;
   \   0000002E   0x....             LDR.N    R1,??DataTable2_7
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x1C49             ADDS     R1,R1,#+1
   \   00000034   0x....             LDR.N    R2,??DataTable2_7
   \   00000036   0x6011             STR      R1,[R2, #+0]
    121                  
    122                  if(0 == (tmpline % 2))
   \   00000038   0x....             LDR.N    R1,??DataTable2_7
   \   0000003A   0x7809             LDRB     R1,[R1, #+0]
   \   0000003C   0x07C9             LSLS     R1,R1,#+31
   \   0000003E   0xD422             BMI.N    ??FTM2_IRQHandler_0
    123                  {
    124                      for(tmpcol = 0;tmpcol < COLUMN;tmpcol++)
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xE011             B.N      ??FTM2_IRQHandler_1
    125                      {
    126                         Pic_Buffer[tmprow][tmpcol] = CCD_DATA;
   \                     ??FTM2_IRQHandler_2:
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0x....             LDR.N    R2,??DataTable2_8
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0x23A0             MOVS     R3,#+160
   \   0000004C   0x....             LDR.N    R4,??DataTable2_9
   \   0000004E   0xFB03 0x4202      MLA      R2,R3,R2,R4
   \   00000052   0x....             LDR.N    R3,??DataTable2_3
   \   00000054   0x68DB             LDR      R3,[R3, #+12]
   \   00000056   0x7C1B             LDRB     R3,[R3, #+16]
   \   00000058   0x548B             STRB     R3,[R1, R2]
    127                         nops(); 
   \   0000005A   0xBF00             nop              
   \   0000005C   0xBF00             nop              
   \   0000005E   0xBF00             nop              
   \   00000060   0xBF00             nop              
   \   00000062   0xBF00             nop              
   \   00000064   0xBF00             nop              
    128                      }
   \   00000066   0x1C49             ADDS     R1,R1,#+1
   \                     ??FTM2_IRQHandler_1:
   \   00000068   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0x29A0             CMP      R1,#+160
   \   0000006C   0xD3EA             BCC.N    ??FTM2_IRQHandler_2
    129                      
    130                      tmprow++;
   \   0000006E   0x....             LDR.N    R1,??DataTable2_8
   \   00000070   0x6809             LDR      R1,[R1, #+0]
   \   00000072   0x1C49             ADDS     R1,R1,#+1
   \   00000074   0x....             LDR.N    R2,??DataTable2_8
   \   00000076   0x6011             STR      R1,[R2, #+0]
    131                      if(tmprow >= ROW)
   \   00000078   0x....             LDR.N    R1,??DataTable2_8
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0x2978             CMP      R1,#+120
   \   0000007E   0xD302             BCC.N    ??FTM2_IRQHandler_0
    132                      {
    133                        photeCompleteFlag = 1;
   \   00000080   0x....             LDR.N    R1,??DataTable2_10
   \   00000082   0x2201             MOVS     R2,#+1
   \   00000084   0x600A             STR      R2,[R1, #+0]
    134                      }
    135                  }
    136                  
    137              }
    138              
    139              //场中断      PTA9
    140              CHn=1;
   \                     ??FTM2_IRQHandler_0:
   \   00000086   0x2201             MOVS     R2,#+1
    141              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x4091             LSLS     R1,R1,R2
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0x4208             TST      R0,R1
   \   00000090   0xD01E             BEQ.N    ??FTM2_IRQHandler_3
   \   00000092   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000094   0x....             LDR.N    R0,??DataTable2_6
   \   00000096   0x6880             LDR      R0,[R0, #+8]
   \   00000098   0xEB10 0x00C2      ADDS     R0,R0,R2, LSL #+3
   \   0000009C   0x68C0             LDR      R0,[R0, #+12]
   \   0000009E   0x0640             LSLS     R0,R0,#+25
   \   000000A0   0xD516             BPL.N    ??FTM2_IRQHandler_3
    142              {
    143                 //uartSendChar(UART0,'v');
    144                 tmpnum++;
   \   000000A2   0x....             LDR.N    R0,??DataTable2_11
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x....             LDR.N    R1,??DataTable2_11
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    145                 picLineSum = tmpline;
   \   000000AC   0x....             LDR.N    R0,??DataTable2_12
   \   000000AE   0x....             LDR.N    R1,??DataTable2_7
   \   000000B0   0x6809             LDR      R1,[R1, #+0]
   \   000000B2   0x6001             STR      R1,[R0, #+0]
    146                 tmpline = 0;
   \   000000B4   0x....             LDR.N    R0,??DataTable2_7
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x6001             STR      R1,[R0, #+0]
    147                 tmprow = 0;
   \   000000BA   0x....             LDR.N    R0,??DataTable2_8
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x6001             STR      R1,[R0, #+0]
    148                 En_HREF;     //打开行中断
   \   000000C0   0x....             LDR.N    R0,??DataTable2_6
   \   000000C2   0x6880             LDR      R0,[R0, #+8]
   \   000000C4   0x68C0             LDR      R0,[R0, #+12]
   \   000000C6   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000CA   0x....             LDR.N    R1,??DataTable2_6
   \   000000CC   0x6889             LDR      R1,[R1, #+8]
   \   000000CE   0x60C8             STR      R0,[R1, #+12]
    149              }
    150              EnableInterrupts; 
   \                     ??FTM2_IRQHandler_3:
   \   000000D0   0xB662             CPSIE i         
    151          }
   \   000000D2   0xBC10             POP      {R4}
   \   000000D4   0x4770             BX       LR               ;; return
    152          #endif   //#ifdef CCD_DMA
    153          
    154          /*************************************************************************
    155          *  函数名称：USART1_IRQHandler
    156          *  功能说明：串口1 中断 接收 服务函数
    157          *  参数说明：无   
    158          *  函数返回：无
    159          *  修改时间：2012-2-14    已测试
    160          *  备    注：
    161          *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    162          void UART0_IRQHandler(void)
    163          {
   \                     UART0_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    164              uint8 ch;
    165              
    166              DisableInterrupts;		    //关总中断
   \   00000002   0xB672             CPSID i         
    167              
    168              //接收一个字节数据并回发
    169              ch=uartRecvChar (UART0);                //接收到一个数据
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       uartRecvChar
   \   0000000A   0x0004             MOVS     R4,R0
    170              uart0Printf("cmd = 0x%X\n",ch);
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x....             LDR.N    R0,??DataTable2_13
   \   00000012   0x.... 0x....      BL       uart0Printf
    171              
    172              if(ch == 's')
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C73             CMP      R4,#+115
   \   0000001A   0xD110             BNE.N    ??UART0_IRQHandler_0
    173              {
    174              if((showChoice & 0x01))
   \   0000001C   0x....             LDR.N    R0,??DataTable2_14
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD506             BPL.N    ??UART0_IRQHandler_1
    175                   showChoice &= 0xFE;
   \   00000024   0x....             LDR.N    R0,??DataTable2_14
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000002C   0x....             LDR.N    R1,??DataTable2_14
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
   \   00000030   0xE005             B.N      ??UART0_IRQHandler_0
    176              else
    177                   showChoice |= 0x01;
   \                     ??UART0_IRQHandler_1:
   \   00000032   0x....             LDR.N    R0,??DataTable2_14
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x....             LDR.N    R1,??DataTable2_14
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    178              }
    179              EnableInterrupts;		    //开总中断
   \                     ??UART0_IRQHandler_0:
   \   0000003E   0xB662             CPSIE i         
    180          }
   \   00000040   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     trueSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4004000C         DC32     0x4004000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     PITcounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x400B8050         DC32     0x400b8050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     FTMx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     tmpline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     tmprow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     Pic_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     photeCompleteFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     tmpnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     picLineSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     `?<Constant "cmd = 0x%X\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     showChoice

   \                                 In section .rodata, align 4
   \                     `?<Constant "cmd = 0x%X\\n">`:
   \   00000000   0x63 0x6D          DC8 "cmd = 0x%X\012"
   \              0x64 0x20    
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  FTM2_IRQHandler
        8  PIT0_IRQHandler
             8 -> lptmr_counter_clean
             8 -> motorCtrl
        8  UART0_IRQHandler
             8 -> uart0Printf
             8 -> uartRecvChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "cmd = 0x%X\n">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     214  FTM2_IRQHandler
      68  PIT0_IRQHandler
       1  PITcounter
      66  UART0_IRQHandler
       4  picLineSum
       4  tmpline
       4  tmpnum
       4  tmprow

 
  17 bytes in section .bss
  12 bytes in section .rodata
 408 bytes in section .text
 
 408 bytes of CODE  memory
  12 bytes of CONST memory
  17 bytes of DATA  memory

Errors: none
Warnings: 1
