###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     03/Apr/2012  19:01:43 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\drivers\adc\adc.c    #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\drivers\adc\adc.c    #
#                    -lCN D:\workspace\myworkspace\SW_K60\build\GD_demo\RAM\L #
#                    ist\ -lB D:\workspace\myworkspace\SW_K60\build\GD_demo\R #
#                    AM\List\ -o D:\workspace\myworkspace\SW_K60\build\GD_dem #
#                    o\RAM\Obj\ --no_cse --no_unroll --no_inline              #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\GD_dem #
#                    o\..\ -I D:\workspace\myworkspace\SW_K60\build\GD_demo\. #
#                    .\..\src\common\ -I D:\workspace\myworkspace\SW_K60\buil #
#                    d\GD_demo\..\..\src\cpu\ -I                              #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\ -I D:\workspace\myworkspace\SW_K60\build\GD_dem #
#                    o\..\..\src\drivers\gpio\ -I                             #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build\G #
#                    D_demo\..\..\src\drivers\mcg\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build\G #
#                    D_demo\..\..\src\drivers\lptmr\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\exti\ -I D:\workspace\myworkspace\SW_K60\build\G #
#                    D_demo\..\..\src\drivers\LED\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\fun\ -I D:\workspace\myworkspace\SW_K60\build\GD #
#                    _demo\..\..\src\drivers\pit\ -I                          #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    drivers\ftm\ -I D:\workspace\myworkspace\SW_K60\build\GD #
#                    _demo\..\..\src\platforms\ -I                            #
#                    D:\workspace\myworkspace\SW_K60\build\GD_demo\..\..\src\ #
#                    projects\ -I D:\workspace\myworkspace\SW_K60\build\GD_de #
#                    mo\..\..\src\projects\GD_demo\ -Ol                       #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\GD_demo\RAM\List\a #
#                    dc.lst                                                   #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\GD_demo\RAM\Obj\ad #
#                    c.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\drivers\adc\adc.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[adc.c] 
      5          * 描  述 ：adc驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：adc驱动函数
      9          ***********************************************************************
     10          */
     11          #include "common.h"
     12          #include "adc.h"
     13          
     14          

   \                                 In section .bss, align 4
     15          tADC_Config Master_Adc_Config;          //该结构体包含了需要的ADC/PGA配置
   \                     Master_Adc_Config:
   \   00000000                      DS8 16
     16          

   \                                 In section .data, align 4
     17          volatile struct ADC_MemMap *ADCx[2]={ADC0_BASE_PTR,ADC1_BASE_PTR}; //定义两个指针数组保存 ADCx 的地址
   \                     ADCx:
   \   00000000   0x4003B000         DC32 4003B000H, 400BB000H
   \              0x400BB000   
     18          
     19          /*************************************************************************
     20          *  函数名称：adc_init
     21          *  功能说明：AD初始化，使能时钟
     22          *  参数说明：ADCn        模块号（ ADC0、 ADC1）
     23          *  函数返回：无
     24          *  修改时间：2012-2-10
     25          *  备    注：参考苏州大学的例程
     26          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     27          void adc_init(ADCn adcn,ADC_Ch ch)
     28          {
   \                     adc_init:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     29              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD104             BNE.N    ??adc_init_0
   \   0000000C   0xF1B4 0x0008      SUBS     R0,R4,#+8
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x280B             CMP      R0,#+11
   \   00000014   0xD30B             BCC.N    ??adc_init_1
   \                     ??adc_init_0:
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xD103             BNE.N    ??adc_init_2
   \   0000001C   0x1F20             SUBS     R0,R4,#+4
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x280E             CMP      R0,#+14
   \   00000022   0xD304             BCC.N    ??adc_init_1
   \                     ??adc_init_2:
   \   00000024   0x211D             MOVS     R1,#+29
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000002A   0x.... 0x....      BL       assert_failed
     30          
     31              switch(adcn)
   \                     ??adc_init_1:
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD002             BEQ.N    ??adc_init_3
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD079             BEQ.N    ??adc_init_4
   \   00000038   0xE0E6             B.N      ??adc_init_5
     32              {
     33              case ADC0:       /*   ADC0  */
     34                  SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK );        //开启ADC0时钟
   \                     ??adc_init_3:
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable5_1  ;; 0x4004803c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_1  ;; 0x4004803c
   \   00000048   0x6008             STR      R0,[R1, #+0]
     35                  SIM_SOPT7 &= ~(SIM_SOPT7_ADC0ALTTRGEN_MASK  |SIM_SOPT7_ADC0PRETRGSEL_MASK);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40048018
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF030 0x0090      BICS     R0,R0,#0x90
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x40048018
   \   00000058   0x6008             STR      R0,[R1, #+0]
     36                  SIM_SOPT7 = SIM_SOPT7_ADC0TRGSEL(0);        //选择pretrigger A
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40048018
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x6001             STR      R1,[R0, #+0]
     37          
     38                  switch(ch)
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3808             SUBS     R0,R0,#+8
   \   00000068   0x2801             CMP      R0,#+1
   \   0000006A   0xD90C             BLS.N    ??adc_init_6
   \   0000006C   0x1E80             SUBS     R0,R0,#+2
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD91B             BLS.N    ??adc_init_7
   \   00000072   0x1E80             SUBS     R0,R0,#+2
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD929             BLS.N    ??adc_init_8
   \   00000078   0x1E80             SUBS     R0,R0,#+2
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xD936             BLS.N    ??adc_init_9
   \   0000007E   0x1EC0             SUBS     R0,R0,#+3
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xD943             BLS.N    ??adc_init_10
   \   00000084   0xE051             B.N      ??adc_init_11
     39                  {
     40                  case AD8:   //ADC0_SE8 -- PTB0
     41                  case AD9:   //ADC0_SE9 -- PTB1
     42                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_6:
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40048038
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x40048038
   \   00000094   0x6008             STR      R0,[R1, #+0]
     43                      PORT_PCR_REG(PORTB_BASE_PTR, ch-AD8+0) =  PORT_PCR_MUX(0);
   \   00000096   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000098   0x00A0             LSLS     R0,R4,#+2
   \   0000009A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000009E   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0xF840 0x1C20      STR      R1,[R0, #-32]
     44                      break;
     45                  case AD10:  //ADC0_SE10 -- PTA7
     46                  case AD11:  //ADC0_SE11 -- PTA8
     47                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
     48                      PORT_PCR_REG(PORTA_BASE_PTR, ch-AD10+7) =  PORT_PCR_MUX(0);
     49                      break;
     50                  case AD12:  //ADC0_SE12 -- PTB2
     51                  case AD13:  //ADC0_SE13 -- PTB3
     52                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
     53                      PORT_PCR_REG(PORTB_BASE_PTR, ch-AD12+2) =  PORT_PCR_MUX(0);
     54                      break;
     55                  case AD14:  //ADC0_SE14 -- PTC0
     56                  case AD15:  //ADC0_SE15 -- PTC1
     57                      SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
     58                      PORT_PCR_REG(PORTC_BASE_PTR, ch-AD14+0) =  PORT_PCR_MUX(0);
     59                      break;
     60                  case AD17:   //ADC0_SE17 -- PTE24
     61                  case AD18:   //ADC0_SE17 -- PTE25
     62                      SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
     63                      PORT_PCR_REG(PORTE_BASE_PTR, ch-AD17+24) =  PORT_PCR_MUX(0);
     64                      break;
     65                  default:
     66                      return;
     67                  }
     68                  return;
   \                     ??adc_init_12:
   \   000000A8   0xE0AE             B.N      ??adc_init_13
   \                     ??adc_init_7:
   \   000000AA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xF44F 0x7100      MOV      R1,#+512
   \   000000B2   0x4308             ORRS     R0,R1,R0
   \   000000B4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x00A0             LSLS     R0,R4,#+2
   \   000000BC   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000C0   0xF510 0x2092      ADDS     R0,R0,#+299008
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0xF840 0x1C0C      STR      R1,[R0, #-12]
   \   000000CA   0xE7ED             B.N      ??adc_init_12
   \                     ??adc_init_8:
   \   000000CC   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000D4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000D6   0x6008             STR      R0,[R1, #+0]
   \   000000D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DA   0x00A0             LSLS     R0,R4,#+2
   \   000000DC   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000E0   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0xF840 0x1C28      STR      R1,[R0, #-40]
   \   000000EA   0xE7DD             B.N      ??adc_init_12
   \                     ??adc_init_9:
   \   000000EC   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000F4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000F6   0x6008             STR      R0,[R1, #+0]
   \   000000F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FA   0x00A0             LSLS     R0,R4,#+2
   \   000000FC   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000100   0xF510 0x2096      ADDS     R0,R0,#+307200
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0xF840 0x1C38      STR      R1,[R0, #-56]
   \   0000010A   0xE7CD             B.N      ??adc_init_12
   \                     ??adc_init_10:
   \   0000010C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000114   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000116   0x6008             STR      R0,[R1, #+0]
   \   00000118   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011A   0x00A0             LSLS     R0,R4,#+2
   \   0000011C   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000120   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x61C1             STR      R1,[R0, #+28]
   \   00000128   0xE7BE             B.N      ??adc_init_12
   \                     ??adc_init_11:
   \   0000012A   0xE06D             B.N      ??adc_init_13
     69          
     70            case ADC1:       /*   ADC1    */
     71                SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK );
   \                     ??adc_init_4:
   \   0000012C   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40048030
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000134   0x....             LDR.N    R1,??DataTable5_4  ;; 0x40048030
   \   00000136   0x6008             STR      R0,[R1, #+0]
     72                SIM_SOPT7 &= ~(SIM_SOPT7_ADC1ALTTRGEN_MASK  |SIM_SOPT7_ADC1PRETRGSEL_MASK) ;
   \   00000138   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40048018
   \   0000013A   0x6800             LDR      R0,[R0, #+0]
   \   0000013C   0xF430 0x4010      BICS     R0,R0,#0x9000
   \   00000140   0x....             LDR.N    R1,??DataTable5_2  ;; 0x40048018
   \   00000142   0x6008             STR      R0,[R1, #+0]
     73                SIM_SOPT7 = SIM_SOPT7_ADC1TRGSEL(0);
   \   00000144   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40048018
   \   00000146   0x2100             MOVS     R1,#+0
   \   00000148   0x6001             STR      R1,[R0, #+0]
     74          
     75                switch(ch)
   \   0000014A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014C   0x0020             MOVS     R0,R4
   \   0000014E   0x1F00             SUBS     R0,R0,#+4
   \   00000150   0x2803             CMP      R0,#+3
   \   00000152   0xD90B             BLS.N    ??adc_init_14
   \   00000154   0x1F00             SUBS     R0,R0,#+4
   \   00000156   0x2801             CMP      R0,#+1
   \   00000158   0xD918             BLS.N    ??adc_init_15
   \   0000015A   0x1E80             SUBS     R0,R0,#+2
   \   0000015C   0x2803             CMP      R0,#+3
   \   0000015E   0xD925             BLS.N    ??adc_init_16
   \   00000160   0x1F00             SUBS     R0,R0,#+4
   \   00000162   0x2801             CMP      R0,#+1
   \   00000164   0xD932             BLS.N    ??adc_init_17
   \   00000166   0x1EC0             SUBS     R0,R0,#+3
   \   00000168   0xD040             BEQ.N    ??adc_init_18
   \   0000016A   0xE04C             B.N      ??adc_init_19
     76                {
     77                case AD4a:   //ADC1_SE4a -- PTE0
     78                case AD5a:   //ADC1_SE5a -- PTE1
     79                case AD6a:   //ADC1_SE6a -- PTE2
     80                case AD7a:   //ADC1_SE7a -- PTE3
     81                    SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
   \                     ??adc_init_14:
   \   0000016C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000174   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000176   0x6008             STR      R0,[R1, #+0]
     82                    PORT_PCR_REG(PORTE_BASE_PTR, ch-AD4a+0) =  PORT_PCR_MUX(0);
   \   00000178   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017A   0x00A0             LSLS     R0,R4,#+2
   \   0000017C   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000180   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   00000184   0x2100             MOVS     R1,#+0
   \   00000186   0xF840 0x1C10      STR      R1,[R0, #-16]
     83                    break;
   \   0000018A   0xE03C             B.N      ??adc_init_20
     84                case AD8:  //ADC1_SE8 -- PTB0
     85                case AD9:  //ADC1_SE9 -- PTB1
     86                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_15:
   \   0000018C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000018E   0x6800             LDR      R0,[R0, #+0]
   \   00000190   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000194   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000196   0x6008             STR      R0,[R1, #+0]
     87                    PORT_PCR_REG(PORTB_BASE_PTR, ch-AD8+0) =  PORT_PCR_MUX(0);
   \   00000198   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000019A   0x00A0             LSLS     R0,R4,#+2
   \   0000019C   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001A0   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001A4   0x2100             MOVS     R1,#+0
   \   000001A6   0xF840 0x1C20      STR      R1,[R0, #-32]
     88                    break;
   \   000001AA   0xE02C             B.N      ??adc_init_20
     89                case AD10:  //ADC1_SE10 -- PTB4
     90                case AD11:  //ADC1_SE11 -- PTB5
     91                case AD12:  //ADC1_SE12 -- PTB6
     92                case AD13:  //ADC1_SE13 -- PTB7
     93                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_16:
   \   000001AC   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001B4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001B6   0x6008             STR      R0,[R1, #+0]
     94                    PORT_PCR_REG(PORTB_BASE_PTR, ch-6) =  PORT_PCR_MUX(0);
   \   000001B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001BA   0x00A0             LSLS     R0,R4,#+2
   \   000001BC   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001C0   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0xF840 0x1C18      STR      R1,[R0, #-24]
     95                    break;
   \   000001CA   0xE01C             B.N      ??adc_init_20
     96                case AD14:  //ADC1_SE14 -- PTB10
     97                case AD15:  //ADC1_SE15 -- PTB11
     98                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_17:
   \   000001CC   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001CE   0x6800             LDR      R0,[R0, #+0]
   \   000001D0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001D4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001D6   0x6008             STR      R0,[R1, #+0]
     99                    PORT_PCR_REG(PORTB_BASE_PTR, ch-AD10+4) =  PORT_PCR_MUX(0);
   \   000001D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001DA   0x00A0             LSLS     R0,R4,#+2
   \   000001DC   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001E0   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0xF840 0x1C18      STR      R1,[R0, #-24]
    100                    break;
   \   000001EA   0xE00C             B.N      ??adc_init_20
    101                case AD17:  //ADC1_SE17 -- PTA17
    102                    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \                     ??adc_init_18:
   \   000001EC   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001EE   0x6800             LDR      R0,[R0, #+0]
   \   000001F0   0xF44F 0x7100      MOV      R1,#+512
   \   000001F4   0x4308             ORRS     R0,R1,R0
   \   000001F6   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001F8   0x6008             STR      R0,[R1, #+0]
    103                    PORT_PCR_REG(PORTA_BASE_PTR, ch) =  PORT_PCR_MUX(0);
   \   000001FA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001FC   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40049000
   \   000001FE   0x2100             MOVS     R1,#+0
   \   00000200   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    104                    break;
   \   00000204   0xE7FF             B.N      ??adc_init_20
    105                default:
    106                    break;
    107                }
    108                break;
   \                     ??adc_init_19:
   \                     ??adc_init_20:
   \   00000206   0xE7FF             B.N      ??adc_init_21
    109            default:
    110                break;
    111            }
    112          }
   \                     ??adc_init_5:
   \                     ??adc_init_21:
   \                     ??adc_init_13:
   \   00000208   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    113          
    114          
    115          /*************************************************************************
    116          *                             野火嵌入式开发工作室
    117          *
    118          *  函数名称：ad_once
    119          *  功能说明：采集一次一路模拟量的AD值
    120          *  参数说明：ADCn        模块号（ ADC0、 ADC1）
    121          *            ADC_Channel 通道号
    122          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    123          *  函数返回：无符号结果值
    124          *  修改时间：2012-2-10
    125          *  备    注：参考苏州大学的例程，B通道不能软件触发！！！！
    126          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          u16 ad_once(ADCn adcn,ADC_Ch ch,ADC_nbit bit)  //采集某路模拟量的AD值
    128          {
   \                     ad_once:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    129              u16 result = 0;
   \   00000008   0x2000             MOVS     R0,#+0
    130              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD104             BNE.N    ??ad_once_0
   \   00000010   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x280B             CMP      R0,#+11
   \   00000018   0xD30A             BCC.N    ??ad_once_1
   \                     ??ad_once_0:
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD103             BNE.N    ??ad_once_2
   \   00000020   0x1F28             SUBS     R0,R5,#+4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xD303             BCC.N    ??ad_once_1
   \                     ??ad_once_2:
   \   00000028   0x2182             MOVS     R1,#+130
   \   0000002A   0x....             LDR.N    R0,??DataTable5
   \   0000002C   0x.... 0x....      BL       assert_failed
    131          
    132              adc_start(adcn, ch, bit);	  //启动ADC转换
   \                     ??ad_once_1:
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       adc_start
    133          
    134              while (( ADC_SC1_REG(ADCx[adcn], A ) & ADC_SC1_COCO_MASK ) != ADC_SC1_COCO_MASK);
   \                     ??ad_once_3:
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x....             LDR.N    R0,??DataTable5_6
   \   00000044   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x0600             LSLS     R0,R0,#+24
   \   0000004C   0xD5F8             BPL.N    ??ad_once_3
    135              result = ADC_R_REG(ADCx[adcn],A);
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x....             LDR.N    R0,??DataTable5_6
   \   00000052   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000056   0x6900             LDR      R0,[R0, #+16]
    136              ADC_SC1_REG(ADCx[adcn],A) &= ~ADC_SC1_COCO_MASK;
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x....             LDR.N    R1,??DataTable5_6
   \   0000005C   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF031 0x0180      BICS     R1,R1,#0x80
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x....             LDR.N    R2,??DataTable5_6
   \   0000006A   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000006E   0x6011             STR      R1,[R2, #+0]
    137              return result;
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
    138          }
    139          
    140          /*************************************************************************
    141          *                             野火嵌入式开发工作室
    142          *
    143          *  函数名称：ad_mid
    144          *  功能说明：采集三次一路模拟量的AD值，返回 中值
    145          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    146          *            ADC_Channel 通道号
    147          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    148          *  函数返回：无符号结果值
    149          *  修改时间：2012-2-10
    150          *  备    注：修改苏州大学的例程
    151          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          u16 ad_mid(ADCn adcn,ADC_Ch ch,ADC_nbit bit)
    153          {
   \                     ad_mid:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    154              u16 i,j,k,tmp;
    155              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD104             BNE.N    ??ad_mid_0
   \   00000010   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x280B             CMP      R0,#+11
   \   00000018   0xD30A             BCC.N    ??ad_mid_1
   \                     ??ad_mid_0:
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD103             BNE.N    ??ad_mid_2
   \   00000020   0x1F28             SUBS     R0,R5,#+4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xD303             BCC.N    ??ad_mid_1
   \                     ??ad_mid_2:
   \   00000028   0x219B             MOVS     R1,#+155
   \   0000002A   0x....             LDR.N    R0,??DataTable5
   \   0000002C   0x.... 0x....      BL       assert_failed
    156          
    157              //3次ADC转换
    158              i = ad_once(adcn,ch,bit);
   \                     ??ad_mid_1:
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       ad_once
   \   00000040   0x0007             MOVS     R7,R0
    159              j = ad_once(adcn,ch,bit);
   \   00000042   0x0032             MOVS     R2,R6
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       ad_once
   \   00000052   0x4680             MOV      R8,R0
    160              k = ad_once(adcn,ch,bit);
   \   00000054   0x0032             MOVS     R2,R6
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0x0029             MOVS     R1,R5
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       ad_once
    161          
    162              //取中值
    163              tmp = i>j ? i:j;              //tmp取两者最大值
   \   00000064   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000068   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006A   0x45B8             CMP      R8,R7
   \   0000006C   0xD201             BCS.N    ??ad_mid_3
   \   0000006E   0x46B8             MOV      R8,R7
   \   00000070   0xE7FF             B.N      ??ad_mid_4
    164              return k > tmp ?    tmp :  (   k>i  ?    k   :     i  );
   \                     ??ad_mid_3:
   \                     ??ad_mid_4:
   \   00000072   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0x4580             CMP      R8,R0
   \   0000007A   0xD201             BCS.N    ??ad_mid_5
   \   0000007C   0x4647             MOV      R7,R8
   \   0000007E   0xE005             B.N      ??ad_mid_6
   \                     ??ad_mid_5:
   \   00000080   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x4287             CMP      R7,R0
   \   00000086   0xD201             BCS.N    ??ad_mid_7
   \   00000088   0x0007             MOVS     R7,R0
   \   0000008A   0xE7FF             B.N      ??ad_mid_8
   \                     ??ad_mid_7:
   \                     ??ad_mid_8:
   \                     ??ad_mid_6:
   \   0000008C   0x0038             MOVS     R0,R7
   \   0000008E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000090   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    165              //                k>tmp>i             tmp>k>i   tmp>i>k
    166          }
    167          
    168          /*************************************************************************
    169          *                             野火嵌入式开发工作室
    170          *
    171          *  函数名称：ad_ave
    172          *  功能说明：多次采样，取平均值
    173          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    174          *            ADC_Channel 通道号
    175          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    176          *            N           均值滤波次数(范围:0~255)
    177          *  函数返回：16位无符号结果值
    178          *  修改时间：2012-2-10
    179          *  备    注：修改苏州大学的例程
    180          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          u16 ad_ave(ADCn adcn,ADC_Ch ch,ADC_nbit bit,u8 N) //均值滤波
    182          {
   \                     ad_ave:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    183              u32 tmp = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    184              u8  i;
    185              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD104             BNE.N    ??ad_ave_0
   \   00000016   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x280B             CMP      R0,#+11
   \   0000001E   0xD30A             BCC.N    ??ad_ave_1
   \                     ??ad_ave_0:
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C01             CMP      R4,#+1
   \   00000024   0xD103             BNE.N    ??ad_ave_2
   \   00000026   0x1F28             SUBS     R0,R5,#+4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x280E             CMP      R0,#+14
   \   0000002C   0xD303             BCC.N    ??ad_ave_1
   \                     ??ad_ave_2:
   \   0000002E   0x21B9             MOVS     R1,#+185
   \   00000030   0x....             LDR.N    R0,??DataTable5
   \   00000032   0x.... 0x....      BL       assert_failed
    186          
    187              for(i = 0; i < N; i++)
   \                     ??ad_ave_1:
   \   00000036   0xF05F 0x0900      MOVS     R9,#+0
   \   0000003A   0xE00B             B.N      ??ad_ave_3
    188                  tmp += ad_once(adcn,ch,bit);
   \                     ??ad_ave_4:
   \   0000003C   0x0032             MOVS     R2,R6
   \   0000003E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       ad_once
   \   0000004C   0xFA18 0xF880      UXTAH    R8,R8,R0
   \   00000050   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??ad_ave_3:
   \   00000054   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x45B9             CMP      R9,R7
   \   0000005C   0xD3EE             BCC.N    ??ad_ave_4
    189              tmp = tmp / N;
   \   0000005E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000060   0xFBB8 0xF8F7      UDIV     R8,R8,R7
    190              return (u16)tmp;
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    191          }
    192          
    193          /*************************************************************************
    194          *                             野火嵌入式开发工作室
    195          *
    196          *  函数名称：adc_start
    197          *  功能说明：启动adc软件采样，B通道不能用于软件触发！！！！
    198          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    199          *            ADC_Channel 通道号
    200          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    201          *  函数返回：无
    202          *  修改时间：2012-2-10
    203          *  备    注：修改苏州大学的例程
    204          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    205          void adc_start(ADCn adcn,ADC_Ch ch,ADC_nbit bit)
    206          {
   \                     adc_start:
   \   00000000   0xB580             PUSH     {R7,LR}
    207          
    208              Master_Adc_Config.STATUS1A = AIEN_ON | DIFF_SINGLE | ADC_SC1_ADCH( ch );
   \   00000002   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000006   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000000A   0x....             LDR.N    R3,??DataTable5_7
   \   0000000C   0x7219             STRB     R1,[R3, #+8]
    209          
    210              //初始化ADC默认配置
    211              Master_Adc_Config.CONFIG1  = ADLPC_NORMAL
    212                                           | ADC_CFG1_ADIV(ADIV_4)
    213                                           | ADLSMP_LONG
    214                                           | ADC_CFG1_MODE(bit)
    215                                           | ADC_CFG1_ADICLK(ADICLK_BUS);
   \   0000000E   0x0091             LSLS     R1,R2,#+2
   \   00000010   0xF011 0x010C      ANDS     R1,R1,#0xC
   \   00000014   0xF051 0x0150      ORRS     R1,R1,#0x50
   \   00000018   0x....             LDR.N    R2,??DataTable5_7
   \   0000001A   0x7011             STRB     R1,[R2, #+0]
    216              Master_Adc_Config.CONFIG2  = MUXSEL_ADCA    //MUXSEL_ADCA
    217                                           | ADACKEN_DISABLED
    218                                           | ADHSC_HISPEED
    219                                           | ADC_CFG2_ADLSTS(ADLSTS_20) ;
   \   0000001C   0x....             LDR.N    R1,??DataTable5_7
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x704A             STRB     R2,[R1, #+1]
    220          
    221              Master_Adc_Config.COMPARE1 = 0x1234u ;                 //任意值
   \   00000022   0x....             LDR.N    R1,??DataTable5_7
   \   00000024   0xF241 0x2234      MOVW     R2,#+4660
   \   00000028   0x804A             STRH     R2,[R1, #+2]
    222              Master_Adc_Config.COMPARE2 = 0x5678u ;                 //任意值
   \   0000002A   0x....             LDR.N    R1,??DataTable5_7
   \   0000002C   0xF245 0x6278      MOVW     R2,#+22136
   \   00000030   0x808A             STRH     R2,[R1, #+4]
    223          
    224              adc_config_alt(ADCx[adcn], &Master_Adc_Config);       // 配置 ADCn
   \   00000032   0x....             LDR.N    R1,??DataTable5_7
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x....             LDR.N    R2,??DataTable5_6
   \   00000038   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000003C   0x.... 0x....      BL       adc_config_alt
    225          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    226          
    227          /*************************************************************************
    228          *                             野火嵌入式开发工作室
    229          *
    230          *  函数名称：adc_stop
    231          *  功能说明：停止ADC转换
    232          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    233          *            ADC_Channel 通道号
    234          *  函数返回：无
    235          *  修改时间：2012-2-10
    236          *  备    注：修改苏州大学的例程
    237          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          void adc_stop(ADCn adcn)
    239          {
   \                     adc_stop:
   \   00000000   0xB580             PUSH     {R7,LR}
    240              Master_Adc_Config.STATUS1A = AIEN_ON | DIFF_SINGLE | ADC_SC1_ADCH(Module_disabled);
   \   00000002   0x....             LDR.N    R1,??DataTable5_7
   \   00000004   0x225F             MOVS     R2,#+95
   \   00000006   0x720A             STRB     R2,[R1, #+8]
    241              adc_config_alt(ADCx[adcn], &Master_Adc_Config);  // 配置ADC0
   \   00000008   0x....             LDR.N    R1,??DataTable5_7
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x....             LDR.N    R2,??DataTable5_6
   \   0000000E   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000012   0x.... 0x....      BL       adc_config_alt
    242          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    243          
    244          
    245          /*************************************************************************
    246          *                             野火嵌入式开发工作室
    247          *
    248          *  函数名称：adc_config_alt
    249          *  功能说明：将adc寄存器结构体配置进adc寄存器
    250          *  参数说明：adcmap      adc基址寄存器地址（ADC0_BASE_PTR,ADC1_BASE_PTR）
    251          *            ADC_CfgPtr  存放 寄存器值的结构体
    252          *  函数返回：无
    253          *  修改时间：2012-2-10
    254          *  备    注：修改官方工程的例程
    255          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          void adc_config_alt(ADC_MemMapPtr adcmap, tADC_ConfigPtr ADC_CfgPtr)
    257          {
    258              ADC_CFG1_REG(adcmap) = ADC_CfgPtr->CONFIG1;
   \                     adc_config_alt:
   \   00000000   0x780A             LDRB     R2,[R1, #+0]
   \   00000002   0x6082             STR      R2,[R0, #+8]
    259              ADC_CFG2_REG(adcmap) = ADC_CfgPtr->CONFIG2;
   \   00000004   0x784A             LDRB     R2,[R1, #+1]
   \   00000006   0x60C2             STR      R2,[R0, #+12]
    260              ADC_CV1_REG(adcmap)  = ADC_CfgPtr->COMPARE1;
   \   00000008   0x884A             LDRH     R2,[R1, #+2]
   \   0000000A   0x6182             STR      R2,[R0, #+24]
    261              ADC_CV2_REG(adcmap)  = ADC_CfgPtr->COMPARE2;
   \   0000000C   0x888A             LDRH     R2,[R1, #+4]
   \   0000000E   0x61C2             STR      R2,[R0, #+28]
    262              ADC_SC2_REG(adcmap)  = ADC_CfgPtr->STATUS2;
   \   00000010   0x798A             LDRB     R2,[R1, #+6]
   \   00000012   0x6202             STR      R2,[R0, #+32]
    263              ADC_SC3_REG(adcmap)  = ADC_CfgPtr->STATUS3;
   \   00000014   0x79CA             LDRB     R2,[R1, #+7]
   \   00000016   0x6242             STR      R2,[R0, #+36]
    264              ADC_PGA_REG(adcmap)  = ADC_CfgPtr->PGA;
   \   00000018   0x68CA             LDR      R2,[R1, #+12]
   \   0000001A   0x6502             STR      R2,[R0, #+80]
    265              ADC_SC1_REG(adcmap,A)= ADC_CfgPtr->STATUS1A;
   \   0000001C   0x7A0A             LDRB     R2,[R1, #+8]
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    266              ADC_SC1_REG(adcmap,B)= ADC_CfgPtr->STATUS1B;
   \   00000020   0x7A49             LDRB     R1,[R1, #+9]
   \   00000022   0x6041             STR      R1,[R0, #+4]
    267          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\workspace\\\\myworksp...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40048018         DC32     0x40048018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ADCx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     Master_Adc_Config

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\workspace\\\\myworksp...">`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 77H, 6FH, 72H, 6BH, 73H
   \              0x5C 0x77    
   \              0x6F 0x72    
   \              0x6B 0x73    
   \   00000008   0x70 0x61          DC8 70H, 61H, 63H, 65H, 5CH, 6DH, 79H, 77H
   \              0x63 0x65    
   \              0x5C 0x6D    
   \              0x79 0x77    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000018   0x5C 0x53          DC8 5CH, 53H, 57H, 5FH, 4BH, 36H, 30H, 5CH
   \              0x57 0x5F    
   \              0x4B 0x36    
   \              0x30 0x5C    
   \   00000020   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 64H, 72H, 69H, 76H
   \              0x63 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \   00000028   0x65 0x72          DC8 65H, 72H, 73H, 5CH, 61H, 64H, 63H, 5CH
   \              0x73 0x5C    
   \              0x61 0x64    
   \              0x63 0x5C    
   \   00000030   0x61 0x64          DC8 61H, 64H, 63H, 2EH, 63H, 0
   \              0x63 0x2E    
   \              0x63 0x00    
   \   00000036   0x00 0x00          DC8 0, 0
    268          
    269          
    270          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  ad_ave
             32 -> ad_once
             32 -> assert_failed
       24  ad_mid
             24 -> ad_once
             24 -> assert_failed
       16  ad_once
             16 -> adc_start
             16 -> assert_failed
        0  adc_config_alt
       16  adc_init
             16 -> assert_failed
        8  adc_start
              8 -> adc_config_alt
        8  adc_stop
              8 -> adc_config_alt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Constant "D:\\workspace\\myworksp...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       8  ADCx
      16  Master_Adc_Config
     108  ad_ave
     148  ad_mid
     116  ad_once
      38  adc_config_alt
     522  adc_init
      66  adc_start
      24  adc_stop

 
    16 bytes in section .bss
     8 bytes in section .data
    56 bytes in section .rodata
 1 054 bytes in section .text
 
 1 054 bytes of CODE  memory
    56 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
