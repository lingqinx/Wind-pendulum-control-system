###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:47:27 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\FTM\FTM.c                              #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\FTM\FTM.c -lCN                         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\SX_demo\..\ -I                     #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\common\ -I                 #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\cpu\ -I                    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ -I                #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\gpio\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\wdog\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\mcg\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\uart\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\lptmr\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\LED\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\fun\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\FTM\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\pit\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\DIPswitch\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\steer\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ccd\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\dma\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\motor\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\platforms\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\SX_demo\ -Ol      #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\FTM.lst                   #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\FTM.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\drivers\FTM\FTM.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[FTM.c] 
      5          * 描  述 ：FTM定时器
      6          * 原创   ：野火嵌入式开发工作室
      7          *设计改进：snowwolf
      8          *  Email ：snowwolf2012@qq.com
      9          *最后更新：2012-04-03
     10          * 说  明 ：本模块包含：FTM计时，PWM波，输出比较，输入捕捉，正交解码，
     11                      测速等功能
     12          ***********************************************************************
     13          */
     14          #include "common.h"
     15          #include  "FTM.h"
     16          
     17          
     18          /*********** FTMn_CHn PWM输出初始化函数 ***********/
     19          /*
     20          引脚配置见 driver_cfg.h
     21          */

   \                                 In section .data, align 4
     22          volatile struct FTM_MemMap *FTMx[3]={FTM0_BASE_PTR,FTM1_BASE_PTR,FTM2_BASE_PTR}; 
   \                     FTMx:
   \   00000000   0x40038000         DC32 40038000H, 40039000H, 400B8000H
   \              0x40039000   
   \              0x400B8000   
     23          //定义三个指针数组保存 FTMn 的地址
     24          
     25          
     26          /*************************************************************************
     27          *  函数名称：FTM_init
     28          *  功能说明：设置FTM的时钟中断频率
     29          *  参数说明：FTMn        模块号（FTM0、  FTM1、  FTM2）
     30          *            freq        中断频率（单位为Hz）
     31          *  函数返回：无
     32          *  修改时间：2012-2-14
     33          *  备    注：同一个FTM，频率是一样的，共3个FTM，即可以输出3个不同频率
     34                       在48Mbus下 最低6Hz ps = 128分频  mod = 65535 
     35                                  最高24M 这时mod = 1;            
     36          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     37          void FTM_init(FTMn ftmn,u32 freq)                   //设置FTM的频率
     38          {
   \                     FTM_init:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     39              u32 clk_hz = (bus_clk_khz*1000);                //bus频率
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000012   0xFB01 0xF600      MUL      R6,R1,R0
     40              u32 mod;
     41              u8 sc_ps;
     42          
     43              ASSERT( ftmn==FTM0 ||ftmn==FTM1 || ftmn==FTM2 ); 
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD00A             BEQ.N    ??FTM_init_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C01             CMP      R4,#+1
   \   00000020   0xD007             BEQ.N    ??FTM_init_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C02             CMP      R4,#+2
   \   00000026   0xD004             BEQ.N    ??FTM_init_0
   \   00000028   0x212B             MOVS     R1,#+43
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000002E   0x.... 0x....      BL       assert_failed
     44              //用断言检测 频率 是否正常 ,频率必须小于时钟二分之一  >>7>>16 最大为总线/65535/128
     45              ASSERT_RST( (freq <= (clk_hz/2) && freq >(clk_hz>>23)),"FTM频率配置错误" );
   \                     ??FTM_init_0:
   \   00000032   0x0870             LSRS     R0,R6,#+1
   \   00000034   0x42A8             CMP      R0,R5
   \   00000036   0xD302             BCC.N    ??FTM_init_1
   \   00000038   0x0DF0             LSRS     R0,R6,#+23
   \   0000003A   0x42A8             CMP      R0,R5
   \   0000003C   0xD306             BCC.N    ??FTM_init_2
   \                     ??FTM_init_1:
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   00000042   0x212D             MOVS     R1,#+45
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000048   0x.... 0x....      BL       assert_failed_rst
     46          
     47              /*       计算频率设置        */
     48              mod= (clk_hz>>16 )/freq ;
   \                     ??FTM_init_2:
   \   0000004C   0x0C30             LSRS     R0,R6,#+16
   \   0000004E   0xFBB0 0xF8F5      UDIV     R8,R0,R5
     49              for(sc_ps=0;(mod>>sc_ps)>=1;sc_ps++);           //求sc_ps的最小值
   \   00000052   0x2700             MOVS     R7,#+0
   \   00000054   0xE000             B.N      ??FTM_init_3
   \                     ??FTM_init_4:
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
   \                     ??FTM_init_3:
   \   00000058   0xFA38 0xF007      LSRS     R0,R8,R7
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD1FA             BNE.N    ??FTM_init_4
     50              mod=(clk_hz>>sc_ps)/freq - 1;
   \   00000060   0xFA36 0xF007      LSRS     R0,R6,R7
   \   00000064   0xFBB0 0xF0F5      UDIV     R0,R0,R5
   \   00000068   0xF1B0 0x0801      SUBS     R8,R0,#+1
     51              
     52              ASSERT( sc_ps < 8);                             //用断言检测，保证ps最大为7        
   \   0000006C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006E   0x2F08             CMP      R7,#+8
   \   00000070   0xD304             BCC.N    ??FTM_init_5
   \   00000072   0x2134             MOVS     R1,#+52
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000078   0x.... 0x....      BL       assert_failed
     53          
     54              switch(ftmn)
   \                     ??FTM_init_5:
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0x2C00             CMP      R4,#+0
   \   00000080   0xD003             BEQ.N    ??FTM_init_6
   \   00000082   0x2C02             CMP      R4,#+2
   \   00000084   0xD013             BEQ.N    ??FTM_init_7
   \   00000086   0xD309             BCC.N    ??FTM_init_8
   \   00000088   0xE01A             B.N      ??FTM_init_9
     55              {
     56              case FTM0:
     57                  SIM_SCGC6|=SIM_SCGC6_FTM0_MASK;             //使能FTM0时钟
   \                     ??FTM_init_6:
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000098   0x6008             STR      R0,[R1, #+0]
     58                  break;
   \   0000009A   0xE011             B.N      ??FTM_init_10
     59              case FTM1:
     60                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;            //使能FTM1时钟
   \                     ??FTM_init_8:
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   000000AA   0x6008             STR      R0,[R1, #+0]
     61                  break;
   \   000000AC   0xE008             B.N      ??FTM_init_10
     62              case FTM2:
     63                  SIM_SCGC3|=SIM_SCGC3_FTM2_MASK;            //使能FTM2时钟
   \                     ??FTM_init_7:
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x40048030
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40048030
   \   000000BC   0x6008             STR      R0,[R1, #+0]
     64                  break;
   \   000000BE   0xE7FF             B.N      ??FTM_init_10
     65              default:
     66                  break;
     67              }
     68                  
     69              FTM_CNT_REG(FTMx[ftmn])   =0;  
   \                     ??FTM_init_9:
   \                     ??FTM_init_10:
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000C6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x6041             STR      R1,[R0, #+4]
     70              FTM_MOD_REG(FTMx[ftmn])   = FTM_MOD_MOD(mod);  //Modulo value模数, EPWM的周期为 ：MOD - CNTIN + 0x0001
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000D4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000D8   0xFA1F 0xF188      UXTH     R1,R8            ;; ZeroExt  R1,R8,#+16,#+16
   \   000000DC   0x6081             STR      R1,[R0, #+8]
     71              FTM_CNTIN_REG(FTMx[ftmn]) =0;                  //Counter Initial Value 计数器初始化值
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000E4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x64C1             STR      R1,[R0, #+76]
     72              
     73              /******************** 配置时钟和分频 ********************/
     74              //SC  bit7:TOF Timer Overflow Flag
     75              FTM_SC_REG(FTMx[ftmn])   &= ~FTM_SC_TOF_MASK;
   \   000000EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000F2   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF030 0x0080      BICS     R0,R0,#0x80
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000102   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000106   0x6008             STR      R0,[R1, #+0]
     76              //bit5:CPWMS  0 FTM counter operates in up counting mode.
     77                          //1 FTM counter operates in up-down counting mode.
     78              FTM_SC_REG(FTMx[ftmn])   &= ~FTM_SC_CPWMS_MASK;
   \   00000108   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000010E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000118   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000011E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000122   0x6008             STR      R0,[R1, #+0]
     79              FTM_SC_REG(FTMx[ftmn])   |= (FTM_SC_PS(sc_ps) | FTM_SC_CLKS(1));  //没有使能溢出中断
   \   00000124   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000012A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000132   0xF017 0x0107      ANDS     R1,R7,#0x7
   \   00000136   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   0000013A   0x4308             ORRS     R0,R1,R0
   \   0000013C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000142   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000146   0x6008             STR      R0,[R1, #+0]
     80              //FTM_CnV_REG(FTMx[ftmn],ch)= 0;                // Channel (n) Value  。设置脉冲宽度：(CnV - CNTIN).
     81          }
   \   00000148   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     82          
     83          /*************************************************************************
     84          *  函数名称：FTM_PWM_init
     85          *  功能说明：初始化FTM的PWM功能并设置频率、占空比。设置通道输出占空比。
     86          *  参数说明：FTMn        模块号（FTM0、  FTM1、  FTM2）
     87          *            CHn         通道号（CH0~CH7）
     88          *            freq        频率（单位为Hz）
     89          *            duty        占空比
     90          *  函数返回：无
     91          *  修改时间：2012-2-14
     92          *  备    注：同一个FTM，各通道的PWM频率是一样的，共3个FTM，即可以输出3个不同频率PWM
     93          *             通道占空比,占空比为 （duty * 精度） % ，
     94          *             如果 FTM_PRECISON 定义为 1000 ，duty = 100 ，
     95          *             则占空比 100*0.1%=10%
     96          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     97          void FTM_PWM_init(FTMn ftmn,CHn ch,u32 freq,u32 duty)
     98          {      	
   \                     FTM_PWM_init:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     99              u32 clk_hz = (bus_clk_khz*1000);              //bus频率
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF44F 0x717A      MOV      R1,#+1000
   \   00000016   0xFB01 0xF800      MUL      R8,R1,R0
    100              u32 mod;
    101              u8 sc_ps;
    102              u32 cv;
    103          
    104              ASSERT( (ftmn==FTM0) || ( (ftmn==FTM1 || ftmn==FTM2 ) &&(ch<=CH1)) );   //检查传递进来的通道是否正确
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD00D             BEQ.N    ??FTM_PWM_init_0
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C01             CMP      R4,#+1
   \   00000024   0xD002             BEQ.N    ??FTM_PWM_init_1
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C02             CMP      R4,#+2
   \   0000002A   0xD102             BNE.N    ??FTM_PWM_init_2
   \                     ??FTM_PWM_init_1:
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D02             CMP      R5,#+2
   \   00000030   0xD304             BCC.N    ??FTM_PWM_init_0
   \                     ??FTM_PWM_init_2:
   \   00000032   0x2168             MOVS     R1,#+104
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000038   0x.... 0x....      BL       assert_failed
    105              
    106              //用断言检测 频率 是否正常 ,频率必须小于时钟二分之一  >>7>>16 最大为总线/65535/128
    107              ASSERT_RST( (freq <= (clk_hz/2) && freq >(clk_hz>>23)),"FTM频率配置错误" );
   \                     ??FTM_PWM_init_0:
   \   0000003C   0xEA5F 0x0058      LSRS     R0,R8,#+1
   \   00000040   0x42B0             CMP      R0,R6
   \   00000042   0xD303             BCC.N    ??FTM_PWM_init_3
   \   00000044   0xEA5F 0x50D8      LSRS     R0,R8,#+23
   \   00000048   0x42B0             CMP      R0,R6
   \   0000004A   0xD306             BCC.N    ??FTM_PWM_init_4
   \                     ??FTM_PWM_init_3:
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   00000050   0x216B             MOVS     R1,#+107
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000056   0x.... 0x....      BL       assert_failed_rst
    108              
    109              /*       计算频率设置        */
    110              mod= (clk_hz>>16 )/freq;
   \                     ??FTM_PWM_init_4:
   \   0000005A   0xEA5F 0x4018      LSRS     R0,R8,#+16
   \   0000005E   0xFBB0 0xF1F6      UDIV     R1,R0,R6
    111              for(sc_ps=0;(mod>>sc_ps)>=1;sc_ps++);         //求sc_ps的最小值
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xE000             B.N      ??FTM_PWM_init_5
   \                     ??FTM_PWM_init_6:
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \                     ??FTM_PWM_init_5:
   \   00000068   0xFA31 0xF200      LSRS     R2,R1,R0
   \   0000006C   0x2A00             CMP      R2,#+0
   \   0000006E   0xD1FA             BNE.N    ??FTM_PWM_init_6
    112              mod=(clk_hz>>sc_ps)/freq - 1;                 //求出分频后mod小于65535
   \   00000070   0xFA38 0xF100      LSRS     R1,R8,R0
   \   00000074   0xFBB1 0xF1F6      UDIV     R1,R1,R6
   \   00000078   0x1E49             SUBS     R1,R1,#+1
    113          
    114              cv = (duty*(mod-0+1))/FTM_PRECISON;           //EPWM的周期 ：MOD - CNTIN + 0x0001   (CNTIN 设为0)
   \   0000007A   0x1C4A             ADDS     R2,R1,#+1
   \   0000007C   0xFB02 0xF207      MUL      R2,R2,R7
   \   00000080   0xF242 0x7310      MOVW     R3,#+10000
   \   00000084   0xFBB2 0xF2F3      UDIV     R2,R2,R3
    115                                                            //脉冲宽度：CnV - CNTIN
    116                                                            //FTM_PRECISON 是精度
    117          
    118              /******************* 开启时钟 和 复用IO口*******************/
    119              //注，这里代码虽然长，但编译时会删掉很多没用的部分，不影响速度
    120              switch(ftmn)
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2C00             CMP      R4,#+0
   \   0000008C   0xD005             BEQ.N    ??FTM_PWM_init_7
   \   0000008E   0x2C02             CMP      R4,#+2
   \   00000090   0xF000 0x80B8      BEQ.W    ??FTM_PWM_init_8
   \   00000094   0xF0C0 0x8089      BCC.W    ??FTM_PWM_init_9
   \   00000098   0xE0DF             B.N      ??FTM_PWM_init_10
    121              {
    122              case FTM0:
    123                  SIM_SCGC6|=SIM_SCGC6_FTM0_MASK;                             //使能FTM0时钟
   \                     ??FTM_PWM_init_7:
   \   0000009A   0x.... 0x....      LDR.W    R3,??DataTable8_3  ;; 0x4004803c
   \   0000009E   0x681B             LDR      R3,[R3, #+0]
   \   000000A0   0xF053 0x7380      ORRS     R3,R3,#0x1000000
   \   000000A4   0x.... 0x....      LDR.W    R6,??DataTable8_3  ;; 0x4004803c
   \   000000A8   0x6033             STR      R3,[R6, #+0]
    124                  switch(ch)
   \   000000AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AC   0x2D00             CMP      R5,#+0
   \   000000AE   0xD00B             BEQ.N    ??FTM_PWM_init_11
   \   000000B0   0x2D02             CMP      R5,#+2
   \   000000B2   0xD025             BEQ.N    ??FTM_PWM_init_12
   \   000000B4   0xD316             BCC.N    ??FTM_PWM_init_13
   \   000000B6   0x2D04             CMP      R5,#+4
   \   000000B8   0xD03E             BEQ.N    ??FTM_PWM_init_14
   \   000000BA   0xD32F             BCC.N    ??FTM_PWM_init_15
   \   000000BC   0x2D06             CMP      R5,#+6
   \   000000BE   0xD057             BEQ.N    ??FTM_PWM_init_16
   \   000000C0   0xD348             BCC.N    ??FTM_PWM_init_17
   \   000000C2   0x2D07             CMP      R5,#+7
   \   000000C4   0xD062             BEQ.N    ??FTM_PWM_init_18
   \   000000C6   0xE06F             B.N      ??FTM_PWM_init_19
    125                  {
    126                  case CH0:
    127                      if(FTM0_CH0==PTC1)
    128                      {
    129                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
   \                     ??FTM_PWM_init_11:
   \   000000C8   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   000000CC   0x681B             LDR      R3,[R3, #+0]
   \   000000CE   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   000000D2   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   000000D6   0x6033             STR      R3,[R6, #+0]
    130                          PORT_PCR_REG(PORTC_BASE_PTR, 1) = PORT_PCR_MUX(4);  // PTC1
   \   000000D8   0x.... 0x....      LDR.W    R3,??DataTable8_7  ;; 0x4004b004
   \   000000DC   0xF44F 0x6680      MOV      R6,#+1024
   \   000000E0   0x601E             STR      R6,[R3, #+0]
    131                      }
    132                      /*不建议使用PTA3
    133                      else if(FTM0_CH0==PTA3)
    134                      {
    135                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    136                          PORT_PCR_REG(PORTA_BASE_PTR, 3) = PORT_PCR_MUX(3);  // PTA3
    137                      }
    138                      else
    139                      {
    140                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    141                      }
    142                      */
    143                      break;
    144          
    145                  case CH1:
    146                      if(FTM0_CH1==PTC2)
    147                      {
    148                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    149                          PORT_PCR_REG(PORTC_BASE_PTR, 2) = PORT_PCR_MUX(4);  // PTC2
    150                      }
    151                      else if(FTM0_CH1==PTA4)
    152                      {
    153                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    154                          PORT_PCR_REG(PORTA_BASE_PTR, 4) = PORT_PCR_MUX(3);  // PTA4
    155                      }
    156                      else
    157                      {
    158                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    159                      }
    160                      break;
    161          
    162                  case CH2:
    163                      if(FTM0_CH2==PTC3)
    164                      {
    165                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    166                          PORT_PCR_REG(PORTC_BASE_PTR, 3) = PORT_PCR_MUX(4);  // PTC3
    167                      }
    168                      else if(FTM0_CH2==PTA5)
    169                      {
    170                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    171                          PORT_PCR_REG(PORTA_BASE_PTR, 5) = PORT_PCR_MUX(3);  // PTA5
    172                      }
    173                      else
    174                      {
    175                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    176                      }
    177                      break;
    178          
    179                  case CH3:
    180                      if(FTM0_CH3==PTC4)
    181                      {
    182                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    183                          PORT_PCR_REG(PORTC_BASE_PTR, 4) = PORT_PCR_MUX(4);  // PTC4
    184                      }
    185          #if K60PIN == 144u
    186                      else if(FTM0_CH3==PTA6)
    187                      {
    188                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    189                          PORT_PCR_REG(PORTA_BASE_PTR, 6) = PORT_PCR_MUX(3);  // PTA6
    190                      }
    191          #endif
    192                      else
    193                      {
    194                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    195                      }
    196                      break;
    197          
    198                  case CH4:
    199                      if(FTM0_CH4==PTD4)
    200                      {
    201                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    202                          PORT_PCR_REG(PORTD_BASE_PTR, 4) = PORT_PCR_MUX(4);  // PTD4
    203                      }
    204          #if K60PIN == 144u
    205                      else if(FTM0_CH4==PTA7)
    206                      {
    207                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    208                          PORT_PCR_REG(PORTA_BASE_PTR, 7) = PORT_PCR_MUX(3);  // PTA7
    209                      }
    210          #endif
    211                      else
    212                      {
    213                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    214                      }
    215                      break;
    216          
    217                  case CH5:
    218                      if(FTM0_CH5==PTD5)
    219                      {
    220                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    221                          PORT_PCR_REG(PORTD_BASE_PTR, 5) = PORT_PCR_MUX(4);  // PTD5
    222                      }
    223                      /*不建议使用PTA0
    224                      else if(FTM0_CH5==PTA0)
    225                      {
    226                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    227                          PORT_PCR_REG(PORTA_BASE_PTR, 0) = PORT_PCR_MUX(3);  // PTA0
    228                      }
    229                      */
    230                      else
    231                      {
    232                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    233                      }
    234                      break;
    235          
    236                  case CH6:
    237                      if(FTM0_CH6==PTD6)
    238                      {
    239                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    240                          PORT_PCR_REG(PORTD_BASE_PTR, 6) = PORT_PCR_MUX(4);  // PTD6
    241                      }
    242                      /*不建议使用PTA1
    243                      else if(FTM0_CH6==PTA1)
    244                      {
    245                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    246                          PORT_PCR_REG(PORTA_BASE_PTR, 1) = PORT_PCR_MUX(3);  // PTA1
    247                      }
    248                      */
    249                      else
    250                      {
    251                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    252                      }
    253                      break;
    254          
    255                  case CH7:
    256                      if(FTM0_CH7==PTD7)
    257                      {
    258                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    259                          PORT_PCR_REG(PORTD_BASE_PTR, 7) = PORT_PCR_MUX(4);  // PTD7
    260                      }
    261                      /*不建议使用PTA2
    262                      else if(FTM0_CH7==PTA2)
    263                      {
    264                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    265                          PORT_PCR_REG(PORTA_BASE_PTR, 2) = PORT_PCR_MUX(3);  // PTA2
    266                      }
    267                      */
    268                      else
    269                      {
    270                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    271                      }
    272                      break;
    273                  default:
    274                      return;
    275                  }
    276                  break;
   \                     ??FTM_PWM_init_20:
   \   000000E2   0xE0BA             B.N      ??FTM_PWM_init_21
   \                     ??FTM_PWM_init_13:
   \   000000E4   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   000000E8   0x681B             LDR      R3,[R3, #+0]
   \   000000EA   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   000000EE   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   000000F2   0x6033             STR      R3,[R6, #+0]
   \   000000F4   0x.... 0x....      LDR.W    R3,??DataTable8_8  ;; 0x4004b008
   \   000000F8   0xF44F 0x6680      MOV      R6,#+1024
   \   000000FC   0x601E             STR      R6,[R3, #+0]
   \   000000FE   0xE7F0             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_12:
   \   00000100   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000104   0x681B             LDR      R3,[R3, #+0]
   \   00000106   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   0000010A   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000010E   0x6033             STR      R3,[R6, #+0]
   \   00000110   0x.... 0x....      LDR.W    R3,??DataTable8_9  ;; 0x4004b00c
   \   00000114   0xF44F 0x6680      MOV      R6,#+1024
   \   00000118   0x601E             STR      R6,[R3, #+0]
   \   0000011A   0xE7E2             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_15:
   \   0000011C   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000120   0x681B             LDR      R3,[R3, #+0]
   \   00000122   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   00000126   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000012A   0x6033             STR      R3,[R6, #+0]
   \   0000012C   0x.... 0x....      LDR.W    R3,??DataTable8_10  ;; 0x4004b010
   \   00000130   0xF44F 0x6680      MOV      R6,#+1024
   \   00000134   0x601E             STR      R6,[R3, #+0]
   \   00000136   0xE7D4             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_14:
   \   00000138   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   0000013C   0x681B             LDR      R3,[R3, #+0]
   \   0000013E   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   00000142   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   00000146   0x6033             STR      R3,[R6, #+0]
   \   00000148   0x.... 0x....      LDR.W    R3,??DataTable8_11  ;; 0x4004c010
   \   0000014C   0xF44F 0x6680      MOV      R6,#+1024
   \   00000150   0x601E             STR      R6,[R3, #+0]
   \   00000152   0xE7C6             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_17:
   \   00000154   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000158   0x681B             LDR      R3,[R3, #+0]
   \   0000015A   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   0000015E   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   00000162   0x6033             STR      R3,[R6, #+0]
   \   00000164   0x.... 0x....      LDR.W    R3,??DataTable8_12  ;; 0x4004c014
   \   00000168   0xF44F 0x6680      MOV      R6,#+1024
   \   0000016C   0x601E             STR      R6,[R3, #+0]
   \   0000016E   0xE7B8             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_16:
   \   00000170   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000174   0x681B             LDR      R3,[R3, #+0]
   \   00000176   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   0000017A   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000017E   0x6033             STR      R3,[R6, #+0]
   \   00000180   0x.... 0x....      LDR.W    R3,??DataTable8_13  ;; 0x4004c018
   \   00000184   0xF44F 0x6680      MOV      R6,#+1024
   \   00000188   0x601E             STR      R6,[R3, #+0]
   \   0000018A   0xE7AA             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_18:
   \   0000018C   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000190   0x681B             LDR      R3,[R3, #+0]
   \   00000192   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   00000196   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000019A   0x6033             STR      R3,[R6, #+0]
   \   0000019C   0x.... 0x....      LDR.W    R3,??DataTable8_14  ;; 0x4004c01c
   \   000001A0   0xF44F 0x6680      MOV      R6,#+1024
   \   000001A4   0x601E             STR      R6,[R3, #+0]
   \   000001A6   0xE79C             B.N      ??FTM_PWM_init_20
   \                     ??FTM_PWM_init_19:
   \   000001A8   0xE0B4             B.N      ??FTM_PWM_init_22
    277          
    278            case FTM1:
    279                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;                             //使能FTM1时钟
   \                     ??FTM_PWM_init_9:
   \   000001AA   0x.... 0x....      LDR.W    R3,??DataTable8_3  ;; 0x4004803c
   \   000001AE   0x681B             LDR      R3,[R3, #+0]
   \   000001B0   0xF053 0x7300      ORRS     R3,R3,#0x2000000
   \   000001B4   0x.... 0x....      LDR.W    R6,??DataTable8_3  ;; 0x4004803c
   \   000001B8   0x6033             STR      R3,[R6, #+0]
    280                  switch(ch)
   \   000001BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001BC   0x2D00             CMP      R5,#+0
   \   000001BE   0xD002             BEQ.N    ??FTM_PWM_init_23
   \   000001C0   0x2D01             CMP      R5,#+1
   \   000001C2   0xD00F             BEQ.N    ??FTM_PWM_init_24
   \   000001C4   0xE01D             B.N      ??FTM_PWM_init_25
    281                  {
    282                  case CH0:
    283          #if K60PIN == 144u
    284                      if(FTM1_CH0==PTA8)
    285                      {
    286                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    287                          PORT_PCR_REG(PORTA_BASE_PTR, 8) = PORT_PCR_MUX(3);  // PTA8
    288                      }
    289                      else 
    290          #endif            
    291                      if(FTM1_CH0==PTA12)
    292                      {
    293                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \                     ??FTM_PWM_init_23:
   \   000001C6   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   000001CA   0x681B             LDR      R3,[R3, #+0]
   \   000001CC   0xF44F 0x7600      MOV      R6,#+512
   \   000001D0   0x4333             ORRS     R3,R6,R3
   \   000001D2   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   000001D6   0x6033             STR      R3,[R6, #+0]
    294                          PORT_PCR_REG(PORTA_BASE_PTR, 12) = PORT_PCR_MUX(3);  // PTA12
   \   000001D8   0x.... 0x....      LDR.W    R3,??DataTable8_15  ;; 0x40049030
   \   000001DC   0xF44F 0x7640      MOV      R6,#+768
   \   000001E0   0x601E             STR      R6,[R3, #+0]
    295                      }
    296                      else if(FTM1_CH0==PTB0)
    297                      {
    298                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    299                          PORT_PCR_REG(PORTB_BASE_PTR, 0) = PORT_PCR_MUX(3);  // PTB0
    300                      }
    301                      else
    302                      {
    303                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    304                      }
    305                      break;
    306          
    307          
    308                  case CH1:
    309          #if K60PIN == 144u
    310                      if(FTM1_CH1==PTA9)
    311                      {
    312                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    313                          PORT_PCR_REG(PORTA_BASE_PTR, 9) = PORT_PCR_MUX(3);  // PTA9
    314                      }
    315                      else 
    316          #endif  
    317                      if(FTM1_CH1==PTA13)
    318                      {
    319                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    320                          PORT_PCR_REG(PORTA_BASE_PTR, 13) = PORT_PCR_MUX(3);  // PTA13
    321                      }
    322                      else if(FTM1_CH1==PTB1)
    323                      {
    324                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    325                          PORT_PCR_REG(PORTB_BASE_PTR, 1) = PORT_PCR_MUX(3);  // PTB1
    326                      }
    327                      else
    328                      {
    329                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    330                      }
    331                      break;
    332          
    333                  default:
    334                      return;
    335                  }
    336                  break;
   \                     ??FTM_PWM_init_26:
   \   000001E2   0xE03A             B.N      ??FTM_PWM_init_21
   \                     ??FTM_PWM_init_24:
   \   000001E4   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   000001E8   0x681B             LDR      R3,[R3, #+0]
   \   000001EA   0xF44F 0x7600      MOV      R6,#+512
   \   000001EE   0x4333             ORRS     R3,R6,R3
   \   000001F0   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   000001F4   0x6033             STR      R3,[R6, #+0]
   \   000001F6   0x.... 0x....      LDR.W    R3,??DataTable8_16  ;; 0x40049034
   \   000001FA   0xF44F 0x7640      MOV      R6,#+768
   \   000001FE   0x601E             STR      R6,[R3, #+0]
   \   00000200   0xE7EF             B.N      ??FTM_PWM_init_26
   \                     ??FTM_PWM_init_25:
   \   00000202   0xE087             B.N      ??FTM_PWM_init_22
    337            case FTM2:
    338                  SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                           //使能FTM2时钟
   \                     ??FTM_PWM_init_8:
   \   00000204   0x.... 0x....      LDR.W    R3,??DataTable8_4  ;; 0x40048030
   \   00000208   0x681B             LDR      R3,[R3, #+0]
   \   0000020A   0xF053 0x7380      ORRS     R3,R3,#0x1000000
   \   0000020E   0x.... 0x....      LDR.W    R6,??DataTable8_4  ;; 0x40048030
   \   00000212   0x6033             STR      R3,[R6, #+0]
    339                  switch(ch)
   \   00000214   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000216   0x2D00             CMP      R5,#+0
   \   00000218   0xD002             BEQ.N    ??FTM_PWM_init_27
   \   0000021A   0x2D01             CMP      R5,#+1
   \   0000021C   0xD00E             BEQ.N    ??FTM_PWM_init_28
   \   0000021E   0xE01B             B.N      ??FTM_PWM_init_29
    340                  {
    341                  case CH0:
    342          #if K60PIN == 144u
    343                      if(FTM2_CH0==PTA10)
    344                      {
    345                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    346                          PORT_PCR_REG(PORTA_BASE_PTR, 10) = PORT_PCR_MUX(3);  // PTA10
    347                      }
    348                      else 
    349          #endif            
    350                      if(FTM2_CH0==PTB18)
    351                      {
    352                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??FTM_PWM_init_27:
   \   00000220   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000224   0x681B             LDR      R3,[R3, #+0]
   \   00000226   0xF453 0x6380      ORRS     R3,R3,#0x400
   \   0000022A   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000022E   0x6033             STR      R3,[R6, #+0]
    353                          PORT_PCR_REG(PORTB_BASE_PTR, 18) = PORT_PCR_MUX(3);  // PTB18
   \   00000230   0x.... 0x....      LDR.W    R3,??DataTable8_17  ;; 0x4004a048
   \   00000234   0xF44F 0x7640      MOV      R6,#+768
   \   00000238   0x601E             STR      R6,[R3, #+0]
    354                      }
    355                      else
    356                      {
    357                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    358                      }
    359                      break;
    360          
    361                  case CH1:
    362          #if K60PIN == 144u
    363                      if(FTM2_CH1==PTA11)
    364                      {
    365                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    366                          PORT_PCR_REG(PORTA_BASE_PTR, 11) = PORT_PCR_MUX(3);  // PTA11
    367                      }
    368                      else 
    369          #endif             
    370                      if(FTM2_CH1==PTB19)
    371                      {
    372                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    373                          PORT_PCR_REG(PORTB_BASE_PTR, 19) = PORT_PCR_MUX(3);  // PTB19
    374                      }
    375                      else
    376                      {
    377                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    378                      }
    379                      break;
    380          
    381                  default:
    382                      return;
    383                  }
    384                  break;
   \                     ??FTM_PWM_init_30:
   \   0000023A   0xE00E             B.N      ??FTM_PWM_init_21
   \                     ??FTM_PWM_init_28:
   \   0000023C   0x.... 0x....      LDR.W    R3,??DataTable8_6  ;; 0x40048038
   \   00000240   0x681B             LDR      R3,[R3, #+0]
   \   00000242   0xF453 0x6380      ORRS     R3,R3,#0x400
   \   00000246   0x.... 0x....      LDR.W    R6,??DataTable8_6  ;; 0x40048038
   \   0000024A   0x6033             STR      R3,[R6, #+0]
   \   0000024C   0x.... 0x....      LDR.W    R3,??DataTable8_18  ;; 0x4004a04c
   \   00000250   0xF44F 0x7640      MOV      R6,#+768
   \   00000254   0x601E             STR      R6,[R3, #+0]
   \   00000256   0xE7F0             B.N      ??FTM_PWM_init_30
   \                     ??FTM_PWM_init_29:
   \   00000258   0xE05C             B.N      ??FTM_PWM_init_22
    385            default:
    386                  break;
    387              }
    388              /******************** 选择输出模式为 边沿对齐PWM *******************/
    389              //通道状态控制，根据模式来选择 边沿或电平
    390              FTM_CnSC_REG(FTMx[ftmn],ch) &= ~FTM_CnSC_ELSA_MASK;
   \                     ??FTM_PWM_init_10:
   \                     ??FTM_PWM_init_21:
   \   0000025A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000025C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000025E   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   00000262   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   00000266   0xEB13 0x03C5      ADDS     R3,R3,R5, LSL #+3
   \   0000026A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000026C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000026E   0x.... 0x....      LDR.W    R6,??DataTable8_5
   \   00000272   0xF856 0x6024      LDR      R6,[R6, R4, LSL #+2]
   \   00000276   0xEB16 0x06C5      ADDS     R6,R6,R5, LSL #+3
   \   0000027A   0x68F6             LDR      R6,[R6, #+12]
   \   0000027C   0xF036 0x0604      BICS     R6,R6,#0x4
   \   00000280   0x60DE             STR      R6,[R3, #+12]
    391              FTM_CnSC_REG(FTMx[ftmn],ch) = FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;
   \   00000282   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000284   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000286   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   0000028A   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000028E   0xEB13 0x03C5      ADDS     R3,R3,R5, LSL #+3
   \   00000292   0x2628             MOVS     R6,#+40
   \   00000294   0x60DE             STR      R6,[R3, #+12]
    392              //MSnB:MSnA = 1x
    393              // ELSnB:ELSnA = 10   High-true pulses  (clear Output on match)
    394              // ELSnB:ELSnA = 11   Low-true pulses   (set Output on match)
    395              // Edge-aligned PWM  边沿对齐PWM波   《k16 reference manual.pdf》  P944  或者  《K60P144M100SF2RM.pdf》P1001
    396          
    397              FTM_CNT_REG(FTMx[ftmn])   = 0;     
   \   00000296   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000298   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   0000029C   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   000002A0   0x2600             MOVS     R6,#+0
   \   000002A2   0x605E             STR      R6,[R3, #+4]
    398              FTM_MOD_REG(FTMx[ftmn])   = FTM_MOD_MOD(mod);                                                     //Modulo value模数, EPWM的周期为 ：MOD - CNTIN + 0x0001
   \   000002A4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A6   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   000002AA   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   000002AE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002B0   0x6099             STR      R1,[R3, #+8]
    399              FTM_CNTIN_REG(FTMx[ftmn]) = 0;                                                       //Counter Initial Value 计数器初始化值
   \   000002B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B4   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000002B8   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002BC   0x2300             MOVS     R3,#+0
   \   000002BE   0x64CB             STR      R3,[R1, #+76]
    400              FTM_CnV_REG(FTMx[ftmn],ch)= FTM_CnV_VAL(cv);                                                      // Channel (n) Value  。设置脉冲宽度：(CnV - CNTIN).
   \   000002C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000002C8   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002CC   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   000002D0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002D2   0x610A             STR      R2,[R1, #+16]
    401           
    402              /******************** 配置时钟和分频 ********************/
    403              FTM_SC_REG(FTMx[ftmn])   |= (FTM_SC_PS(sc_ps) | FTM_SC_CLKS(1));  //没有使能溢出中断
   \   000002D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002D6   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000002DA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002DE   0x6809             LDR      R1,[R1, #+0]
   \   000002E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002E2   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000002E6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000002EA   0x4308             ORRS     R0,R0,R1
   \   000002EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002EE   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000002F2   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002F6   0x6008             STR      R0,[R1, #+0]
    404              FTM_SC_REG(FTMx[ftmn])   &= ~FTM_SC_CPWMS_MASK;                                                  
   \   000002F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002FA   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000002FE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000302   0x6800             LDR      R0,[R0, #+0]
   \   00000304   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000308   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000030A   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000030E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000312   0x6008             STR      R0,[R1, #+0]
    405                                                                 //计数器。只有低16位可用
    406              /*
    407              FTM_SC_CPWMS_MASK：Center-aligned PWM Select 中心对齐PWM选择
    408                0    FTM counter operates in up counting mode.      向上计数
    409                1    FTM counter operates in up-down counting mode. 上下计数
    410          
    411              FTM_SC_PS：Prescale Factor Selection 预分频因子选择
    412                                     | 
    413                000    Divide by 1   |      
    414                001    Divide by 2   |    
    415                010    Divide by 4   |    
    416                011    Divide by 8   |    
    417                100    Divide by 16  |    
    418                101    Divide by 32  |   
    419                110    Divide by 64  |
    420                111    Divide by 128 |
    421          
    422              FTM_SC_CLKS：Clock Source Selection 时钟源选择
    423                00    No clock selected (This in effect disables the FTM counter.)
    424                01    System clock
    425                10    Fixed frequency clock
    426                11    External clock
    427            */
    428          }
   \                     ??FTM_PWM_init_22:
   \   00000314   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    429          /*************************************************************************
    430          *  函数名称：FTM_PWM_Duty
    431          *  功能说明：设置通道占空比
    432          *  参数说明：FTMn        模块号（FTM0、  FTM1、  FTM2）
    433          *            CHn         通道号（CH0~CH7）
    434          *            duty        占空比
    435          *  函数返回：无
    436          *  修改时间：2012-2-14
    437          *  备    注：设置通道占空比,占空比为 （duty * 精度） % ，
    438          *             如果 FTM_PRECISON 定义为 1000 ，duty = 100 ，
    439          *             则占空比 100*0.1%=10%
    440          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    441          void FTM_PWM_Duty(FTMn ftmn,CHn ch, u32 duty)
    442          {
   \                     FTM_PWM_Duty:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    443              u32 cv;
    444              u32 mod;
    445          
    446              ASSERT( (ftmn==FTM0) || ( (ftmn==FTM1 || ftmn==FTM2 ) &&(ch<=CH1)) );   //检查传递进来的通道是否正确
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD00E             BEQ.N    ??FTM_PWM_Duty_0
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C01             CMP      R4,#+1
   \   00000012   0xD002             BEQ.N    ??FTM_PWM_Duty_1
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C02             CMP      R4,#+2
   \   00000018   0xD102             BNE.N    ??FTM_PWM_Duty_2
   \                     ??FTM_PWM_Duty_1:
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D02             CMP      R5,#+2
   \   0000001E   0xD305             BCC.N    ??FTM_PWM_Duty_0
   \                     ??FTM_PWM_Duty_2:
   \   00000020   0xF44F 0x71DF      MOV      R1,#+446
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000028   0x.... 0x....      BL       assert_failed
    447              ASSERT_RST(duty <= FTM_PRECISON,"所配占空比超过100%");                  //用断言检测 占空比是否合理
   \                     ??FTM_PWM_Duty_0:
   \   0000002C   0xF242 0x7011      MOVW     R0,#+10001
   \   00000030   0x4286             CMP      R6,R0
   \   00000032   0xD307             BCC.N    ??FTM_PWM_Duty_3
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable8_19
   \   00000038   0xF240 0x11BF      MOVW     R1,#+447
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000040   0x.... 0x....      BL       assert_failed_rst
    448          
    449              //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    450              mod = FTM_MOD_REG(FTMx[ftmn]);                                          //读取 MOD 的值
   \                     ??FTM_PWM_Duty_3:
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000004A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004E   0x6880             LDR      R0,[R0, #+8]
    451          
    452              cv = (duty*(mod-0+1))/FTM_PRECISON;
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0xFB00 0xF006      MUL      R0,R0,R6
   \   00000056   0xF242 0x7110      MOVW     R1,#+10000
   \   0000005A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    453          
    454              // 配置FTM通道值
    455              FTM_CnV_REG(FTMx[ftmn],ch) = cv;
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000066   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000006A   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   0000006E   0x6108             STR      R0,[R1, #+16]
    456          }
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
    457          
    458          
    459          /*************************************************************************
    460          *  函数名称：FTM_PWM_freq
    461          *  功能说明：设置FTM的频率
    462          *  参数说明：FTMn        模块号（FTM0、  FTM1、  FTM2）
    463          *            freq        频率（单位为Hz）
    464          *  函数返回：无
    465          *  修改时间：2012-2-14
    466          *  备    注：同一个FTM，各通道的PWM频率是一样的，共3个FTM，即可以输出3个不同频率PWM
    467          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    468          void FTM_PWM_freq(FTMn ftmn,u32 freq)               //设置FTM的频率
    469          {
   \                     FTM_PWM_freq:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    470              u32 clk_hz = (bus_clk_khz*1000);                //bus频率 
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000012   0xFB01 0xF600      MUL      R6,R1,R0
    471              u32 mod;
    472              u8 sc_ps;
    473          
    474          
    475              //用断言检测 频率 是否正常 ,频率必须小于时钟二分之一  >>7>>16 最大为总线/65535/128
    476              ASSERT_RST( (freq <= (clk_hz/2) && freq >(clk_hz>>23)),"FTM频率配置错误" );
   \   00000016   0x0870             LSRS     R0,R6,#+1
   \   00000018   0x42A8             CMP      R0,R5
   \   0000001A   0xD302             BCC.N    ??FTM_PWM_freq_0
   \   0000001C   0x0DF0             LSRS     R0,R6,#+23
   \   0000001E   0x42A8             CMP      R0,R5
   \   00000020   0xD307             BCC.N    ??FTM_PWM_freq_1
   \                     ??FTM_PWM_freq_0:
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   00000026   0xF44F 0x71EE      MOV      R1,#+476
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000002E   0x.... 0x....      BL       assert_failed_rst
    477              
    478              
    479              /*       计算频率设置        */
    480              mod= (clk_hz>>16 )/freq ;
   \                     ??FTM_PWM_freq_1:
   \   00000032   0x0C30             LSRS     R0,R6,#+16
   \   00000034   0xFBB0 0xF8F5      UDIV     R8,R0,R5
    481              for(sc_ps=0;(mod>>sc_ps)>=1;sc_ps++);           //求sc_ps的最小值
   \   00000038   0x2700             MOVS     R7,#+0
   \   0000003A   0xE000             B.N      ??FTM_PWM_freq_2
   \                     ??FTM_PWM_freq_3:
   \   0000003C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??FTM_PWM_freq_2:
   \   0000003E   0xFA38 0xF007      LSRS     R0,R8,R7
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD1FA             BNE.N    ??FTM_PWM_freq_3
    482              mod=(clk_hz>>sc_ps)/freq - 1;
   \   00000046   0xFA36 0xF007      LSRS     R0,R6,R7
   \   0000004A   0xFBB0 0xF0F5      UDIV     R0,R0,R5
   \   0000004E   0xF1B0 0x0801      SUBS     R8,R0,#+1
    483              
    484              ASSERT( sc_ps < 8);                             //用断言检测，保证ps最大为7        
   \   00000052   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000054   0x2F08             CMP      R7,#+8
   \   00000056   0xD305             BCC.N    ??FTM_PWM_freq_4
   \   00000058   0xF44F 0x71F2      MOV      R1,#+484
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000060   0x.... 0x....      BL       assert_failed
    485          
    486              switch(ftmn)
   \                     ??FTM_PWM_freq_4:
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD003             BEQ.N    ??FTM_PWM_freq_5
   \   0000006A   0x2C02             CMP      R4,#+2
   \   0000006C   0xD011             BEQ.N    ??FTM_PWM_freq_6
   \   0000006E   0xD308             BCC.N    ??FTM_PWM_freq_7
   \   00000070   0xE017             B.N      ??FTM_PWM_freq_8
    487              {
    488              case FTM0:
    489                  SIM_SCGC6|=SIM_SCGC6_FTM0_MASK;                               //使能FTM0时钟
   \                     ??FTM_PWM_freq_5:
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000080   0x6008             STR      R0,[R1, #+0]
    490              case FTM1:
    491                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;                               //使能FTM1时钟
   \                     ??FTM_PWM_freq_7:
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000090   0x6008             STR      R0,[R1, #+0]
    492              case FTM2:
    493                  SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                             //使能FTM2时钟
   \                     ??FTM_PWM_freq_6:
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x40048030
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40048030
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    494              default:
    495                  break;
    496              }
    497              
    498              FTM_CNT_REG(FTMx[ftmn])   =0;                                                       //计数器。只有低16位可用
   \                     ??FTM_PWM_freq_8:
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000A8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x6041             STR      R1,[R0, #+4]
    499              //FTM_CnV_REG(FTMx[ftmn],ch)= 0;                                                    // Channel (n) Value  。设置脉冲宽度：(CnV - CNTIN).
    500              FTM_MOD_REG(FTMx[ftmn])   = FTM_MOD_MOD(mod);                                                    //Modulo value模数, EPWM的周期为 ：MOD - CNTIN + 0x0001
   \   000000B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000B6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000BA   0xFA1F 0xF188      UXTH     R1,R8            ;; ZeroExt  R1,R8,#+16,#+16
   \   000000BE   0x6081             STR      R1,[R0, #+8]
    501              FTM_CNTIN_REG(FTMx[ftmn]) =0;
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000C6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x64C1             STR      R1,[R0, #+76]
    502              
    503              while(!(mod == FTM_MOD_REG(FTMx[ftmn])));                         //等待更新成功 
   \                     ??FTM_PWM_freq_9:
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000D4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000D8   0x6880             LDR      R0,[R0, #+8]
   \   000000DA   0x4580             CMP      R8,R0
   \   000000DC   0xD1F7             BNE.N    ??FTM_PWM_freq_9
    504             
    505              /******************** 配置时钟和分频 ********************/
    506              FTM_SC_REG(FTMx[ftmn])   |= (FTM_SC_PS(sc_ps) | FTM_SC_CLKS(1));  //没有使能溢出中断
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000000E4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000EC   0xF017 0x0107      ANDS     R1,R7,#0x7
   \   000000F0   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   000000F4   0x4308             ORRS     R0,R1,R0
   \   000000F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000000FC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000100   0x6008             STR      R0,[R1, #+0]
    507              FTM_SC_REG(FTMx[ftmn])   &= ~FTM_SC_CPWMS_MASK; 
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000108   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000112   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000118   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000011C   0x6008             STR      R0,[R1, #+0]
    508          }
   \   0000011E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    509          
    510          
    511          /*************************************************************************
    512          *  函数名称：FTM_Input_init
    513          *  功能说明：输入捕捉初始化函数
    514          *  参数说明：FTMn        模块号（FTM0、  FTM1、  FTM2）
    515          *            CHn         通道号（CH0~CH7）
    516          *            Input_cfg   输入捕捉配置（Rising、Falling、Rising_or_Falling）上升沿捕捉、下降沿捕捉、跳变沿捕捉
    517          *  函数返回：无
    518          *  修改时间：2012-1-26
    519          *  备    注：CH0~CH3可以使用过滤器，未添加这功能
    520          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    521          void FTM_Input_init(FTMn ftmn,CHn ch,Input_cfg cfg)
    522          {
   \                     FTM_Input_init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    523              ASSERT_RST( ((ftmn==FTM0) || ( (ftmn==FTM1 || ftmn==FTM2 ) &&(ch<=CH1)) ),"FTM通道设置错误");   //检查传递进来的通道是否正确	
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD010             BEQ.N    ??FTM_Input_init_0
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C01             CMP      R4,#+1
   \   00000012   0xD002             BEQ.N    ??FTM_Input_init_1
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C02             CMP      R4,#+2
   \   00000018   0xD102             BNE.N    ??FTM_Input_init_2
   \                     ??FTM_Input_init_1:
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D02             CMP      R5,#+2
   \   0000001E   0xD307             BCC.N    ??FTM_Input_init_0
   \                     ??FTM_Input_init_2:
   \   00000020   0x.... 0x....      LDR.W    R2,??DataTable8_20
   \   00000024   0xF240 0x210B      MOVW     R1,#+523
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000002C   0x.... 0x....      BL       assert_failed_rst
    524          
    525              /******************* 开启时钟 和 复用IO口*******************/
    526              //注，这里代码虽然长，但编译时会删掉很多没用的部分，不影响速度
    527              switch(ftmn)
   \                     ??FTM_Input_init_0:
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD005             BEQ.N    ??FTM_Input_init_3
   \   00000036   0x2C02             CMP      R4,#+2
   \   00000038   0xF000 0x80B8      BEQ.W    ??FTM_Input_init_4
   \   0000003C   0xF0C0 0x8089      BCC.W    ??FTM_Input_init_5
   \   00000040   0xE0DF             B.N      ??FTM_Input_init_6
    528              {
    529              case FTM0:
    530                  SIM_SCGC6|=SIM_SCGC6_FTM0_MASK;                             //使能FTM0时钟
   \                     ??FTM_Input_init_3:
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000050   0x6008             STR      R0,[R1, #+0]
    531                  switch(ch)
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x2D00             CMP      R5,#+0
   \   00000056   0xD00B             BEQ.N    ??FTM_Input_init_7
   \   00000058   0x2D02             CMP      R5,#+2
   \   0000005A   0xD025             BEQ.N    ??FTM_Input_init_8
   \   0000005C   0xD316             BCC.N    ??FTM_Input_init_9
   \   0000005E   0x2D04             CMP      R5,#+4
   \   00000060   0xD03E             BEQ.N    ??FTM_Input_init_10
   \   00000062   0xD32F             BCC.N    ??FTM_Input_init_11
   \   00000064   0x2D06             CMP      R5,#+6
   \   00000066   0xD057             BEQ.N    ??FTM_Input_init_12
   \   00000068   0xD348             BCC.N    ??FTM_Input_init_13
   \   0000006A   0x2D07             CMP      R5,#+7
   \   0000006C   0xD062             BEQ.N    ??FTM_Input_init_14
   \   0000006E   0xE06F             B.N      ??FTM_Input_init_15
    532                  {
    533                  case CH0:
    534                      if(FTM0_CH0==PTC1)
    535                      {
    536                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
   \                     ??FTM_Input_init_7:
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    537                          PORT_PCR_REG(PORTC_BASE_PTR, 1) = PORT_PCR_MUX(4);  // PTC1
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable8_7  ;; 0x4004b004
   \   00000084   0xF44F 0x6180      MOV      R1,#+1024
   \   00000088   0x6001             STR      R1,[R0, #+0]
    538                      }
    539                      /*不建议使用PTA3
    540                      else if(FTM0_CH0==PTA3)
    541                      {
    542                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    543                          PORT_PCR_REG(PORTA_BASE_PTR, 3) = PORT_PCR_MUX(3);  // PTA3
    544                      }
    545                      else
    546                      {
    547                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    548                      }
    549                      */
    550                      break;
    551          
    552                  case CH1:
    553                      if(FTM0_CH1==PTC2)
    554                      {
    555                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    556                          PORT_PCR_REG(PORTC_BASE_PTR, 2) = PORT_PCR_MUX(4);  // PTC2
    557                      }
    558                      else if(FTM0_CH1==PTA4)
    559                      {
    560                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    561                          PORT_PCR_REG(PORTA_BASE_PTR, 4) = PORT_PCR_MUX(3);  // PTA4
    562                      }
    563                      else
    564                      {
    565                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    566                      }
    567                      break;
    568          
    569                  case CH2:
    570                      if(FTM0_CH2==PTC3)
    571                      {
    572                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    573                          PORT_PCR_REG(PORTC_BASE_PTR, 3) = PORT_PCR_MUX(4);  // PTC3
    574                      }
    575                      else if(FTM0_CH2==PTA5)
    576                      {
    577                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    578                          PORT_PCR_REG(PORTA_BASE_PTR, 5) = PORT_PCR_MUX(3);  // PTA5
    579                      }
    580                      else
    581                      {
    582                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    583                      }
    584                      break;
    585          
    586                  case CH3:
    587                      if(FTM0_CH3==PTC4)
    588                      {
    589                          SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
    590                          PORT_PCR_REG(PORTC_BASE_PTR, 4) = PORT_PCR_MUX(4);  // PTC4
    591                      }
    592          #if K60PIN == 144u
    593                      else if(FTM0_CH3==PTA6)
    594                      {
    595                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    596                          PORT_PCR_REG(PORTA_BASE_PTR, 6) = PORT_PCR_MUX(3);  // PTA6
    597                      }
    598          #endif
    599                      else
    600                      {
    601                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    602                      }
    603                      break;
    604          
    605                  case CH4:
    606                      if(FTM0_CH4==PTD4)
    607                      {
    608                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    609                          PORT_PCR_REG(PORTD_BASE_PTR, 4) = PORT_PCR_MUX(4);  // PTD4
    610                      }
    611          #if K60PIN == 144u
    612                      else if(FTM0_CH4==PTA7)
    613                      {
    614                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    615                          PORT_PCR_REG(PORTA_BASE_PTR, 7) = PORT_PCR_MUX(3);  // PTA7
    616                      }
    617          #endif
    618                      else
    619                      {
    620                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    621                      }
    622                      break;
    623          
    624                  case CH5:
    625                      if(FTM0_CH5==PTD5)
    626                      {
    627                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    628                          PORT_PCR_REG(PORTD_BASE_PTR, 5) = PORT_PCR_MUX(4);  // PTD5
    629                      }
    630                      /*不建议使用PTA0
    631                      else if(FTM0_CH5==PTA0)
    632                      {
    633                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    634                          PORT_PCR_REG(PORTA_BASE_PTR, 0) = PORT_PCR_MUX(3);  // PTA0
    635                      }
    636                      */
    637                      else
    638                      {
    639                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    640                      }
    641                      break;
    642          
    643                  case CH6:
    644                      if(FTM0_CH6==PTD6)
    645                      {
    646                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    647                          PORT_PCR_REG(PORTD_BASE_PTR, 6) = PORT_PCR_MUX(4);  // PTD6
    648                      }
    649                      /*不建议使用PTA1
    650                      else if(FTM0_CH6==PTA1)
    651                      {
    652                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    653                          PORT_PCR_REG(PORTA_BASE_PTR, 1) = PORT_PCR_MUX(3);  // PTA1
    654                      }
    655                      */
    656                      else
    657                      {
    658                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    659                      }
    660                      break;
    661          
    662                  case CH7:
    663                      if(FTM0_CH7==PTD7)
    664                      {
    665                          SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    666                          PORT_PCR_REG(PORTD_BASE_PTR, 7) = PORT_PCR_MUX(4);  // PTD7
    667                      }
    668                      /*不建议使用PTA2
    669                      else if(FTM0_CH7==PTA2)
    670                      {
    671                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    672                          PORT_PCR_REG(PORTA_BASE_PTR, 2) = PORT_PCR_MUX(3);  // PTA2
    673                      }
    674                      */
    675                      else
    676                      {
    677                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    678                      }
    679                      break;
    680                  default:
    681                      return;
    682                  }
    683                  break;
   \                     ??FTM_Input_init_16:
   \   0000008A   0xE0BA             B.N      ??FTM_Input_init_17
   \                     ??FTM_Input_init_9:
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable8_8  ;; 0x4004b008
   \   000000A0   0xF44F 0x6180      MOV      R1,#+1024
   \   000000A4   0x6001             STR      R1,[R0, #+0]
   \   000000A6   0xE7F0             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_8:
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable8_9  ;; 0x4004b00c
   \   000000BC   0xF44F 0x6180      MOV      R1,#+1024
   \   000000C0   0x6001             STR      R1,[R0, #+0]
   \   000000C2   0xE7E2             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_11:
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable8_10  ;; 0x4004b010
   \   000000D8   0xF44F 0x6180      MOV      R1,#+1024
   \   000000DC   0x6001             STR      R1,[R0, #+0]
   \   000000DE   0xE7D4             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_10:
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   000000EE   0x6008             STR      R0,[R1, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable8_11  ;; 0x4004c010
   \   000000F4   0xF44F 0x6180      MOV      R1,#+1024
   \   000000F8   0x6001             STR      R1,[R0, #+0]
   \   000000FA   0xE7C6             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_13:
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   0000010A   0x6008             STR      R0,[R1, #+0]
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable8_12  ;; 0x4004c014
   \   00000110   0xF44F 0x6180      MOV      R1,#+1024
   \   00000114   0x6001             STR      R1,[R0, #+0]
   \   00000116   0xE7B8             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_12:
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   00000126   0x6008             STR      R0,[R1, #+0]
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable8_13  ;; 0x4004c018
   \   0000012C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000130   0x6001             STR      R1,[R0, #+0]
   \   00000132   0xE7AA             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_14:
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   00000142   0x6008             STR      R0,[R1, #+0]
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable8_14  ;; 0x4004c01c
   \   00000148   0xF44F 0x6180      MOV      R1,#+1024
   \   0000014C   0x6001             STR      R1,[R0, #+0]
   \   0000014E   0xE79C             B.N      ??FTM_Input_init_16
   \                     ??FTM_Input_init_15:
   \   00000150   0xE108             B.N      ??FTM_Input_init_18
    684          
    685            case FTM1:
    686                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;                             //使能FTM1时钟
   \                     ??FTM_Input_init_5:
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000015C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000160   0x6008             STR      R0,[R1, #+0]
    687                  switch(ch)
   \   00000162   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000164   0x2D00             CMP      R5,#+0
   \   00000166   0xD002             BEQ.N    ??FTM_Input_init_19
   \   00000168   0x2D01             CMP      R5,#+1
   \   0000016A   0xD00F             BEQ.N    ??FTM_Input_init_20
   \   0000016C   0xE01D             B.N      ??FTM_Input_init_21
    688                  {
    689                  case CH0:
    690          #if K60PIN == 144u
    691                      if(FTM1_CH0==PTA8)
    692                      {
    693                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    694                          PORT_PCR_REG(PORTA_BASE_PTR, 8) = PORT_PCR_MUX(3);  // PTA8
    695                      }
    696                      else 
    697          #endif            
    698                      if(FTM1_CH0==PTA12)
    699                      {
    700                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \                     ??FTM_Input_init_19:
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000172   0x6800             LDR      R0,[R0, #+0]
   \   00000174   0xF44F 0x7100      MOV      R1,#+512
   \   00000178   0x4308             ORRS     R0,R1,R0
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   0000017E   0x6008             STR      R0,[R1, #+0]
    701                          PORT_PCR_REG(PORTA_BASE_PTR, 12) = PORT_PCR_MUX(3);  // PTA12
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable8_15  ;; 0x40049030
   \   00000184   0xF44F 0x7140      MOV      R1,#+768
   \   00000188   0x6001             STR      R1,[R0, #+0]
    702                      }
    703                      else if(FTM1_CH0==PTB0)
    704                      {
    705                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    706                          PORT_PCR_REG(PORTB_BASE_PTR, 0) = PORT_PCR_MUX(3);  // PTB0
    707                      }
    708                      else
    709                      {
    710                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    711                      }
    712                      break;
    713          
    714          
    715                  case CH1:
    716          #if K60PIN == 144u
    717                      if(FTM1_CH1==PTA9)
    718                      {
    719                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    720                          PORT_PCR_REG(PORTA_BASE_PTR, 9) = PORT_PCR_MUX(3);  // PTA9
    721                      }
    722                      else 
    723          #endif  
    724                      if(FTM1_CH1==PTA13)
    725                      {
    726                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    727                          PORT_PCR_REG(PORTA_BASE_PTR, 13) = PORT_PCR_MUX(3);  // PTA13
    728                      }
    729                      else if(FTM1_CH1==PTB1)
    730                      {
    731                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    732                          PORT_PCR_REG(PORTB_BASE_PTR, 1) = PORT_PCR_MUX(3);  // PTB1
    733                      }
    734                      else
    735                      {
    736                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    737                      }
    738                      break;
    739          
    740                  default:
    741                      return;
    742                  }
    743                  break;
   \                     ??FTM_Input_init_22:
   \   0000018A   0xE03A             B.N      ??FTM_Input_init_17
   \                     ??FTM_Input_init_20:
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   00000190   0x6800             LDR      R0,[R0, #+0]
   \   00000192   0xF44F 0x7100      MOV      R1,#+512
   \   00000196   0x4308             ORRS     R0,R1,R0
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   0000019C   0x6008             STR      R0,[R1, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable8_16  ;; 0x40049034
   \   000001A2   0xF44F 0x7140      MOV      R1,#+768
   \   000001A6   0x6001             STR      R1,[R0, #+0]
   \   000001A8   0xE7EF             B.N      ??FTM_Input_init_22
   \                     ??FTM_Input_init_21:
   \   000001AA   0xE0DB             B.N      ??FTM_Input_init_18
    744            case FTM2:
    745                  SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                           //使能FTM2时钟
   \                     ??FTM_Input_init_4:
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x40048030
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40048030
   \   000001BA   0x6008             STR      R0,[R1, #+0]
    746                  switch(ch)
   \   000001BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001BE   0x2D00             CMP      R5,#+0
   \   000001C0   0xD002             BEQ.N    ??FTM_Input_init_23
   \   000001C2   0x2D01             CMP      R5,#+1
   \   000001C4   0xD00E             BEQ.N    ??FTM_Input_init_24
   \   000001C6   0xE01B             B.N      ??FTM_Input_init_25
    747                  {
    748                  case CH0:
    749          #if K60PIN == 144u
    750                      if(FTM2_CH0==PTA10)
    751                      {
    752                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    753                          PORT_PCR_REG(PORTA_BASE_PTR, 10) = PORT_PCR_MUX(3);  // PTA10
    754                      }
    755                      else 
    756          #endif            
    757                      if(FTM2_CH0==PTB18)
    758                      {
    759                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??FTM_Input_init_23:
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   000001CC   0x6800             LDR      R0,[R0, #+0]
   \   000001CE   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   000001D6   0x6008             STR      R0,[R1, #+0]
    760                          PORT_PCR_REG(PORTB_BASE_PTR, 18) = PORT_PCR_MUX(3);  // PTB18
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable8_17  ;; 0x4004a048
   \   000001DC   0xF44F 0x7140      MOV      R1,#+768
   \   000001E0   0x6001             STR      R1,[R0, #+0]
    761                          //PORT_PCR_REG(PORTB_BASE_PTR, 18) = (0|PORT_PCR_MUX(3)|0x10);  //带无源滤波器
    762                      }
    763                      else
    764                      {
    765                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    766                      }
    767                      break;
    768          
    769                  case CH1:
    770          #if K60PIN == 144u
    771                      if(FTM2_CH1==PTA11)
    772                      {
    773                          SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    774                          PORT_PCR_REG(PORTB_BASE_PTR, 11) = PORT_PCR_MUX(3);  // PTA11
    775                      }
    776                      else 
    777          #endif             
    778                      if(FTM2_CH1==PTB19)
    779                      {
    780                          SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    781                          PORT_PCR_REG(PORTB_BASE_PTR, 19) = (0|PORT_PCR_MUX(3)|0x10);  //带无源滤波器
    782                      }
    783                      else
    784                      {
    785                          assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    786                      }
    787                      break;
    788          
    789                  default:
    790                      return;
    791                  }
    792                  break;
   \                     ??FTM_Input_init_26:
   \   000001E2   0xE00E             B.N      ??FTM_Input_init_17
   \                     ??FTM_Input_init_24:
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048038
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048038
   \   000001F2   0x6008             STR      R0,[R1, #+0]
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable8_18  ;; 0x4004a04c
   \   000001F8   0xF44F 0x7144      MOV      R1,#+784
   \   000001FC   0x6001             STR      R1,[R0, #+0]
   \   000001FE   0xE7F0             B.N      ??FTM_Input_init_26
   \                     ??FTM_Input_init_25:
   \   00000200   0xE0B0             B.N      ??FTM_Input_init_18
    793            default:
    794                  break;
    795              }
    796          
    797          
    798              /******************* 设置为输入捕捉功能 *******************/
    799              switch(cfg)
   \                     ??FTM_Input_init_6:
   \                     ??FTM_Input_init_17:
   \   00000202   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000204   0x2E00             CMP      R6,#+0
   \   00000206   0xD003             BEQ.N    ??FTM_Input_init_27
   \   00000208   0x2E02             CMP      R6,#+2
   \   0000020A   0xD052             BEQ.N    ??FTM_Input_init_28
   \   0000020C   0xD329             BCC.N    ??FTM_Input_init_29
   \   0000020E   0xE074             B.N      ??FTM_Input_init_30
    800              {
    801              case Rising:    //上升沿触发
    802                  FTM_CnSC_REG(FTMx[ftmn],ch) |=  ( FTM_CnSC_ELSA_MASK  | FTM_CnSC_CHIE_MASK );                    //置1
   \                     ??FTM_Input_init_27:
   \   00000210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000212   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000218   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000021C   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   00000220   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000222   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000224   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000228   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000022C   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   00000230   0x68C9             LDR      R1,[R1, #+12]
   \   00000232   0xF051 0x0144      ORRS     R1,R1,#0x44
   \   00000236   0x60C1             STR      R1,[R0, #+12]
    803                  FTM_CnSC_REG(FTMx[ftmn],ch) &= ~( FTM_CnSC_ELSB_MASK  | FTM_CnSC_MSB_MASK | FTM_CnSC_MSA_MASK);  //清0
   \   00000238   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000023A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000240   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000244   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   00000248   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000024A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000024C   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000250   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000254   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   00000258   0x68C9             LDR      R1,[R1, #+12]
   \   0000025A   0xF031 0x0138      BICS     R1,R1,#0x38
   \   0000025E   0x60C1             STR      R1,[R0, #+12]
    804                  break;
   \   00000260   0xE04B             B.N      ??FTM_Input_init_30
    805          
    806              case Falling:   //下降沿触发
    807                  FTM_CnSC_REG(FTMx[ftmn],ch) |= (FTM_CnSC_ELSB_MASK  | FTM_CnSC_CHIE_MASK );                     //置1
   \                     ??FTM_Input_init_29:
   \   00000262   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000264   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000266   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000026A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000026E   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   00000272   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000274   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000027A   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000027E   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   00000282   0x68C9             LDR      R1,[R1, #+12]
   \   00000284   0xF051 0x0148      ORRS     R1,R1,#0x48
   \   00000288   0x60C1             STR      R1,[R0, #+12]
    808                  FTM_CnSC_REG(FTMx[ftmn],ch) &= ~( FTM_CnSC_ELSA_MASK | FTM_CnSC_MSB_MASK | FTM_CnSC_MSA_MASK);  //清0
   \   0000028A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000028C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000028E   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000292   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000296   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   0000029A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000029C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000029E   0x....             LDR.N    R1,??DataTable8_5
   \   000002A0   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002A4   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   000002A8   0x68C9             LDR      R1,[R1, #+12]
   \   000002AA   0xF031 0x0134      BICS     R1,R1,#0x34
   \   000002AE   0x60C1             STR      R1,[R0, #+12]
    809                  break;
   \   000002B0   0xE023             B.N      ??FTM_Input_init_30
    810          
    811              case Rising_or_Falling: //上升沿、下降沿都触发
    812                  FTM_CnSC_REG(FTMx[ftmn],ch) |=  ( FTM_CnSC_ELSB_MASK | FTM_CnSC_ELSA_MASK  | FTM_CnSC_CHIE_MASK ); //置1
   \                     ??FTM_Input_init_28:
   \   000002B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B6   0x....             LDR.N    R0,??DataTable8_5
   \   000002B8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000002BC   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   000002C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002C4   0x....             LDR.N    R1,??DataTable8_5
   \   000002C6   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002CA   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   000002CE   0x68C9             LDR      R1,[R1, #+12]
   \   000002D0   0xF051 0x014C      ORRS     R1,R1,#0x4C
   \   000002D4   0x60C1             STR      R1,[R0, #+12]
    813                  FTM_CnSC_REG(FTMx[ftmn],ch) &= ~( FTM_CnSC_MSB_MASK  | FTM_CnSC_MSA_MASK);  //清0
   \   000002D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DA   0x....             LDR.N    R0,??DataTable8_5
   \   000002DC   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000002E0   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   000002E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002E6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002E8   0x....             LDR.N    R1,??DataTable8_5
   \   000002EA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002EE   0xEB11 0x01C5      ADDS     R1,R1,R5, LSL #+3
   \   000002F2   0x68C9             LDR      R1,[R1, #+12]
   \   000002F4   0xF031 0x0130      BICS     R1,R1,#0x30
   \   000002F8   0x60C1             STR      R1,[R0, #+12]
    814                  break;
    815              }
    816          
    817              FTM_SC_REG(FTMx[ftmn]) = FTM_SC_CLKS(0x1);        //System clock
   \                     ??FTM_Input_init_30:
   \   000002FA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002FC   0x....             LDR.N    R0,??DataTable8_5
   \   000002FE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000302   0x2108             MOVS     R1,#+8
   \   00000304   0x6001             STR      R1,[R0, #+0]
    818          
    819              FTM_MODE_REG(FTMx[ftmn]) |= FTM_MODE_WPDIS_MASK;
   \   00000306   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000308   0x....             LDR.N    R0,??DataTable8_5
   \   0000030A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000030E   0x6D40             LDR      R0,[R0, #+84]
   \   00000310   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000314   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000316   0x....             LDR.N    R1,??DataTable8_5
   \   00000318   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000031C   0x6548             STR      R0,[R1, #+84]
    820              FTM_COMBINE_REG(FTMx[ftmn])=0;
   \   0000031E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000320   0x....             LDR.N    R0,??DataTable8_5
   \   00000322   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000326   0x2100             MOVS     R1,#+0
   \   00000328   0x6641             STR      R1,[R0, #+100]
    821              FTM_MODE_REG(FTMx[ftmn]) &= ~FTM_MODE_FTMEN_MASK;
   \   0000032A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000032C   0x....             LDR.N    R0,??DataTable8_5
   \   0000032E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000332   0x6D40             LDR      R0,[R0, #+84]
   \   00000334   0x0840             LSRS     R0,R0,#+1
   \   00000336   0x0040             LSLS     R0,R0,#+1
   \   00000338   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000033A   0x....             LDR.N    R1,??DataTable8_5
   \   0000033C   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000340   0x6548             STR      R0,[R1, #+84]
    822              FTM_CNTIN_REG(FTMx[ftmn])=0;
   \   00000342   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000344   0x....             LDR.N    R0,??DataTable8_5
   \   00000346   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000034A   0x2100             MOVS     R1,#+0
   \   0000034C   0x64C1             STR      R1,[R0, #+76]
    823          
    824              FTM_STATUS_REG(FTMx[ftmn])=0x00;                  //清中断标志位
   \   0000034E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000350   0x....             LDR.N    R0,??DataTable8_5
   \   00000352   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000356   0x2100             MOVS     R1,#+0
   \   00000358   0x6501             STR      R1,[R0, #+80]
    825          
    826              //开启输入捕捉中断
    827              enable_irq(62+ftmn);
   \   0000035A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000035C   0xF114 0x003E      ADDS     R0,R4,#+62
   \   00000360   0x.... 0x....      BL       enable_irq
    828          }
   \                     ??FTM_Input_init_18:
   \   00000364   0xBD70             POP      {R4-R6,PC}       ;; return
    829          /*************************************************************************
    830          *  函数名称：FTM2_QUAD_DIR_init
    831          *  功能说明：正交解码 方向计数模式初始化函数
    832          *  参数说明：FTMn        模块号（FTM1、  FTM2）
    833          *  函数返回：无
    834          *  修改时间：2012-1-26
    835          *  备    注：
    836                       该例程使用 A10 和A11 引脚输入作为旋转编码器的 A相和B 相输入。 
    837                        B路控制计数器方向  高电平时计数器正向计数
    838                        A路计数脉冲
    839                        对B路默认上拉
    840          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    841          void FTM_QUAD_DIR_init(FTMn ftmn)
    842          {
   \                     FTM_QUAD_DIR_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    843              ASSERT_RST( (ftmn==FTM1 || ftmn==FTM2 ),"FTM正交方向计数通道设置错误");   //检查传递进来的通道是否正确	
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD008             BEQ.N    ??FTM_QUAD_DIR_init_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD005             BEQ.N    ??FTM_QUAD_DIR_init_0
   \   00000010   0x....             LDR.N    R2,??DataTable8_21
   \   00000012   0xF240 0x314B      MOVW     R1,#+843
   \   00000016   0x....             LDR.N    R0,??DataTable8_1
   \   00000018   0x.... 0x....      BL       assert_failed_rst
    844              
    845              switch(ftmn)
   \                     ??FTM_QUAD_DIR_init_0:
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD002             BEQ.N    ??FTM_QUAD_DIR_init_1
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD016             BEQ.N    ??FTM_QUAD_DIR_init_2
   \   00000028   0xE02A             B.N      ??FTM_QUAD_DIR_init_3
    846              {
    847                case FTM1:
    848                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;                             //使能FTM1时钟
   \                     ??FTM_QUAD_DIR_init_1:
   \   0000002A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x4004803c
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000032   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4004803c
   \   00000034   0x6008             STR      R0,[R1, #+0]
    849          #if K60PIN == 144u        
    850                  if(FTM1_CH0==PTA8 && FTM1_CH1==PTA9)
    851                  {
    852                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    853                      PORT_PCR_REG(PORTA_BASE_PTR, 8) = (0|PORT_PCR_MUX(6)|0x10);//滤波    这种写法是加一个IO滤波器
    854                      PORT_PCR_REG(PORTA_BASE_PTR, 9) = (0|PORT_PCR_MUX(6)|0x13);//滤波    检测5v信号时有必要使用
    855                  }
    856                  else 
    857          #endif          
    858                  if(FTM1_CH0==PTA12 && FTM1_CH1==PTA13)
    859                  {
    860                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \   00000036   0x....             LDR.N    R0,??DataTable8_6  ;; 0x40048038
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF44F 0x7100      MOV      R1,#+512
   \   0000003E   0x4308             ORRS     R0,R1,R0
   \   00000040   0x....             LDR.N    R1,??DataTable8_6  ;; 0x40048038
   \   00000042   0x6008             STR      R0,[R1, #+0]
    861                      PORT_PCR_REG(PORTA_BASE_PTR, 12) = (0|PORT_PCR_MUX(7)|0x10);  // PTA12
   \   00000044   0x....             LDR.N    R0,??DataTable8_15  ;; 0x40049030
   \   00000046   0xF44F 0x61E2      MOV      R1,#+1808
   \   0000004A   0x6001             STR      R1,[R0, #+0]
    862                      PORT_PCR_REG(PORTA_BASE_PTR, 13) = (0|PORT_PCR_MUX(7)|0x13);  // PTA13
   \   0000004C   0x....             LDR.N    R0,??DataTable8_16  ;; 0x40049034
   \   0000004E   0xF240 0x7113      MOVW     R1,#+1811
   \   00000052   0x6001             STR      R1,[R0, #+0]
    863                  }
    864                  else if(FTM1_CH0==PTB0 && FTM1_CH1==PTB1)
    865                  {
    866                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    867                      PORT_PCR_REG(PORTB_BASE_PTR, 0) = (0|PORT_PCR_MUX(6)|0x10);  // PTB0
    868                      PORT_PCR_REG(PORTB_BASE_PTR, 1) = (0|PORT_PCR_MUX(6)|0x13);  // PTB1
    869                  }
    870                  else
    871                  {
    872                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    873                  }
    874                  break;
   \   00000054   0xE014             B.N      ??FTM_QUAD_DIR_init_4
    875                  
    876              case FTM2:
    877                  SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                           //使能FTM2时钟
   \                     ??FTM_QUAD_DIR_init_2:
   \   00000056   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40048030
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000005E   0x....             LDR.N    R1,??DataTable8_4  ;; 0x40048030
   \   00000060   0x6008             STR      R0,[R1, #+0]
    878          #if K60PIN == 144u         
    879                  if(FTM2_CH0==PTA10 && FTM2_CH1==PTA11)
    880                  {
    881                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    882                      PORT_PCR_REG(PORTA_BASE_PTR, 10) = (0|PORT_PCR_MUX(6)|0x10);//滤波  // PTA10
    883                      PORT_PCR_REG(PORTA_BASE_PTR, 11) = (0|PORT_PCR_MUX(6)|0x13);//滤波  // PTA11
    884                  }
    885                  else 
    886          #endif        
    887                  if(FTM2_CH0==PTB18 && FTM2_CH1==PTB19)
    888                  {
    889                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \   00000062   0x....             LDR.N    R0,??DataTable8_6  ;; 0x40048038
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000006A   0x....             LDR.N    R1,??DataTable8_6  ;; 0x40048038
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    890                      PORT_PCR_REG(PORTB_BASE_PTR, 18) = (0|PORT_PCR_MUX(6)|0x10);  // PTB18
   \   0000006E   0x....             LDR.N    R0,??DataTable8_17  ;; 0x4004a048
   \   00000070   0xF44F 0x61C2      MOV      R1,#+1552
   \   00000074   0x6001             STR      R1,[R0, #+0]
    891                      PORT_PCR_REG(PORTB_BASE_PTR, 19) = (0|PORT_PCR_MUX(6)|0x13);  // PTB19
   \   00000076   0x....             LDR.N    R0,??DataTable8_18  ;; 0x4004a04c
   \   00000078   0xF240 0x6113      MOVW     R1,#+1555
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    892                  }
    893                  else
    894                  {
    895                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    896                  }
    897                  break;
   \   0000007E   0xE7FF             B.N      ??FTM_QUAD_DIR_init_4
    898            default:
    899                  break;
    900              }
    901              FTM_MODE_REG(FTMx[ftmn])    |= FTM_MODE_WPDIS_MASK;           //写保护禁止
   \                     ??FTM_QUAD_DIR_init_3:
   \                     ??FTM_QUAD_DIR_init_4:
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x....             LDR.N    R0,??DataTable8_5
   \   00000084   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000088   0x6D40             LDR      R0,[R0, #+84]
   \   0000008A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x....             LDR.N    R1,??DataTable8_5
   \   00000092   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000096   0x6548             STR      R0,[R1, #+84]
    902              FTM_QDCTRL_REG(FTMx[ftmn])  |=FTM_QDCTRL_QUADMODE_MASK;       //AB相同时确定方向和计数值
   \   00000098   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009A   0x....             LDR.N    R0,??DataTable8_5
   \   0000009C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000A0   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000A4   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0x....             LDR.N    R1,??DataTable8_5
   \   000000AC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B0   0xF8C1 0x0080      STR      R0,[R1, #+128]
    903              FTM_CNTIN_REG(FTMx[ftmn])    = 0;                             //FTM计数器初始值为0
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0x....             LDR.N    R0,??DataTable8_5
   \   000000B8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x64C1             STR      R1,[R0, #+76]
    904              FTM_MOD_REG(FTMx[ftmn])      = 0xFFFF;                        //FTM计数器初始值为0
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x....             LDR.N    R0,??DataTable8_5
   \   000000C4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000C8   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000CC   0x6081             STR      R1,[R0, #+8]
    905              
    906              //FTM_FILTER_REG(FTMx[ftmn])  |= FTM_FILTER_CH0FVAL(0x1F);    CH0~CH3可以使用过滤器
    907              //FTM_FILTER_REG(FTMx[ftmn])  |= FTM_FILTER_CH1FVAL(0x1F);
    908              //不启用滤波器延时三个时钟响应  用滤波响应时间为 4+4*FILTER
    909              
    910               
    911              FTM_QDCTRL_REG(FTMx[ftmn])  |=FTM_QDCTRL_QUADEN_MASK;         //使能FTM2正交解码模式
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0x....             LDR.N    R0,??DataTable8_5
   \   000000D2   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000D6   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000DA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x....             LDR.N    R1,??DataTable8_5
   \   000000E2   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000E6   0xF8C1 0x0080      STR      R0,[R1, #+128]
    912              FTM_MODE_REG(FTMx[ftmn])    |= FTM_MODE_FTMEN_MASK;                             //FTM2EN=1	
   \   000000EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EC   0x....             LDR.N    R0,??DataTable8_5
   \   000000EE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F2   0x6D40             LDR      R0,[R0, #+84]
   \   000000F4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FA   0x....             LDR.N    R1,??DataTable8_5
   \   000000FC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000100   0x6548             STR      R0,[R1, #+84]
    913              FTM_CNT_REG(FTMx[ftmn])    = 0; 	
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x....             LDR.N    R0,??DataTable8_5
   \   00000106   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x6041             STR      R1,[R0, #+4]
    914          }
   \   0000010E   0xBD10             POP      {R4,PC}          ;; return
    915          
    916          /*************************************************************************
    917          *  函数名称：FTM2_init
    918          *  功能说明：正交解码 方向计数模式初始化函数
    919          *  参数说明：FTMn        模块号（FTM1、  FTM2）
    920          *            *  函数返回：无
    921          *  修改时间：2012-1-26
    922          *  备    注：CH0~CH3可以使用过滤器，未添加这功能
    923                       该例程使用 A10 和A11 引脚输入作为旋转编码器的 A相和B 相输入。 
    924          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    925          void FTM_QUAD_init(FTMn ftmn)
    926          {
   \                     FTM_QUAD_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    927              ASSERT_RST( (ftmn==FTM1 || ftmn==FTM2 ),"FTM正交方向计数通道设置错误");   //检查传递进来的通道是否正确	
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD008             BEQ.N    ??FTM_QUAD_init_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD005             BEQ.N    ??FTM_QUAD_init_0
   \   00000010   0x....             LDR.N    R2,??DataTable8_21
   \   00000012   0xF240 0x319F      MOVW     R1,#+927
   \   00000016   0x....             LDR.N    R0,??DataTable8_1
   \   00000018   0x.... 0x....      BL       assert_failed_rst
    928              
    929              switch(ftmn)
   \                     ??FTM_QUAD_init_0:
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD002             BEQ.N    ??FTM_QUAD_init_1
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD016             BEQ.N    ??FTM_QUAD_init_2
   \   00000028   0xE02A             B.N      ??FTM_QUAD_init_3
    930              {
    931                case FTM1:
    932                  SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;                             //使能FTM1时钟
   \                     ??FTM_QUAD_init_1:
   \   0000002A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x4004803c
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000032   0x....             LDR.N    R1,??DataTable8_3  ;; 0x4004803c
   \   00000034   0x6008             STR      R0,[R1, #+0]
    933          #if K60PIN == 144u          
    934                  if(FTM1_CH0==PTA8 && FTM1_CH1==PTA9)
    935                  {
    936                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    937                      PORT_PCR_REG(PORTA_BASE_PTR, 8) = PORT_PCR_MUX(6);   // PTA8
    938                      PORT_PCR_REG(PORTA_BASE_PTR, 9) = (0|PORT_PCR_MUX(6));
    939                  }
    940                  else 
    941          #endif          
    942                  if(FTM1_CH0==PTA12 && FTM1_CH1==PTA13)
    943                  {
    944                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \   00000036   0x....             LDR.N    R0,??DataTable8_6  ;; 0x40048038
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF44F 0x7100      MOV      R1,#+512
   \   0000003E   0x4308             ORRS     R0,R1,R0
   \   00000040   0x....             LDR.N    R1,??DataTable8_6  ;; 0x40048038
   \   00000042   0x6008             STR      R0,[R1, #+0]
    945                      PORT_PCR_REG(PORTA_BASE_PTR, 12) = PORT_PCR_MUX(7);  // PTA12
   \   00000044   0x....             LDR.N    R0,??DataTable8_15  ;; 0x40049030
   \   00000046   0xF44F 0x61E0      MOV      R1,#+1792
   \   0000004A   0x6001             STR      R1,[R0, #+0]
    946                      PORT_PCR_REG(PORTA_BASE_PTR, 13) = PORT_PCR_MUX(7);  // PTA13
   \   0000004C   0x....             LDR.N    R0,??DataTable8_16  ;; 0x40049034
   \   0000004E   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000052   0x6001             STR      R1,[R0, #+0]
    947                  }
    948                  else if(FTM1_CH0==PTB0 && FTM1_CH1==PTB1)
    949                  {
    950                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
    951                      PORT_PCR_REG(PORTB_BASE_PTR, 0) = PORT_PCR_MUX(6);  // PTB0
    952                      PORT_PCR_REG(PORTB_BASE_PTR, 1) = PORT_PCR_MUX(6);  // PTB1
    953                  }
    954                  else
    955                  {
    956                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    957                  }
    958                  break;
   \   00000054   0xE014             B.N      ??FTM_QUAD_init_4
    959                  
    960              case FTM2:
    961                  SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;                           //使能FTM2时钟
   \                     ??FTM_QUAD_init_2:
   \   00000056   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40048030
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000005E   0x....             LDR.N    R1,??DataTable8_4  ;; 0x40048030
   \   00000060   0x6008             STR      R0,[R1, #+0]
    962          #if K60PIN == 144u          
    963                  if(FTM2_CH0==PTA10 && FTM2_CH1==PTA11)
    964                  {
    965                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    966                      PORT_PCR_REG(PORTA_BASE_PTR, 10) = PORT_PCR_MUX(6);  // PTA10
    967                      PORT_PCR_REG(PORTA_BASE_PTR, 11) = PORT_PCR_MUX(6);  // PTA11
    968                  }
    969                  else 
    970          #endif        
    971                  if(FTM2_CH0==PTB18 && FTM2_CH1==PTB19)
    972                  {
    973                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \   00000062   0x....             LDR.N    R0,??DataTable8_6  ;; 0x40048038
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000006A   0x....             LDR.N    R1,??DataTable8_6  ;; 0x40048038
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    974                      PORT_PCR_REG(PORTB_BASE_PTR, 18) = PORT_PCR_MUX(6);  // PTB18
   \   0000006E   0x....             LDR.N    R0,??DataTable8_17  ;; 0x4004a048
   \   00000070   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000074   0x6001             STR      R1,[R0, #+0]
    975                      PORT_PCR_REG(PORTB_BASE_PTR, 19) = PORT_PCR_MUX(6);  // PTB19
   \   00000076   0x....             LDR.N    R0,??DataTable8_18  ;; 0x4004a04c
   \   00000078   0xF44F 0x61C0      MOV      R1,#+1536
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    976                  }
    977                  else
    978                  {
    979                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    980                  }
    981                  break;
   \   0000007E   0xE7FF             B.N      ??FTM_QUAD_init_4
    982            default:
    983                  break;
    984              }
    985              FTM_MODE_REG(FTMx[ftmn])    |= FTM_MODE_WPDIS_MASK;           //写保护禁止
   \                     ??FTM_QUAD_init_3:
   \                     ??FTM_QUAD_init_4:
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x....             LDR.N    R0,??DataTable8_5
   \   00000084   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000088   0x6D40             LDR      R0,[R0, #+84]
   \   0000008A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x....             LDR.N    R1,??DataTable8_5
   \   00000092   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000096   0x6548             STR      R0,[R1, #+84]
    986              FTM_QDCTRL_REG(FTMx[ftmn])  &= ~FTM_QDCTRL_QUADMODE_MASK;     //AB 正交解码模式
   \   00000098   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009A   0x....             LDR.N    R0,??DataTable8_5
   \   0000009C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000A0   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000A4   0xF030 0x0008      BICS     R0,R0,#0x8
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0x....             LDR.N    R1,??DataTable8_5
   \   000000AC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B0   0xF8C1 0x0080      STR      R0,[R1, #+128]
    987              FTM_CNTIN_REG(FTMx[ftmn])    = 0;                             //FTM计数器初始值为0
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0x....             LDR.N    R0,??DataTable8_5
   \   000000B8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x64C1             STR      R1,[R0, #+76]
    988              FTM_MOD_REG(FTMx[ftmn])      = 0xFFFF;                        //FTM计数器初始值为0
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x....             LDR.N    R0,??DataTable8_5
   \   000000C4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000C8   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000CC   0x6081             STR      R1,[R0, #+8]
    989             
    990              FTM_QDCTRL_REG(FTMx[ftmn])  |=FTM_QDCTRL_QUADEN_MASK;         //使能FTM2正交解码模式
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0x....             LDR.N    R0,??DataTable8_5
   \   000000D2   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000D6   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000DA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x....             LDR.N    R1,??DataTable8_5
   \   000000E2   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000E6   0xF8C1 0x0080      STR      R0,[R1, #+128]
    991              FTM_MODE_REG(FTMx[ftmn])    |= FTM_MODE_FTMEN_MASK;                             //FTM2EN=1	
   \   000000EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EC   0x....             LDR.N    R0,??DataTable8_5
   \   000000EE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F2   0x6D40             LDR      R0,[R0, #+84]
   \   000000F4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FA   0x....             LDR.N    R1,??DataTable8_5
   \   000000FC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000100   0x6548             STR      R0,[R1, #+84]
    992              FTM_CNT_REG(FTMx[ftmn])    = 0; 	
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x....             LDR.N    R0,??DataTable8_5
   \   00000106   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x6041             STR      R1,[R0, #+4]
    993          }
   \   0000010E   0xBD10             POP      {R4,PC}          ;; return
    994          
    995          /*
    996          ************************************************************************
    997          *  函数名称：FTM_irq_EN
    998          *  功能说明：开FTM中断
    999          *  参数说明：FTM       模块号（FTM0~FTM2）
   1000          *  函数返回：无
   1001          *  修改时间：2012-3-20
   1002          *  备    注：
   1003          ************************************************************************
   1004          */

   \                                 In section .text, align 2, keep-with-next
   1005          void FTM_irq_EN(FTMn ftmn)
   1006          {
   \                     FTM_irq_EN:
   \   00000000   0xB580             PUSH     {R7,LR}
   1007              //bit6:TOIE   0 Disable TOF interrupts. Use software polling.
   1008                          //1 Enable TOF interrupts. An interrupt is generated when TOF equals one.
   1009              FTM_SC_REG(FTMx[ftmn])   |= FTM_SC_TOIE_MASK;     //开放FTM中断
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable8_5
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable8_5
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x6011             STR      R1,[R2, #+0]
   1010              enable_irq(ftmn+ 62);			      //开中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x303E             ADDS     R0,R0,#+62
   \   0000001E   0x.... 0x....      BL       enable_irq
   1011          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
   1012          
   1013          
   1014          /*
   1015          ************************************************************************
   1016          *  函数名称：FTM_irq_DIS
   1017          *  功能说明：关FTM中断
   1018          *  参数说明：FTM       模块号（FTM0~FTM2）
   1019          *  函数返回：无
   1020          *  修改时间：2012-3-20
   1021          *  备    注：
   1022          ************************************************************************
   1023          */

   \                                 In section .text, align 2, keep-with-next
   1024          void FTM_irq_DIS(FTMn ftmn)
   1025          {
   \                     FTM_irq_DIS:
   \   00000000   0xB580             PUSH     {R7,LR}
   1026              //bit6:TOIE   0 Disable TOF interrupts. Use software polling.
   1027                          //1 Enable TOF interrupts. An interrupt is generated when TOF equals one.
   1028              FTM_SC_REG(FTMx[ftmn])   &= ~FTM_SC_TOIE_MASK;     //关放FTM中断
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable8_5
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF031 0x0140      BICS     R1,R1,#0x40
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable8_5
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x6011             STR      R1,[R2, #+0]
   1029              disable_irq(ftmn+ 62);			       //关中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x303E             ADDS     R0,R0,#+62
   \   0000001E   0x.... 0x....      BL       disable_irq
   1030          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     `?<Constant "FTM\\306\\265\\302\\312\\305\\344\\326\\30`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     FTMx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     `?<Constant "\\313\\371\\305\\344\\325\\274\\277\\325\\2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     `?<Constant "FTM\\315\\250\\265\\300\\311\\350\\326\\30`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x........         DC32     `?<Constant "FTM\\325\\375\\275\\273\\267\\275\\317\\36`

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 0D1H
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0xD1    
   \   00000020   0xEE 0xCF          DC8 0EEH, 0CFH, 0F2H, 0BEH, 0FCH, 0B5H, 0C4H, 4BH
   \              0xF2 0xBE    
   \              0xFC 0xB5    
   \              0xC4 0x4B    
   \   00000028   0x36 0x30          DC8 36H, 30H, 0C4H, 0A3H, 0B0H, 0E5H, 5FH, 0D6H
   \              0xC4 0xA3    
   \              0xB0 0xE5    
   \              0x5F 0xD6    
   \   00000030   0xBB 0xD3          DC8 0BBH, 0D3H, 0D0H, 0BBH, 0F9H, 0B1H, 0BEH, 49H
   \              0xD0 0xBB    
   \              0xF9 0xB1    
   \              0xBE 0x49    
   \   00000038   0x4F 0xB2          DC8 4FH, 0B2H, 0D9H, 0D7H, 0F7H, 5CH, 73H, 72H
   \              0xD9 0xD7    
   \              0xF7 0x5C    
   \              0x73 0x72    
   \   00000040   0x63 0x5C          DC8 63H, 5CH, 64H, 72H, 69H, 76H, 65H, 72H
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \   00000048   0x73 0x5C          DC8 73H, 5CH, 46H, 54H, 4DH, 5CH, 46H, 54H
   \              0x46 0x54    
   \              0x4D 0x5C    
   \              0x46 0x54    
   \   00000050   0x4D 0x2E          DC8 4DH, 2EH, 63H, 0
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FTM\\306\\265\\302\\312\\305\\344\\326\\30`:
   \   00000000   0x46 0x54          DC8 "FTM\306\265\302\312\305\344\326\303\264\355\316\363"
   \              0x4D 0xC6    
   \              0xB5 0xC2    
   \              0xCA 0xC5    
   \              0xE4 0xD6    
   \              0xC3 0xB4    
   \              0xED 0xCE    
   \              0xF3 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\313\\371\\305\\344\\325\\274\\277\\325\\2`:
   \   00000000   0xCB 0xF9          DC8 "\313\371\305\344\325\274\277\325\261\310\263\254\271\375100%"
   \              0xC5 0xE4    
   \              0xD5 0xBC    
   \              0xBF 0xD5    
   \              0xB1 0xC8    
   \              0xB3 0xAC    
   \              0xB9 0xFD    
   \              0x31 0x30    
   \              0x30 0x25    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FTM\\315\\250\\265\\300\\311\\350\\326\\30`:
   \   00000000   0x46 0x54          DC8 "FTM\315\250\265\300\311\350\326\303\264\355\316\363"
   \              0x4D 0xCD    
   \              0xA8 0xB5    
   \              0xC0 0xC9    
   \              0xE8 0xD6    
   \              0xC3 0xB4    
   \              0xED 0xCE    
   \              0xF3 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FTM\\325\\375\\275\\273\\267\\275\\317\\36`:
   \   00000000   0x46 0x54          DC8 "FTM\325\375\275\273\267\275\317\362\274\306\312\375\315\250\265\300\311\350\326\303\264\355\316\363"
   \              0x4D 0xD5    
   \              0xFD 0xBD    
   \              0xBB 0xB7    
   \              0xBD 0xCF    
   \              0xF2 0xBC    
   \              0xC6 0xCA    
   \              0xFD 0xCD    
   \              0xA8 0xB5    
   \              0xC0 0xC9    
   \              0xE8 0xD6    
   \              0xC3 0xB4    
   \              0xED 0xCE    
   \              0xF3 0x00    
   1031          
   1032          
   1033          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  FTM_Input_init
             16 -> assert_failed_rst
             16 -> enable_irq
       16  FTM_PWM_Duty
             16 -> assert_failed
             16 -> assert_failed_rst
       24  FTM_PWM_freq
             24 -> assert_failed
             24 -> assert_failed_rst
       24  FTM_PWM_init
             24 -> assert_failed
             24 -> assert_failed_rst
        8  FTM_QUAD_DIR_init
              8 -> assert_failed_rst
        8  FTM_QUAD_init
              8 -> assert_failed_rst
       24  FTM_init
             24 -> assert_failed
             24 -> assert_failed_rst
        8  FTM_irq_DIS
              8 -> disable_irq
        8  FTM_irq_EN
              8 -> enable_irq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      84  ?<Constant "C:\\Users\\Administrato...">
      16  ?<Constant "FTM\306\265\302\312\305\344\326\30
      16  ?<Constant "FTM\315\250\265\300\311\350\326\30
      28  ?<Constant "FTM\325\375\275\273\267\275\317\36
      20  ?<Constant "\313\371\305\344\325\274\277\325\2
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     870  FTM_Input_init
     114  FTM_PWM_Duty
     290  FTM_PWM_freq
     792  FTM_PWM_init
     272  FTM_QUAD_DIR_init
     272  FTM_QUAD_init
     332  FTM_init
      36  FTM_irq_DIS
      36  FTM_irq_EN
      12  FTMx

 
    12 bytes in section .data
   164 bytes in section .rodata
 3 102 bytes in section .text
 
 3 102 bytes of CODE  memory
   164 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: none
