###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:47:34 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\projects\SX_demo\main.c                        #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\projects\SX_demo\main.c -lCN                   #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\SX_demo\..\ -I                     #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\common\ -I                 #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\cpu\ -I                    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ -I                #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\gpio\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\wdog\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\mcg\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\uart\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\lptmr\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\LED\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\fun\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\FTM\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\pit\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\DIPswitch\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\steer\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ccd\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\dma\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\motor\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\platforms\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\SX_demo\ -Ol      #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\main.lst                  #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\main.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\projects\SX_demo\main.c
      1          /*******************************************************************************
      2                                        北京邮电大学 K60 学习例程
      3          【例程名称】北京邮电大学摄像头组例程
      4          【Designed】snowwolf
      5          【E-mail  】snowwolf2012@qq.com
      6          【软件版本】V1.0
      7          【最后更新】2012年3月24日
      8          ------------------------------------------------
      9          【dev.env.】IAR 6.3
     10          【Target  】K60X256
     11          【Crystal 】50.000Mhz
     12          【busclock】48.000MHz
     13          【pllclock】96.000MHz   
     14          【 说  明 】仅做内部学习使用，请勿外传
     15          【 参  考 】野火嵌入式开发工作室
     16                      龙丘开发例程
     17                      苏州大学《嵌入式系统原理与实践》
     18          
     19          接口说明：
     20                    拨码开关：PA14    PA16    PA17   PA5
     21                    舵机    ：PA12    PA13
     22                    电机    ：PC1     PC2     PC3     PC4
     23                    行中断  ：PB18
     24                    场中断  ：PB19
     25                    Y0-Y7   : PD0-PD7  (数字摄像头or外部AD数据线)
     26                    PLCK    ：PB9    (需要用DMA的才要接这一个信号，PLCK经过4分频后接PB9)
     27                              我是用HD74LS161AP做的分频电路
     28                    串口    ：PB16  PB17  波特率 115200  收不到信号可以把收发反转一个
     29                    编码器  ：PC5
     30          需要修改主频的到 k60_bupt.h里修改  使用DMA建议到200M内核 100Mbus
     31          ********************************************************************************/	
     32          
     33          
     34          #include "common.h"
     35          #include "include.h"
     36          
     37          

   \                                 In section .text, align 4, keep-with-next
     38          void main()
     39          {
   \                     main:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     40            DisableInterrupts;  
   \   00000002   0xB672             CPSID i         
     41            
     42            uartPrintf("北京邮电大学摄像头组例程\n");
   \   00000004   0x4859             LDR.N    R0,??main_0
   \   00000006   0x.... 0x....      BL       uartPrintf
     43            
     44            gpio_init  (PORTA,15,GPO,HIGH);         //核心板测试LED，初始化 PTA15 ：输出高电平 ,即 初始化 LED0，灭
   \   0000000A   0x2301             MOVS     R3,#+1
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x210F             MOVS     R1,#+15
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       gpio_init
     45            gpio_init  (PORTA,4,GPO,HIGH);          //主板测试LED    初始化 PTA4 ： 输出高电平 ,即 初始化 LED0，灭
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x2104             MOVS     R1,#+4
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       gpio_init
     46            
     47            
     48            //初始化拨码开关
     49            DIPswitch_ctrl();
   \   00000022   0x.... 0x....      BL       DIPswitch_ctrl
     50            //初始化舵机
     51            steer_init();
   \   00000026   0x.... 0x....      BL       steer_init
     52            //电机初始化
     53            motor_init();
   \   0000002A   0x.... 0x....      BL       motor_init
     54            //摄像头初始化
     55            CCD_init();
   \   0000002E   0x.... 0x....      BL       CCD_init
     56            
     57            //初始化PIT   100Hz  
     58            pit_init(PIT0,100); 
   \   00000032   0x2164             MOVS     R1,#+100
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       pit_init
     59            //使能PIT  测试时关闭  程序正常运行时使能
     60            //除实验六七外都需要关闭使能
     61            //PIT_IRQ_EN(PIT0);
     62            //gpio_init(PORTD,0,GPO,0);   //用于测试PIT
     63            
     64            //初始化外部测速  接PC5   第二个参数用65535 否则计数提前清零 这是一个16位计数器
     65            lptmr_counter_init(LPT0_ALT2,65535,2,LPT_Rising);   
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x2202             MOVS     R2,#+2
   \   0000003E   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x.... 0x....      BL       lptmr_counter_init
     66            //打开串口中断
     67            UART_IRQ_EN(UART0); 
   \   00000048   0x4849             LDR.N    R0,??main_0+0x4
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004E   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000052   0x4947             LDR.N    R1,??main_0+0x4
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x70C8             STRB     R0,[R1, #+3]
   \   00000058   0x202D             MOVS     R0,#+45
   \   0000005A   0x.... 0x....      BL       enable_irq
     68            EnableInterrupts;    
   \   0000005E   0xB662             CPSIE i         
     69            while(1)
     70            {
     71          //以下 “1”表示打开当前测试程序，“0表示关闭”
     72          //实验0
     73          #if 0           //测试主板     测试结果： 成功
     74                          //核心板和主板上各有一个LED闪烁，频率1Hz
     75                          GPIO_TURN(PORTA,15);
     76                          GPIO_TURN(PORTA,4);
     77                          delayms(500);
     78          //实验一
     79          #elif 0           //测试拨码开关     测试结果： 成功
     80                          //操作把 PA14    PA15    PA16    PA17 接在拨码开关电路上（主板上是设计好的就是这几个引脚）
     81                          uartPrintf("切换拔码开关观看效果\n");
     82                          DIPswitch_ctrl();
     83                          delayms(1000);
     84          //实验二
     85          #elif 0         //测试舵机        测试结果： 成功
     86                          //操作  将PA12    PA13 接在示波器上，看波型  目前左右极限是200 - 5000 即1% -- 50%
     87                          //100Hz
     88                          u32 i = 0;
     89                          
     90                          //在 i = 0 和 i = 5500 时不在安全范围内应该不反应
     91                          //占空比每一秒加5%
     92                          for(i = 0;i<10500;i+=100)
     93                          {
     94                            uartPrintf("当前占空比 %d %%\n",i*100/FTM_PRECISON);
     95                            PWMSetSteer(i) ; 
     96          #if STEER_DOUBLE
     97                            PWMSetSteer1(i) ;
     98          #endif
     99                            delayms(2000);
    100                          }
    101                          
    102          //实验三
    103          #elif 0         //测试电机        测试结果：成功
    104                          //操作  将 PC1     PC2     PC3     PC4 接在示波器上，看波型
    105                          int i = 0;
    106                          //占空比每一秒加5%
    107                          //范围 0%-100%
    108                          //小于 0 是 PC2 PC4是有波型 PC1 PC3为0电平
    109                          //大于 0 是 PC1 PC3是有波型 PC2 PC4为0电平
    110                          for(i = -5000;i<5000;i+=500)
    111                          {
    112                            uartPrintf("当前占空比 %d %%\n",abs(i)*100/FTM_PRECISON);
    113          #if MOTOR_DOUBLE
    114                            PWMSetMotor2(i,i);  
    115          #else
    116                            PWMSetMotor(i);  
    117          #endif            
    118                            delayms(2000);
    119                          }
    120          //实验四
    121          #elif 0         //测试中断法取图像  测试结果
    122          #ifdef CCD_DMA
    123                #error "这里是中断法采集图像，请注释掉 CCD_DMA!"            
    124          #endif
    125                          
    126          
    127                          while(1)
    128                          {
    129                          uint32 tick0 = 0,tick1 = 0;	
    130                          uartPrintf("\n输入 s  开始采集一幅图像\n");   
    131                          if( (showChoice & 0x01) )
    132                           {
    133                              uartPrintf("\n开始采集一幅图像\n");   
    134                          
    135                              PIT_RELOAD(PIT0,100); 
    136                              tick0 = GET_PITCNTus(PIT0);
    137                              WritePicTest();WritePicTest();
    138                              WritePicTest();WritePicTest();
    139                              WritePicTest();WritePicTest();
    140                              WritePicTest();WritePicTest();
    141                              WritePicTest();WritePicTest();
    142                              
    143                              tick1 = GET_PITCNTus(PIT0);        
    144                              uartPrintf("\n图像数据遍历10遍 用时：%d us\n",tick0 - tick1);
    145                             
    146                              PIT_RELOAD(PIT0,1); 
    147                              tick0 = GET_PITCNTus(PIT0);
    148                              GetPhoto();    //这个函数里有开中断操作
    149                              tick1 = GET_PITCNTus(PIT0);        
    150                              uartPrintf("\n采集到一幅图像 用时：%d us\n",tick0 - tick1);
    151                              
    152                              PIT_RELOAD(PIT0,100); 
    153                              tick0 = GET_PITCNTus(PIT0);
    154                              GetBlackLine() ;
    155                              tick1 = GET_PITCNTus(PIT0);  
    156                              uartPrintf("\n处理一幅图像 用时：%d us\n",tick0 - tick1);
    157                              
    158                              ShowPhoto();
    159                              
    160                              
    161                              WritePicBlack();
    162                              
    163                              //SendCenterLine3(Line_Center_L, Line_Center, Line_Center_R);
    164                              
    165                              showChoice &= 0xFE;//采集结束
    166                              delayms(1000);
    167                          }//end of if
    168                           water_lights();
    169                          delayms(1000);
    170                          }
    171                          
    172          //实验五
    173          #elif 1         //测试DMA法取图像  测试结果                
    174          #ifndef CCD_DMA
    175                #error "这里是DMA法采集图像，请定义 CCD_DMA!"            
    176          #endif
    177          extern u32 picLineSum;
    178                          while(1)
    179                          {
    180                          uint32 tick0 = 0,tick1 = 0;	
   \                     ??main_1:
   \   00000060   0x2400             MOVS     R4,#+0
   \   00000062   0x2500             MOVS     R5,#+0
    181                          uartPrintf("\n输入 s  开始采集一幅图像\n");   
   \   00000064   0x4843             LDR.N    R0,??main_0+0x8
   \   00000066   0x.... 0x....      BL       uartPrintf
    182                          if( (showChoice & 0x01) )
   \   0000006A   0x4843             LDR.N    R0,??main_0+0xC
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x07C0             LSLS     R0,R0,#+31
   \   00000070   0xD575             BPL.N    ??main_2
    183                           {
    184                              uartPrintf("\n开始采集一幅图像\n");   
   \   00000072   0x4842             LDR.N    R0,??main_0+0x10
   \   00000074   0x.... 0x....      BL       uartPrintf
    185                          /*
    186                              PIT_RELOAD(PIT0,100); 
    187                              tick0 = GET_PITCNTus(PIT0);
    188                              WritePicTest();WritePicTest();
    189                              WritePicTest();WritePicTest();
    190                              WritePicTest();WritePicTest();
    191                              WritePicTest();WritePicTest();
    192                              WritePicTest();WritePicTest();
    193                              
    194                              tick1 = GET_PITCNTus(PIT0);        
    195                              uartPrintf("\n图像数据遍历10遍 用时：%d us\n",tick0 - tick1);
    196                           */  
    197                              PIT_RELOAD(PIT0,1); 
   \   00000078   0x4841             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x0840             LSRS     R0,R0,#+1
   \   0000007E   0x0040             LSLS     R0,R0,#+1
   \   00000080   0x493F             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   00000082   0x6008             STR      R0,[R1, #+0]
   \   00000084   0x483F             LDR.N    R0,??main_0+0x18
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008C   0x4348             MULS     R0,R1,R0
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000094   0x1E40             SUBS     R0,R0,#+1
   \   00000096   0x493C             LDR.N    R1,??main_0+0x1C  ;; 0x40037100
   \   00000098   0x6008             STR      R0,[R1, #+0]
   \   0000009A   0x4839             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A2   0x4937             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    198                              tick0 = GET_PITCNTus(PIT0);
   \   000000A6   0x4837             LDR.N    R0,??main_0+0x18
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF44F 0x717A      MOV      R1,#+1000
   \   000000AE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000B2   0x4936             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xFBB1 0xF4F0      UDIV     R4,R1,R0
    199                              GetPhoto();    //这个函数里有开中断操作
   \   000000BA   0x.... 0x....      BL       GetPhoto
    200                              tick1 = GET_PITCNTus(PIT0);        
   \   000000BE   0x4831             LDR.N    R0,??main_0+0x18
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xF44F 0x717A      MOV      R1,#+1000
   \   000000C6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000CA   0x4930             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   000000CC   0x6809             LDR      R1,[R1, #+0]
   \   000000CE   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    201                              uartPrintf("\n采集到一幅图像 用时：%d us\n",tick0 - tick1);
   \   000000D2   0x1B61             SUBS     R1,R4,R5
   \   000000D4   0x482E             LDR.N    R0,??main_0+0x24
   \   000000D6   0x.... 0x....      BL       uartPrintf
    202                              
    203                              PIT_RELOAD(PIT0,100); 
   \   000000DA   0x4829             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x0840             LSRS     R0,R0,#+1
   \   000000E0   0x0040             LSLS     R0,R0,#+1
   \   000000E2   0x4927             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   000000E4   0x6008             STR      R0,[R1, #+0]
   \   000000E6   0x4827             LDR.N    R0,??main_0+0x18
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF44F 0x717A      MOV      R1,#+1000
   \   000000EE   0x4348             MULS     R0,R1,R0
   \   000000F0   0x2164             MOVS     R1,#+100
   \   000000F2   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000F6   0x1E40             SUBS     R0,R0,#+1
   \   000000F8   0x4923             LDR.N    R1,??main_0+0x1C  ;; 0x40037100
   \   000000FA   0x6008             STR      R0,[R1, #+0]
   \   000000FC   0x4820             LDR.N    R0,??main_0+0x14  ;; 0x40037108
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000104   0x491E             LDR.N    R1,??main_0+0x14  ;; 0x40037108
   \   00000106   0x6008             STR      R0,[R1, #+0]
    204                              tick0 = GET_PITCNTus(PIT0);
   \   00000108   0x481E             LDR.N    R0,??main_0+0x18
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000110   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000114   0x491D             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   00000116   0x6809             LDR      R1,[R1, #+0]
   \   00000118   0xFBB1 0xF4F0      UDIV     R4,R1,R0
    205                              GetBlackLine() ;
   \   0000011C   0x.... 0x....      BL       GetBlackLine
    206                              tick1 = GET_PITCNTus(PIT0);  
   \   00000120   0x4818             LDR.N    R0,??main_0+0x18
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0xF44F 0x717A      MOV      R1,#+1000
   \   00000128   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000012C   0x4917             LDR.N    R1,??main_0+0x20  ;; 0x40037104
   \   0000012E   0x6809             LDR      R1,[R1, #+0]
   \   00000130   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    207                              uartPrintf("\n处理一幅图像 用时：%d us\n",tick0 - tick1);
   \   00000134   0x1B61             SUBS     R1,R4,R5
   \   00000136   0x4817             LDR.N    R0,??main_0+0x28
   \   00000138   0x.... 0x....      BL       uartPrintf
    208                              
    209                              uartPrintf("\n行：%d \n",picLineSum); 
   \   0000013C   0x4816             LDR.N    R0,??main_0+0x2C
   \   0000013E   0x6801             LDR      R1,[R0, #+0]
   \   00000140   0x4816             LDR.N    R0,??main_0+0x30
   \   00000142   0x.... 0x....      BL       uartPrintf
    210                              ShowPhoto();
   \   00000146   0x.... 0x....      BL       ShowPhoto
    211                              
    212                              //WritePicBlack();
    213                              
    214                              //SendCenterLine3(Line_Center_L, Line_Center, Line_Center_R);
    215                              
    216                              showChoice &= 0xFE;//采集结束
   \   0000014A   0x480B             LDR.N    R0,??main_0+0xC
   \   0000014C   0x7800             LDRB     R0,[R0, #+0]
   \   0000014E   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000152   0x4909             LDR.N    R1,??main_0+0xC
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    217                              delayms(1000);
   \   00000156   0xF44F 0x707A      MOV      R0,#+1000
   \   0000015A   0x.... 0x....      BL       delayms
    218                          }//end of if
    219                           water_lights();
   \                     ??main_2:
   \   0000015E   0x.... 0x....      BL       water_lights
    220                          
    221                          delayms(1000);
   \   00000162   0xF44F 0x707A      MOV      R0,#+1000
   \   00000166   0x.... 0x....      BL       delayms
   \   0000016A   0xE779             B.N      ??main_1
   \                     ??main_0:
   \   0000016C   0x........         DC32     `?<Constant "\\261\\261\\276\\251\\323\\312\\265\\347\\2`
   \   00000170   0x........         DC32     UARTx
   \   00000174   0x........         DC32     `?<Constant "\\n\\312\\344\\310\\353 s  \\277\\252\\312`
   \   00000178   0x........         DC32     showChoice
   \   0000017C   0x........         DC32     `?<Constant "\\n\\277\\252\\312\\274\\262\\311\\274\\257`
   \   00000180   0x40037108         DC32     0x40037108
   \   00000184   0x........         DC32     bus_clk_khz
   \   00000188   0x40037100         DC32     0x40037100
   \   0000018C   0x40037104         DC32     0x40037104
   \   00000190   0x........         DC32     `?<Constant "\\n\\262\\311\\274\\257\\265\\275\\322\\273`
   \   00000194   0x........         DC32     `?<Constant "\\n\\264\\246\\300\\355\\322\\273\\267\\371`
   \   00000198   0x........         DC32     picLineSum
   \   0000019C   0x........         DC32     `?<Constant "\\n\\320\\320\\243\\272%d \\n">`
    222                          }
    223                          
    224          //实验六
    225          #elif 0         //测试PIT       测试结果： 成功  
    226                            // 操作 :从初始化部分打开中断
    227                                   //设置PD0输出可以看到有一个650Hz的方波 说明PIT1300Hz正常
    228                                   
    229                          
    230          //实验七               
    231          #elif 0         //测试外部测速   测试结果:  成功
    232                          //从初始化部分打开中断
    233                          //用 PWM 模拟编码器  将 PC1 与PC5短接
    234                          int i = 0;  
    235                          for(i = 1;i<60;i+=4)
    236                          {
    237                            FTM_PWM_freq(MOTOR_FTMN,i*1000) ;
    238                            FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0, 5000);
    239                            delayms(1000); 
    240                            uartPrintf("当前PWM波频率%7dHz ",i*1000); 
    241                            uartPrintf("10ms读取脉冲(速度):%4d个\n",trueSpeed); 
    242                       
    243                          }
    244          //实验八
    245          #elif 0         //中断法读串口数据  测试结果 
    246                          //直接输入看效果
    247          #endif    
    248              
    249            }
    250          }

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\261\\261\\276\\251\\323\\312\\265\\347\\2`:
   \   00000000   0xB1 0xB1          DC8 "\261\261\276\251\323\312\265\347\264\363\321\247\311\343\317\361\315\267\327\351\300\375\263\314\012"
   \              0xBE 0xA9    
   \              0xD3 0xCA    
   \              0xB5 0xE7    
   \              0xB4 0xF3    
   \              0xD1 0xA7    
   \              0xC9 0xE3    
   \              0xCF 0xF1    
   \              0xCD 0xB7    
   \              0xD7 0xE9    
   \              0xC0 0xFD    
   \              0xB3 0xCC    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\312\\344\\310\\353 s  \\277\\252\\312`:
   \   00000000   0x0A 0xCA          DC8 "\012\312\344\310\353 s  \277\252\312\274\262\311\274\257\322\273\267\371\315\274\317\361\012"
   \              0xE4 0xC8    
   \              0xEB 0x20    
   \              0x73 0x20    
   \              0x20 0xBF    
   \              0xAA 0xCA    
   \              0xBC 0xB2    
   \              0xC9 0xBC    
   \              0xAF 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\277\\252\\312\\274\\262\\311\\274\\257`:
   \   00000000   0x0A 0xBF          DC8 "\012\277\252\312\274\262\311\274\257\322\273\267\371\315\274\317\361\012"
   \              0xAA 0xCA    
   \              0xBC 0xB2    
   \              0xC9 0xBC    
   \              0xAF 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\262\\311\\274\\257\\265\\275\\322\\273`:
   \   00000000   0x0A 0xB2          DC8 "\012\262\311\274\257\265\275\322\273\267\371\315\274\317\361 \323\303\312\261\243\272%d us\012"
   \              0xC9 0xBC    
   \              0xAF 0xB5    
   \              0xBD 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x20    
   \              0xD3 0xC3    
   \              0xCA 0xB1    
   \              0xA3 0xBA    
   \              0x25 0x64    
   \              0x20 0x75    
   \              0x73 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\264\\246\\300\\355\\322\\273\\267\\371`:
   \   00000000   0x0A 0xB4          DC8 "\012\264\246\300\355\322\273\267\371\315\274\317\361 \323\303\312\261\243\272%d us\012"
   \              0xA6 0xC0    
   \              0xED 0xD2    
   \              0xBB 0xB7    
   \              0xF9 0xCD    
   \              0xBC 0xCF    
   \              0xF1 0x20    
   \              0xD3 0xC3    
   \              0xCA 0xB1    
   \              0xA3 0xBA    
   \              0x25 0x64    
   \              0x20 0x75    
   \              0x73 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\320\\320\\243\\272%d \\n">`:
   \   00000000   0x0A 0xD0          DC8 "\012\320\320\243\272%d \012"
   \              0xD0 0xA3    
   \              0xBA 0x25    
   \              0x64 0x20    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  main
             16 -> CCD_init
             16 -> DIPswitch_ctrl
             16 -> GetBlackLine
             16 -> GetPhoto
             16 -> ShowPhoto
             16 -> delayms
             16 -> enable_irq
             16 -> gpio_init
             16 -> lptmr_counter_init
             16 -> motor_init
             16 -> pit_init
             16 -> steer_init
             16 -> uartPrintf
             16 -> water_lights


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "\261\261\276\251\323\312\265\347\2
      32  ?<Constant "\n\262\311\274\257\265\275\322\273
      28  ?<Constant "\n\264\246\300\355\322\273\267\371
      20  ?<Constant "\n\277\252\312\274\262\311\274\257
      28  ?<Constant "\n\312\344\310\353 s  \277\252\312
      12  ?<Constant "\n\320\320\243\272%d \n">
     416  main

 
 148 bytes in section .rodata
 416 bytes in section .text
 
 416 bytes of CODE  memory
 148 bytes of CONST memory

Errors: none
Warnings: none
