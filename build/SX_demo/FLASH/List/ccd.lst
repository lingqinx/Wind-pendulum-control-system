###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:47:32 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\ccd\ccd.c                              #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\ccd\ccd.c -lCN                         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\SX_demo\..\ -I                     #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\common\ -I                 #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\cpu\ -I                    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ -I                #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\gpio\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\wdog\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\mcg\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\uart\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\lptmr\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\LED\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\fun\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\FTM\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\pit\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\DIPswitch\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\steer\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ccd\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\dma\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\motor\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\platforms\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\SX_demo\ -Ol      #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ccd.lst                   #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\ccd.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\drivers\ccd\ccd.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[ccd.c] 
      5          * 描  述 ：摄像头驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：摄像头驱动函数
      9          ***********************************************************************
     10          */
     11          #include "common.h"
     12          #include "ccd.h"
     13          #include "uart.h"
     14          #include "global.h"
     15          #include "fun.h"
     16          
     17          #define  printp         uartPrintf
     18          #define  myprintf       uartPrintf
     19          #define  myprintfno     uartPrintf
     20          
     21          
     22          /*************************************************************************
     23          *  函数名称：LED_init
     24          *  功能说明：初始化LED端口，设置IO口为输出方向
     25          *  参数说明：无
     26          *  函数返回：无
     27          *  修改时间：2012-2-2   已测试
     28          *  备    注：
     29          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     30          void    CCD_init(void)
     31          {
   \                     CCD_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     32              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     33              ASSERT_RST((CCD0 == 0 || CCD0 == 8 || CCD0 == 16 || CCD0 == 24),"CCD 管脚定义错误，CCD0为0 or 8or 16 or 24");
     34              ASSERT_RST((CCD0 == CCD ),"CCD 管脚定义错误，CCD0为必须与宏定义CCD一致");
     35             /*
     36              gpio_init(CCD_PORT,CCD0,GPI_DOWN,0);
     37              gpio_init(CCD_PORT,CCD1,GPI_DOWN,0);
     38              gpio_init(CCD_PORT,CCD2,GPI_DOWN,0);
     39              gpio_init(CCD_PORT,CCD3,GPI_DOWN,0);
     40              gpio_init(CCD_PORT,CCD4,GPI_DOWN,0);
     41              gpio_init(CCD_PORT,CCD5,GPI_DOWN,0);
     42              gpio_init(CCD_PORT,CCD6,GPI_DOWN,0);
     43              gpio_init(CCD_PORT,CCD7,GPI_DOWN,0);
     44            */  
     45              gpio_init(CCD_PORT,CCD0,GPI,0);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x.... 0x....      BL       gpio_init
     46              gpio_init(CCD_PORT,CCD1,GPI,0);
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x.... 0x....      BL       gpio_init
     47              gpio_init(CCD_PORT,CCD2,GPI,0);
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2102             MOVS     R1,#+2
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x.... 0x....      BL       gpio_init
     48              gpio_init(CCD_PORT,CCD3,GPI,0);
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x2103             MOVS     R1,#+3
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x.... 0x....      BL       gpio_init
     49              gpio_init(CCD_PORT,CCD4,GPI,0);
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x.... 0x....      BL       gpio_init
     50              gpio_init(CCD_PORT,CCD5,GPI,0);
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2105             MOVS     R1,#+5
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x.... 0x....      BL       gpio_init
     51              gpio_init(CCD_PORT,CCD6,GPI,0);
   \   0000004E   0x2300             MOVS     R3,#+0
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x2106             MOVS     R1,#+6
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0x.... 0x....      BL       gpio_init
     52              gpio_init(CCD_PORT,CCD7,GPI,0);
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x2107             MOVS     R1,#+7
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0x.... 0x....      BL       gpio_init
     53              
     54              //行中断
     55              FTM_Input_init(CCD_FTM,CCD_HR_CH,Rising);              //初始化FTM输入捕捉模式，上升沿触发
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x.... 0x....      BL       FTM_Input_init
     56              //场中断
     57              FTM_Input_init(CCD_FTM,CCD_VS_CH,Falling);             //初始化FTM输入捕捉模式，下降沿触发
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0x.... 0x....      BL       FTM_Input_init
     58              //关行场中断
     59              Dis_CCD;
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000007E   0x6880             LDR      R0,[R0, #+8]
   \   00000080   0x6940             LDR      R0,[R0, #+20]
   \   00000082   0xF030 0x0040      BICS     R0,R0,#0x40
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   0000008A   0x6889             LDR      R1,[R1, #+8]
   \   0000008C   0x6148             STR      R0,[R1, #+20]
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000092   0x6880             LDR      R0,[R0, #+8]
   \   00000094   0x68C0             LDR      R0,[R0, #+12]
   \   00000096   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   0000009E   0x6889             LDR      R1,[R1, #+8]
   \   000000A0   0x60C8             STR      R0,[R1, #+12]
     60              
     61          #ifdef CCD_DMA
     62              DMA_PORTx2BUFF_Init (CCD_DMA_CH,(void *)&CCD_DATA,&Pic_Buffer[0][0],PLCK_CH,DMA_BYTE1,COLUMN,DMA_rising);//DMA_falling DMA_rising
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x9002             STR      R0,[SP, #+8]
   \   000000A6   0x20A0             MOVS     R0,#+160
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x9000             STR      R0,[SP, #+0]
   \   000000AE   0x2329             MOVS     R3,#+41
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable8_7
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   000000B8   0x68C0             LDR      R0,[R0, #+12]
   \   000000BA   0xF110 0x0110      ADDS     R1,R0,#+16
   \   000000BE   0x2004             MOVS     R0,#+4
   \   000000C0   0x.... 0x....      BL       DMA_PORTx2BUFF_Init
     63              //DMA通道4初始化，PTA27上升沿触发DMA传输，源地址为PTD_BYTE0_IN，目的地址为：BUFF ，每次传输1Byte，传输3次后停止传输，恢复目的地址   
     64              /* 开启中断 */
     65              //DMA_EN(CCD_DMA_CH);                                    //使能通道CHn 硬件请求
     66              //DMA_IRQ_EN(CCD_DMA_CH);                                //允许DMA通道传输 
     67              DMA_IRQ_CLEAN(CCD_DMA_CH);
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable8_9  ;; 0x40008024
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable8_9  ;; 0x40008024
   \   000000D2   0x6008             STR      R0,[R1, #+0]
     68          #endif
     69              
     70              for(i = 0;i<ROW;i++)
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x0004             MOVS     R4,R0
   \   000000D8   0xE005             B.N      ??CCD_init_0
     71                 Line_Center[i] = COLUMN/2;
   \                     ??CCD_init_1:
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   000000DE   0x2150             MOVS     R1,#+80
   \   000000E0   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   000000E4   0x1C64             ADDS     R4,R4,#+1
   \                     ??CCD_init_0:
   \   000000E6   0x2C78             CMP      R4,#+120
   \   000000E8   0xDBF7             BLT.N    ??CCD_init_1
     72              
     73              for(i = 0;i<ROW;i++)
   \   000000EA   0x2400             MOVS     R4,#+0
   \   000000EC   0xE005             B.N      ??CCD_init_2
     74                 Line_Center_L[i] = COLUMN_START;
   \                     ??CCD_init_3:
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable8_11
   \   000000F2   0x2101             MOVS     R1,#+1
   \   000000F4   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   000000F8   0x1C64             ADDS     R4,R4,#+1
   \                     ??CCD_init_2:
   \   000000FA   0x2C78             CMP      R4,#+120
   \   000000FC   0xDBF7             BLT.N    ??CCD_init_3
     75              
     76              for(i = 0;i<ROW;i++)
   \   000000FE   0x2400             MOVS     R4,#+0
   \   00000100   0xE005             B.N      ??CCD_init_4
     77                 Line_Center_R[i] = COLUMN_END;
   \                     ??CCD_init_5:
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable8_12
   \   00000106   0x219B             MOVS     R1,#+155
   \   00000108   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   0000010C   0x1C64             ADDS     R4,R4,#+1
   \                     ??CCD_init_4:
   \   0000010E   0x2C78             CMP      R4,#+120
   \   00000110   0xDBF7             BLT.N    ??CCD_init_5
     78              
     79          }
   \   00000112   0xBD1F             POP      {R0-R4,PC}       ;; return
     80          /***************************************************
     81          ** 函数名称: WritePicBlack
     82          ** 功能描述: 以 * 表示黑色输出图像
     83          ** 入口：
     84          ** 出口：
     85          ** 说明: 调试用，看取到的图像   
     86          ****************************************************/ 

   \                                 In section .text, align 2, keep-with-next
     87          void WritePicBlack()
     88          {
   \                     WritePicBlack:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     89               unsigned int rows = 0, cols = 0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
     90               for(rows = 1;rows < ROW;rows++)
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xE003             B.N      ??WritePicBlack_0
     91               {
     92                   myprintf("%2d",rows);
     93                   for(cols = 0;cols < COLUMN;cols++)
     94                   {
     95                      if(Pic_Buffer[rows][cols] < PhotoBlackMax)
     96                           myprintfno("*");
     97                      else
     98                           myprintfno(" ");
     99                   }
    100                   myprintf("\n");
   \                     ??WritePicBlack_1:
   \   0000000C   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   0000000E   0x.... 0x....      BL       uartPrintf
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \                     ??WritePicBlack_0:
   \   00000014   0x2C78             CMP      R4,#+120
   \   00000016   0xD21A             BCS.N    ??WritePicBlack_2
   \   00000018   0x0021             MOVS     R1,R4
   \   0000001A   0x....             ADR.N    R0,??DataTable6_1  ;; "%2d"
   \   0000001C   0x.... 0x....      BL       uartPrintf
   \   00000020   0x2500             MOVS     R5,#+0
   \   00000022   0xE003             B.N      ??WritePicBlack_3
   \                     ??WritePicBlack_4:
   \   00000024   0x....             ADR.N    R0,??DataTable6_2  ;; " "
   \   00000026   0x.... 0x....      BL       uartPrintf
   \                     ??WritePicBlack_5:
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??WritePicBlack_3:
   \   0000002C   0x2DA0             CMP      R5,#+160
   \   0000002E   0xD2ED             BCS.N    ??WritePicBlack_1
   \   00000030   0x20A0             MOVS     R0,#+160
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   00000036   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000003A   0x5C28             LDRB     R0,[R5, R0]
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable8_13
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD2EE             BCS.N    ??WritePicBlack_4
   \   00000046   0x....             ADR.N    R0,??DataTable6_3  ;; "*"
   \   00000048   0x.... 0x....      BL       uartPrintf
   \   0000004C   0xE7ED             B.N      ??WritePicBlack_5
    101               }
    102               myprintf("\n");
   \                     ??WritePicBlack_2:
   \   0000004E   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000050   0x.... 0x....      BL       uartPrintf
    103               
    104          }
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    105          
    106          /***************************************************
    107          ** 函数名称: WritePicTest
    108          ** 功能描述: 遍历图像数据  用于测试时间
    109          ** 入口：
    110          ** 出口：
    111          ** 说明: 
    112          ****************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    113          void WritePicTest()
    114          {
    115               unsigned int rows = 0, cols = 0;
   \                     WritePicTest:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x2100             MOVS     R1,#+0
    116               for(rows = 0;rows < ROW;rows++)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x0010             MOVS     R0,R2
   \   00000008   0xE00A             B.N      ??WritePicTest_0
    117               {
    118                   for(cols = 0;cols < COLUMN;cols++)
    119                   {
    120                      Pic_Buffer[rows][cols]=0;
   \                     ??WritePicTest_1:
   \   0000000A   0x22A0             MOVS     R2,#+160
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   00000010   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x548B             STRB     R3,[R1, R2]
    121                   }
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \                     ??WritePicTest_2:
   \   0000001A   0x29A0             CMP      R1,#+160
   \   0000001C   0xD3F5             BCC.N    ??WritePicTest_1
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \                     ??WritePicTest_0:
   \   00000020   0x2878             CMP      R0,#+120
   \   00000022   0xD201             BCS.N    ??WritePicTest_3
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0xE7F8             B.N      ??WritePicTest_2
    122               }
    123               
    124          }
   \                     ??WritePicTest_3:
   \   00000028   0x4770             BX       LR               ;; return
    125          
    126          /*
    127          ***************************************************************** 
    128          ** 函数名称: ShowPhoto
    129          ** 功能描述: 画出一幅图画
    130          ** 输    入: 无 
    131          ** 输    出: 无 
    132          ** 说明：  
    133          *****************************************************************
    134          */

   \                                 In section .text, align 2, keep-with-next
    135          void ShowPhoto()
    136          {
   \                     ShowPhoto:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    137              u16 i,j;
    138              for(i=0;i<ROW;i++) 
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE003             B.N      ??ShowPhoto_0
    139                { 
    140                  for(j=0;j<COLUMN;j++)
    141                  {
    142                       uart0Printf("%d",Pic_Buffer[i][j]);
    143                       if(j != COLUMN -1)
    144                           uart0Printf(",");
    145          #if TEST != 8             
    146                       if(!(showChoice & 0x01)) 
    147                           return;
    148          #endif
    149                  }         
    150                  uart0Printf("\n");
   \                     ??ShowPhoto_1:
   \   00000006   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000008   0x.... 0x....      BL       uart0Printf
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
   \                     ??ShowPhoto_0:
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x2C78             CMP      R4,#+120
   \   00000012   0xD21C             BCS.N    ??ShowPhoto_2
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0xE000             B.N      ??ShowPhoto_3
   \                     ??ShowPhoto_4:
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ShowPhoto_3:
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x2DA0             CMP      R5,#+160
   \   0000001E   0xD2F2             BCS.N    ??ShowPhoto_1
   \   00000020   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0x20A0             MOVS     R0,#+160
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   0000002A   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000002E   0x5C29             LDRB     R1,[R5, R0]
   \   00000030   0x....             ADR.N    R0,??DataTable6_4  ;; 0x25, 0x64, 0x00, 0x00
   \   00000032   0x.... 0x....      BL       uart0Printf
   \   00000036   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000038   0x2D9F             CMP      R5,#+159
   \   0000003A   0xD002             BEQ.N    ??ShowPhoto_5
   \   0000003C   0x....             ADR.N    R0,??DataTable6_5  ;; ","
   \   0000003E   0x.... 0x....      BL       uart0Printf
   \                     ??ShowPhoto_5:
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable8_14
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x07C0             LSLS     R0,R0,#+31
   \   0000004A   0xD4E5             BMI.N    ??ShowPhoto_4
   \   0000004C   0xE00E             B.N      ??ShowPhoto_6
    151              }
    152              uart0Printf("\n"); 
   \                     ??ShowPhoto_2:
   \   0000004E   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000050   0x.... 0x....      BL       uart0Printf
    153              uart0Printf("\n"); 
   \   00000054   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000056   0x.... 0x....      BL       uart0Printf
    154              uart0Printf("\n"); 
   \   0000005A   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   0000005C   0x.... 0x....      BL       uart0Printf
    155              uart0Printf("\n"); 
   \   00000060   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000062   0x.... 0x....      BL       uart0Printf
    156              uart0Printf("\n");
   \   00000066   0x....             ADR.N    R0,??DataTable6  ;; "\n"
   \   00000068   0x.... 0x....      BL       uart0Printf
    157             
    158          }
   \                     ??ShowPhoto_6:
   \   0000006C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    159          
    160          
    161          /*
    162          **************************************************
    163          ** 函数名称：void GetPhoto()
    164          ** 功能描述：图像提取
    165          **  参  数 ：无
    166          ** 返 回 值：无
    167          **  说  明 ：提取一幅图像到全局数组变量 Pic_Buffer 中 
    168          **************************************************
    169          */

   \                                 In section .text, align 2, keep-with-next
    170          void GetPhoto() 
    171          {
    172              photeCompleteFlag = 0;
   \                     GetPhoto:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
    173              Clr_CCDF;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x6D00             LDR      R0,[R0, #+80]
   \   00000010   0x0840             LSRS     R0,R0,#+1
   \   00000012   0x0040             LSLS     R0,R0,#+1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   00000018   0x6889             LDR      R1,[R1, #+8]
   \   0000001A   0x6508             STR      R0,[R1, #+80]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000020   0x6880             LDR      R0,[R0, #+8]
   \   00000022   0x6D00             LDR      R0,[R0, #+80]
   \   00000024   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   0000002C   0x6889             LDR      R1,[R1, #+8]
   \   0000002E   0x6508             STR      R0,[R1, #+80]
    174              En_VSYNC;
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000034   0x6880             LDR      R0,[R0, #+8]
   \   00000036   0x6940             LDR      R0,[R0, #+20]
   \   00000038   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   00000040   0x6889             LDR      R1,[R1, #+8]
   \   00000042   0x6148             STR      R0,[R1, #+20]
    175              while(!photeCompleteFlag);
   \                     ??GetPhoto_0:
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD0FA             BEQ.N    ??GetPhoto_0
    176              Dis_CCD;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x6940             LDR      R0,[R0, #+20]
   \   00000056   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   0000005E   0x6889             LDR      R1,[R1, #+8]
   \   00000060   0x6148             STR      R0,[R1, #+20]
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0x68C0             LDR      R0,[R0, #+12]
   \   0000006A   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   00000072   0x6889             LDR      R1,[R1, #+8]
   \   00000074   0x60C8             STR      R0,[R1, #+12]
    177              photeCompleteFlag = 0;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    178          }
   \   0000007E   0x4770             BX       LR               ;; return
    179          
    180          
    181          
    182          
    183          /*
    184          **************************************************
    185          * 函数名称: OptimizeCenterLine
    186          * 功能描述: 路线滤波(优化) 
    187          * 入口：
    188          * 出口：
    189          * 说明: 前后取中值 
    190          ***************************************************
    191          */

   \                                 In section .text, align 2, keep-with-next
    192          void  OptimizeCenterLine()
    193          {
   \                     OptimizeCenterLine:
   \   00000000   0xB510             PUSH     {R4,LR}
    194                unsigned char i = 0; 
   \   00000002   0x2400             MOVS     R4,#+0
    195                Line_Center[ROW-1] = get_mid(Line_Center[ROW-2],Line_Center[ROW-3],Line_Center[ROW-4]);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000008   0xF8D0 0x21D0      LDR      R2,[R0, #+464]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000010   0xF8D0 0x11D4      LDR      R1,[R0, #+468]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000018   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \   0000001C   0x.... 0x....      BL       get_mid
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_10
   \   00000024   0xF8C1 0x01DC      STR      R0,[R1, #+476]
    196                for(i = ROW -2 ;i > 1;i--)
   \   00000028   0x2076             MOVS     R0,#+118
   \   0000002A   0x0004             MOVS     R4,R0
   \   0000002C   0xE019             B.N      ??OptimizeCenterLine_0
    197                {
    198                    Line_Center[i] = get_mid(Line_Center[i - 1],Line_Center[i],Line_Center[i + 1]);
   \                     ??OptimizeCenterLine_1:
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000034   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000038   0x6842             LDR      R2,[R0, #+4]
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000040   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   0000004A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000004E   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000052   0x.... 0x....      BL       get_mid
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable8_10
   \   0000005C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    199                }
   \   00000060   0x1E64             SUBS     R4,R4,#+1
   \                     ??OptimizeCenterLine_0:
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x2C02             CMP      R4,#+2
   \   00000066   0xD2E2             BCS.N    ??OptimizeCenterLine_1
    200                //Line_Center[EndLine] = get_mid(Line_Center[EndLine],Line_Center[EndLine + 1],Line_Center[EndLine + 2]);
    201          }
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    202          
    203          /*
    204          ********************************************************************
    205          * 函数名称: void ImproveSingleRow
    206          *           (unsigned char irows, unsigned char llimit, unsigned char rlimit, unsigned imp)
    207          * 功能描述: 提高单行图像质量（除噪加提高对比度） 
    208          * 入口：所在列irow  左右限llimit, rlimit(能取到) ,提高比imp (放大20倍)
    209          * 出口：
    210          * 说明: 对异常点取其左，右，上的平均 
    211          ********************************************************************
    212          */

   \                                 In section .text, align 2, keep-with-next
    213          void ImproveSingleRow(unsigned int irows, unsigned int llimit, unsigned int rlimit)
    214          {
   \                     ImproveSingleRow:
   \   00000000   0xB470             PUSH     {R4-R6}
    215               unsigned int icol = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    216               unsigned int j = 0,sum = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
    217               
    218               if(llimit < COLUMN_START)
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD100             BNE.N    ??ImproveSingleRow_0
    219                  llimit = COLUMN_START;
   \   0000000C   0x2101             MOVS     R1,#+1
    220               if(rlimit > COLUMN_END)
   \                     ??ImproveSingleRow_0:
   \   0000000E   0x2A9C             CMP      R2,#+156
   \   00000010   0xD305             BCC.N    ??ImproveSingleRow_1
    221                  rlimit = llimit < COLUMN_END;
   \   00000012   0x299B             CMP      R1,#+155
   \   00000014   0xD201             BCS.N    ??ImproveSingleRow_2
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0xE000             B.N      ??ImproveSingleRow_3
   \                     ??ImproveSingleRow_2:
   \   0000001A   0x2200             MOVS     R2,#+0
   \                     ??ImproveSingleRow_3:
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
    222               
    223               for(icol = llimit;icol < rlimit + 1;icol++)
   \                     ??ImproveSingleRow_1:
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0xE059             B.N      ??ImproveSingleRow_4
    224               {
    225                   //去除极黑极白点 
    226                   if(Pic_Buffer[irows][icol] < 20 || Pic_Buffer[irows][icol] > 235)
   \                     ??ImproveSingleRow_5:
   \   00000022   0x21A0             MOVS     R1,#+160
   \   00000024   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   00000028   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   0000002C   0x5C59             LDRB     R1,[R3, R1]
   \   0000002E   0x3914             SUBS     R1,R1,#+20
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x29D8             CMP      R1,#+216
   \   00000034   0xD34E             BCC.N    ??ImproveSingleRow_6
    227                   {
    228                       j = 0,sum = 0;
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0x2500             MOVS     R5,#+0
    229                       if(Pic_Buffer[irows][icol - 1] > 20 && Pic_Buffer[irows][icol - 1] < 235)
   \   0000003A   0x21A0             MOVS     R1,#+160
   \   0000003C   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   00000040   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   00000044   0x1859             ADDS     R1,R3,R1
   \   00000046   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000004A   0x3915             SUBS     R1,R1,#+21
   \   0000004C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004E   0x29D6             CMP      R1,#+214
   \   00000050   0xD20A             BCS.N    ??ImproveSingleRow_7
    230                           sum += Pic_Buffer[irows][icol - 1],j++;
   \   00000052   0x21A0             MOVS     R1,#+160
   \   00000054   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   00000058   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   0000005C   0x1859             ADDS     R1,R3,R1
   \   0000005E   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000062   0xFA55 0xF581      UXTAB    R5,R5,R1
   \   00000066   0x1C64             ADDS     R4,R4,#+1
    231                       if(Pic_Buffer[irows][icol + 1] > 20 && Pic_Buffer[irows][icol + 1] < 235)
   \                     ??ImproveSingleRow_7:
   \   00000068   0x21A0             MOVS     R1,#+160
   \   0000006A   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   0000006E   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   00000072   0x1859             ADDS     R1,R3,R1
   \   00000074   0x7849             LDRB     R1,[R1, #+1]
   \   00000076   0x3915             SUBS     R1,R1,#+21
   \   00000078   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007A   0x29D6             CMP      R1,#+214
   \   0000007C   0xD209             BCS.N    ??ImproveSingleRow_8
    232                           sum += Pic_Buffer[irows][icol + 1],j++;
   \   0000007E   0x21A0             MOVS     R1,#+160
   \   00000080   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   00000084   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   00000088   0x1859             ADDS     R1,R3,R1
   \   0000008A   0x7849             LDRB     R1,[R1, #+1]
   \   0000008C   0xFA55 0xF581      UXTAB    R5,R5,R1
   \   00000090   0x1C64             ADDS     R4,R4,#+1
    233                       if(Pic_Buffer[irows - 1][icol] > 20 && Pic_Buffer[irows - 1][icol] < 235)
   \                     ??ImproveSingleRow_8:
   \   00000092   0x21A0             MOVS     R1,#+160
   \   00000094   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   00000098   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   0000009C   0x1859             ADDS     R1,R3,R1
   \   0000009E   0xF811 0x1CA0      LDRB     R1,[R1, #-160]
   \   000000A2   0x3915             SUBS     R1,R1,#+21
   \   000000A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A6   0x29D6             CMP      R1,#+214
   \   000000A8   0xD20A             BCS.N    ??ImproveSingleRow_9
    234                           sum += Pic_Buffer[irows - 1][icol],j++;
   \   000000AA   0x21A0             MOVS     R1,#+160
   \   000000AC   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   000000B0   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   000000B4   0x1859             ADDS     R1,R3,R1
   \   000000B6   0xF811 0x1CA0      LDRB     R1,[R1, #-160]
   \   000000BA   0xFA55 0xF581      UXTAB    R5,R5,R1
   \   000000BE   0x1C64             ADDS     R4,R4,#+1
    235                           
    236                       if(j > 0)
   \                     ??ImproveSingleRow_9:
   \   000000C0   0x2C00             CMP      R4,#+0
   \   000000C2   0xD007             BEQ.N    ??ImproveSingleRow_6
    237                           Pic_Buffer[irows][icol] = sum/j;
   \   000000C4   0xFBB5 0xF1F4      UDIV     R1,R5,R4
   \   000000C8   0x24A0             MOVS     R4,#+160
   \   000000CA   0x.... 0x....      LDR.W    R5,??DataTable8_7
   \   000000CE   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   000000D2   0x5519             STRB     R1,[R3, R4]
    238                   }
    239               }
   \                     ??ImproveSingleRow_6:
   \   000000D4   0x1C5B             ADDS     R3,R3,#+1
   \                     ??ImproveSingleRow_4:
   \   000000D6   0x1C51             ADDS     R1,R2,#+1
   \   000000D8   0x428B             CMP      R3,R1
   \   000000DA   0xD3A2             BCC.N    ??ImproveSingleRow_5
    240          }//end of void ImproveSingleRow(unsigned char irows, unsigned char llimit, unsigned char rlimit, unsigned imp)
   \   000000DC   0xBC70             POP      {R4-R6}
   \   000000DE   0x4770             BX       LR               ;; return
    241          
    242          /*
    243          **************************************************
    244          * 函数名称: void GetBlackLine() 
    245          * 功能描述: 取得黑线 
    246          * 入口：
    247          * 出口：
    248          * 说明: 
    249          ***************************************************
    250          */
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void GetBlackLine() 
    253          {
   \                     GetBlackLine:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    254                unsigned int gcol = 0,grow = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2700             MOVS     R7,#+0
    255                unsigned int left = 0,right = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
    256                unsigned int LlLimit = 0,LrLimit = 0,RlLimit = 0,RrLimit = 0;
   \   0000000C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x9300             STR      R3,[SP, #+0]
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0x2400             MOVS     R4,#+0
    257                unsigned int lFindFlag = 0,rFindFlag = 0;
   \   00000018   0xF05F 0x0B00      MOVS     R11,#+0
   \   0000001C   0xF05F 0x0800      MOVS     R8,#+0
    258                unsigned int lLost = 0,rLost = 0;
   \   00000020   0xF05F 0x0900      MOVS     R9,#+0
   \   00000024   0x2500             MOVS     R5,#+0
    259          #if G_PRINT
    260                int temp0 = 0,temp1 = 0;
    261          #endif
    262                grow = ROW-1;
   \   00000026   0x2377             MOVS     R3,#+119
   \   00000028   0x001F             MOVS     R7,R3
    263                left = COLUMN_START;
   \   0000002A   0x2301             MOVS     R3,#+1
   \   0000002C   0x0018             MOVS     R0,R3
    264                right = COLUMN_END;
   \   0000002E   0x239B             MOVS     R3,#+155
   \   00000030   0x001A             MOVS     R2,R3
    265                
    266                LrLimit = COLUMN/2;
   \   00000032   0x2350             MOVS     R3,#+80
   \   00000034   0x9300             STR      R3,[SP, #+0]
    267                LlLimit = COLUMN_START;
   \   00000036   0x2301             MOVS     R3,#+1
   \   00000038   0x469A             MOV      R10,R3
    268                
    269                RlLimit = COLUMN/2;
   \   0000003A   0x2350             MOVS     R3,#+80
   \   0000003C   0x001E             MOVS     R6,R3
    270                RrLimit = COLUMN_END;
   \   0000003E   0x239B             MOVS     R3,#+155
   \   00000040   0x001C             MOVS     R4,R3
    271                
    272                Line_Center_L[grow] = left;
   \   00000042   0x....             LDR.N    R3,??DataTable8_11
   \   00000044   0xF843 0x0027      STR      R0,[R3, R7, LSL #+2]
    273                Line_Center_R[grow] = right;
   \   00000048   0x....             LDR.N    R0,??DataTable8_12
   \   0000004A   0xF840 0x2027      STR      R2,[R0, R7, LSL #+2]
   \   0000004E   0xE00E             B.N      ??GetBlackLine_0
    274                while(grow > 0)
    275                {
    276          #if G_PRINT
    277                     printp("--------------------------------------------------------------------------row = %d\n",grow);
    278          #endif
    279                    lFindFlag = 0;
    280                    rFindFlag = 0;
    281          #if G_PRINT
    282                    printp("LEFT: %d-%d \n",LlLimit,LrLimit);
    283          #endif  
    284                    ImproveSingleRow(grow, LlLimit, LrLimit+5);
    285                    for(gcol = LrLimit;gcol>= LlLimit;gcol--)
    286                    {
    287          #if G_PRINT
    288                        temp0 = (Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3);
    289                        temp1 = (Pic_Buffer[grow][gcol+3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3);
    290                        printp("%3d********************************(%3d - %3d = %4d)\n",gcol+1,temp0,temp1,temp0-temp1);
    291          #endif              
    292                        if((Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3 + THRESHOLD) < (Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3))
    293                        {
    294          #if G_PRINT
    295                             printp("left:\n%4d%4d%4d%4d%4d%4d\n",Pic_Buffer[grow][gcol],Pic_Buffer[grow][gcol+1],Pic_Buffer[grow][gcol+2],Pic_Buffer[grow][gcol+3],Pic_Buffer[grow][gcol+4],Pic_Buffer[grow][gcol+5]);
    296                             printp("%d - %d = -%d\n",(Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3),(Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3),(Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3)-(Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3));
    297          #endif
    298                             left = gcol + 1;
    299                             Line_Center_L[grow] = left;
    300                             
    301                             if(left + SEARCHWITHDEN < COLUMN_END)
    302                                 LrLimit = left + SEARCHWITHDEN;
    303                             else
    304                                 LrLimit = COLUMN_END; 
    305                                 
    306                             if(COLUMN_START + SEARCHWITHDDIS < left)
    307                                 LlLimit = left - SEARCHWITHDDIS;
    308                             else
    309                                 LlLimit = COLUMN_START;
    310                                 
    311                                 
    312                             lFindFlag = 1;
    313                             lLost = 0;
    314          #if G_PRINT
    315                             printp("left = %d\n",left);
    316          #endif 
    317                             break;
    318                        }
    319                    }
    320          #if G_PRINT
    321                    printp("RIGHT: %d-%d \n",RlLimit,RrLimit);
    322          #endif           
    323                    ImproveSingleRow(grow, RlLimit - 5, RrLimit);
    324                    for(gcol = RlLimit-5;gcol<= RrLimit-5;gcol++)
    325                    {
    326          #if G_PRINT
    327                        temp0 = (Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3);
    328                        temp1 = (Pic_Buffer[grow][gcol+3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3);
    329                        printp("%3d********************************(%3d - %3d = %4d)\n",gcol+1,temp0,temp1,temp0-temp1);
    330          #endif 
    331                        if((Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3) > (Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3  + THRESHOLD))
    332                        {
    333          #if G_PRINT
    334                             printp("right:\n%4d%4d%4d%4d%4d%4d\n",Pic_Buffer[grow][gcol],Pic_Buffer[grow][gcol+1],Pic_Buffer[grow][gcol+2],Pic_Buffer[grow][gcol+3],Pic_Buffer[grow][gcol+4],Pic_Buffer[grow][gcol+5]);
    335                             printp("%d - %d = %d\n",(Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3),(Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3),(Pic_Buffer[grow][gcol]/3 + Pic_Buffer[grow][gcol + 1]/3 + Pic_Buffer[grow][gcol + 2]/3)-(Pic_Buffer[grow][gcol + 3]/3 + Pic_Buffer[grow][gcol + 4]/3 + Pic_Buffer[grow][gcol + 5]/3));
    336          #endif
    337                             right = gcol + 4;
    338                             Line_Center_R[grow] = right;
    339                             
    340                             if(COLUMN_START + SEARCHWITHDEN < right)
    341                                 RlLimit = right - SEARCHWITHDEN;
    342                             else
    343                                 RlLimit = COLUMN_END; 
    344                                 
    345                             if(right + SEARCHWITHDDIS < COLUMN_END)
    346                                 RrLimit = right + SEARCHWITHDDIS;
    347                             else
    348                                 RrLimit = COLUMN_END;
    349                                 
    350                             rFindFlag = 1; 
    351                             rLost = 0;
    352          #if G_PRINT
    353                             printp("*RIGHT: %d-%d \n",RlLimit,RrLimit);
    354                             printp("right = %d\n",right);
    355          #endif
    356                             
    357                             break;
    358                        }
    359                    }
    360          #if G_PRINT
    361                     printp("lFindFlag = %d   ",lFindFlag);
    362                     printp("rFindFlag = %d \n",rFindFlag);
    363                     printp("lLost = %d   ",lLost);
    364                     printp("rLost = %d \n",rLost);
    365          #endif          
    366                    if(lFindFlag == 0 && grow < ROW - 1)
    367                    {
    368                        left = Line_Center_L[grow + 1];
    369                        Line_Center_L[grow] = left;
    370                        lLost++;
    371                        if(lLost > 5)
    372                        {
    373          #if G_PRINT
    374                        printp("left迷失超过5次扩展搜索范围\n");
    375          #endif
    376                             if(left + SEARCHWITHDEXT < COLUMN_END)
    377                                 LrLimit = left + SEARCHWITHDEXT;
    378                             else
    379                                 LrLimit = COLUMN_END; 
    380                                 
    381                             if(COLUMN_START + SEARCHWITHDEXT/2 < left)
    382                                 LlLimit = left - SEARCHWITHDEXT/2;
    383                             else
    384                                 LlLimit = COLUMN_START; 
    385                             //if(Line_Center_L[grow] < COLUMN_END && lLost % 2 == 0)
    386                             //    Line_Center_L[grow]++;
    387                        }
    388                          
    389          #if G_PRINT
    390                        printp("left未找到，取前一个点\n");
    391          #endif        
    392                    }
    393                    
    394                    if(rFindFlag == 0 && grow < ROW - 1)
    395                    {
    396                        right = Line_Center_R[grow + 1];
    397                        Line_Center_R[grow] = right;
    398                        rLost++;
    399                        if(rLost > 5)
    400                        {
    401          #if G_PRINT
    402                             printp("right迷失超过5次扩展搜索范围\n");
    403          #endif
    404                             if(right + SEARCHWITHDEXT/2 < COLUMN_END)
    405                                 RrLimit = right + SEARCHWITHDEXT/2;
    406                             else
    407                                 RrLimit = COLUMN_END; 
    408                                 
    409                             if(COLUMN_START + SEARCHWITHDEXT < right)
    410                                 RlLimit = right - SEARCHWITHDEXT;
    411                             else
    412                                 RlLimit = COLUMN_START;
   \                     ??GetBlackLine_1:
   \   00000050   0x2601             MOVS     R6,#+1
    413                                
    414                             //if(Line_Center_R[grow] > COLUMN_START && rLost % 2 == 0)    
    415                             //    Line_Center_R[grow]--;
    416                        }
    417          #if G_PRINT
    418                        printp("right未找到，取前一个点\n");
    419          #endif        
    420                    }
    421          #if G_PRINT
    422                        printp("**************************************************(%3d--%3d)\n",Line_Center_L[grow],Line_Center_R[grow]);
    423          #endif          
    424                    Line_Center[grow] = (Line_Center_L[grow] + Line_Center_R[grow])/2;
   \                     ??GetBlackLine_2:
   \   00000052   0x....             LDR.N    R0,??DataTable8_11
   \   00000054   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \   00000058   0x....             LDR.N    R1,??DataTable8_12
   \   0000005A   0xF851 0x1027      LDR      R1,[R1, R7, LSL #+2]
   \   0000005E   0x1808             ADDS     R0,R1,R0
   \   00000060   0x2102             MOVS     R1,#+2
   \   00000062   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000066   0x....             LDR.N    R1,??DataTable8_10
   \   00000068   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
    425                    grow--;
   \   0000006C   0x1E7F             SUBS     R7,R7,#+1
   \                     ??GetBlackLine_0:
   \   0000006E   0x2F00             CMP      R7,#+0
   \   00000070   0xF000 0x8108      BEQ.W    ??GetBlackLine_3
   \   00000074   0xF05F 0x0B00      MOVS     R11,#+0
   \   00000078   0xF05F 0x0800      MOVS     R8,#+0
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x1D42             ADDS     R2,R0,#+5
   \   00000080   0x4651             MOV      R1,R10
   \   00000082   0x0038             MOVS     R0,R7
   \   00000084   0x.... 0x....      BL       ImproveSingleRow
   \   00000088   0x9900             LDR      R1,[SP, #+0]
   \   0000008A   0xE000             B.N      ??GetBlackLine_4
   \                     ??GetBlackLine_5:
   \   0000008C   0x1E49             SUBS     R1,R1,#+1
   \                     ??GetBlackLine_4:
   \   0000008E   0x4551             CMP      R1,R10
   \   00000090   0xD358             BCC.N    ??GetBlackLine_6
   \   00000092   0x20A0             MOVS     R0,#+160
   \   00000094   0x....             LDR.N    R2,??DataTable8_7
   \   00000096   0xFB00 0x2007      MLA      R0,R0,R7,R2
   \   0000009A   0x1808             ADDS     R0,R1,R0
   \   0000009C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000009E   0x2203             MOVS     R2,#+3
   \   000000A0   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   000000A4   0x22A0             MOVS     R2,#+160
   \   000000A6   0x....             LDR.N    R3,??DataTable8_7
   \   000000A8   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   000000AC   0x188A             ADDS     R2,R1,R2
   \   000000AE   0x7912             LDRB     R2,[R2, #+4]
   \   000000B0   0x2303             MOVS     R3,#+3
   \   000000B2   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000B6   0x1810             ADDS     R0,R2,R0
   \   000000B8   0x22A0             MOVS     R2,#+160
   \   000000BA   0x....             LDR.N    R3,??DataTable8_7
   \   000000BC   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   000000C0   0x188A             ADDS     R2,R1,R2
   \   000000C2   0x7952             LDRB     R2,[R2, #+5]
   \   000000C4   0x2303             MOVS     R3,#+3
   \   000000C6   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000CA   0x1810             ADDS     R0,R2,R0
   \   000000CC   0x22A0             MOVS     R2,#+160
   \   000000CE   0x....             LDR.N    R3,??DataTable8_7
   \   000000D0   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   000000D4   0x5C8A             LDRB     R2,[R1, R2]
   \   000000D6   0x2303             MOVS     R3,#+3
   \   000000D8   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000DC   0x23A0             MOVS     R3,#+160
   \   000000DE   0x.... 0x....      LDR.W    R12,??DataTable8_7
   \   000000E2   0xFB03 0xC307      MLA      R3,R3,R7,R12
   \   000000E6   0x18CB             ADDS     R3,R1,R3
   \   000000E8   0x785B             LDRB     R3,[R3, #+1]
   \   000000EA   0xF05F 0x0C03      MOVS     R12,#+3
   \   000000EE   0xFB93 0xF3FC      SDIV     R3,R3,R12
   \   000000F2   0x189A             ADDS     R2,R3,R2
   \   000000F4   0x23A0             MOVS     R3,#+160
   \   000000F6   0x.... 0x....      LDR.W    R12,??DataTable8_7
   \   000000FA   0xFB03 0xC307      MLA      R3,R3,R7,R12
   \   000000FE   0x18CB             ADDS     R3,R1,R3
   \   00000100   0x789B             LDRB     R3,[R3, #+2]
   \   00000102   0xF05F 0x0C03      MOVS     R12,#+3
   \   00000106   0xFB93 0xF3FC      SDIV     R3,R3,R12
   \   0000010A   0x189A             ADDS     R2,R3,R2
   \   0000010C   0x322D             ADDS     R2,R2,#+45
   \   0000010E   0x4282             CMP      R2,R0
   \   00000110   0xDABC             BGE.N    ??GetBlackLine_5
   \   00000112   0x1C48             ADDS     R0,R1,#+1
   \   00000114   0x....             LDR.N    R1,??DataTable8_11
   \   00000116   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
   \   0000011A   0xF110 0x010C      ADDS     R1,R0,#+12
   \   0000011E   0x299B             CMP      R1,#+155
   \   00000120   0xD203             BCS.N    ??GetBlackLine_7
   \   00000122   0xF110 0x010C      ADDS     R1,R0,#+12
   \   00000126   0x9100             STR      R1,[SP, #+0]
   \   00000128   0xE001             B.N      ??GetBlackLine_8
   \                     ??GetBlackLine_7:
   \   0000012A   0x219B             MOVS     R1,#+155
   \   0000012C   0x9100             STR      R1,[SP, #+0]
   \                     ??GetBlackLine_8:
   \   0000012E   0x2808             CMP      R0,#+8
   \   00000130   0xD302             BCC.N    ??GetBlackLine_9
   \   00000132   0xF1B0 0x0A06      SUBS     R10,R0,#+6
   \   00000136   0xE001             B.N      ??GetBlackLine_10
   \                     ??GetBlackLine_9:
   \   00000138   0xF05F 0x0A01      MOVS     R10,#+1
   \                     ??GetBlackLine_10:
   \   0000013C   0xF05F 0x0B01      MOVS     R11,#+1
   \   00000140   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??GetBlackLine_6:
   \   00000144   0x0022             MOVS     R2,R4
   \   00000146   0x1F71             SUBS     R1,R6,#+5
   \   00000148   0x0038             MOVS     R0,R7
   \   0000014A   0x.... 0x....      BL       ImproveSingleRow
   \   0000014E   0x1F71             SUBS     R1,R6,#+5
   \   00000150   0xE000             B.N      ??GetBlackLine_11
   \                     ??GetBlackLine_12:
   \   00000152   0x1C49             ADDS     R1,R1,#+1
   \                     ??GetBlackLine_11:
   \   00000154   0x1F60             SUBS     R0,R4,#+5
   \   00000156   0x4288             CMP      R0,R1
   \   00000158   0xD352             BCC.N    ??GetBlackLine_13
   \   0000015A   0x20A0             MOVS     R0,#+160
   \   0000015C   0x....             LDR.N    R2,??DataTable8_7
   \   0000015E   0xFB00 0x2007      MLA      R0,R0,R7,R2
   \   00000162   0x5C08             LDRB     R0,[R1, R0]
   \   00000164   0x2203             MOVS     R2,#+3
   \   00000166   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000016A   0x22A0             MOVS     R2,#+160
   \   0000016C   0x....             LDR.N    R3,??DataTable8_7
   \   0000016E   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   00000172   0x188A             ADDS     R2,R1,R2
   \   00000174   0x7852             LDRB     R2,[R2, #+1]
   \   00000176   0x2303             MOVS     R3,#+3
   \   00000178   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000017C   0x1810             ADDS     R0,R2,R0
   \   0000017E   0x22A0             MOVS     R2,#+160
   \   00000180   0x....             LDR.N    R3,??DataTable8_7
   \   00000182   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   00000186   0x188A             ADDS     R2,R1,R2
   \   00000188   0x7892             LDRB     R2,[R2, #+2]
   \   0000018A   0x2303             MOVS     R3,#+3
   \   0000018C   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000190   0x1810             ADDS     R0,R2,R0
   \   00000192   0x22A0             MOVS     R2,#+160
   \   00000194   0x....             LDR.N    R3,??DataTable8_7
   \   00000196   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   0000019A   0x188A             ADDS     R2,R1,R2
   \   0000019C   0x78D2             LDRB     R2,[R2, #+3]
   \   0000019E   0x2303             MOVS     R3,#+3
   \   000001A0   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000001A4   0x23A0             MOVS     R3,#+160
   \   000001A6   0x.... 0x....      LDR.W    R12,??DataTable8_7
   \   000001AA   0xFB03 0xC307      MLA      R3,R3,R7,R12
   \   000001AE   0x18CB             ADDS     R3,R1,R3
   \   000001B0   0x791B             LDRB     R3,[R3, #+4]
   \   000001B2   0xF05F 0x0C03      MOVS     R12,#+3
   \   000001B6   0xFB93 0xF3FC      SDIV     R3,R3,R12
   \   000001BA   0x189A             ADDS     R2,R3,R2
   \   000001BC   0x23A0             MOVS     R3,#+160
   \   000001BE   0x.... 0x....      LDR.W    R12,??DataTable8_7
   \   000001C2   0xFB03 0xC307      MLA      R3,R3,R7,R12
   \   000001C6   0x18CB             ADDS     R3,R1,R3
   \   000001C8   0x795B             LDRB     R3,[R3, #+5]
   \   000001CA   0xF05F 0x0C03      MOVS     R12,#+3
   \   000001CE   0xFB93 0xF3FC      SDIV     R3,R3,R12
   \   000001D2   0x189A             ADDS     R2,R3,R2
   \   000001D4   0x322D             ADDS     R2,R2,#+45
   \   000001D6   0x4282             CMP      R2,R0
   \   000001D8   0xDABB             BGE.N    ??GetBlackLine_12
   \   000001DA   0x1D0A             ADDS     R2,R1,#+4
   \   000001DC   0x....             LDR.N    R0,??DataTable8_12
   \   000001DE   0xF840 0x2027      STR      R2,[R0, R7, LSL #+2]
   \   000001E2   0x2A0E             CMP      R2,#+14
   \   000001E4   0xD302             BCC.N    ??GetBlackLine_14
   \   000001E6   0xF1B2 0x060C      SUBS     R6,R2,#+12
   \   000001EA   0xE000             B.N      ??GetBlackLine_15
   \                     ??GetBlackLine_14:
   \   000001EC   0x269B             MOVS     R6,#+155
   \                     ??GetBlackLine_15:
   \   000001EE   0x1D90             ADDS     R0,R2,#+6
   \   000001F0   0x289B             CMP      R0,#+155
   \   000001F2   0xD201             BCS.N    ??GetBlackLine_16
   \   000001F4   0x1D94             ADDS     R4,R2,#+6
   \   000001F6   0xE000             B.N      ??GetBlackLine_17
   \                     ??GetBlackLine_16:
   \   000001F8   0x249B             MOVS     R4,#+155
   \                     ??GetBlackLine_17:
   \   000001FA   0xF05F 0x0801      MOVS     R8,#+1
   \   000001FE   0x2500             MOVS     R5,#+0
   \                     ??GetBlackLine_13:
   \   00000200   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000204   0xD11E             BNE.N    ??GetBlackLine_18
   \   00000206   0x2F77             CMP      R7,#+119
   \   00000208   0xD21C             BCS.N    ??GetBlackLine_18
   \   0000020A   0x....             LDR.N    R0,??DataTable8_11
   \   0000020C   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   00000210   0x6840             LDR      R0,[R0, #+4]
   \   00000212   0x....             LDR.N    R1,??DataTable8_11
   \   00000214   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
   \   00000218   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000021C   0xF1B9 0x0F06      CMP      R9,#+6
   \   00000220   0xD310             BCC.N    ??GetBlackLine_18
   \   00000222   0xF110 0x011E      ADDS     R1,R0,#+30
   \   00000226   0x299B             CMP      R1,#+155
   \   00000228   0xD203             BCS.N    ??GetBlackLine_19
   \   0000022A   0xF110 0x011E      ADDS     R1,R0,#+30
   \   0000022E   0x9100             STR      R1,[SP, #+0]
   \   00000230   0xE001             B.N      ??GetBlackLine_20
   \                     ??GetBlackLine_19:
   \   00000232   0x219B             MOVS     R1,#+155
   \   00000234   0x9100             STR      R1,[SP, #+0]
   \                     ??GetBlackLine_20:
   \   00000236   0x2811             CMP      R0,#+17
   \   00000238   0xD302             BCC.N    ??GetBlackLine_21
   \   0000023A   0xF1B0 0x0A0F      SUBS     R10,R0,#+15
   \   0000023E   0xE001             B.N      ??GetBlackLine_18
   \                     ??GetBlackLine_21:
   \   00000240   0xF05F 0x0A01      MOVS     R10,#+1
   \                     ??GetBlackLine_18:
   \   00000244   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000248   0xF47F 0xAF03      BNE.W    ??GetBlackLine_2
   \   0000024C   0x2F77             CMP      R7,#+119
   \   0000024E   0xF4BF 0xAF00      BCS.W    ??GetBlackLine_2
   \   00000252   0x....             LDR.N    R0,??DataTable8_12
   \   00000254   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   00000258   0x6842             LDR      R2,[R0, #+4]
   \   0000025A   0x....             LDR.N    R0,??DataTable8_12
   \   0000025C   0xF840 0x2027      STR      R2,[R0, R7, LSL #+2]
   \   00000260   0x1C6D             ADDS     R5,R5,#+1
   \   00000262   0x2D06             CMP      R5,#+6
   \   00000264   0xF4FF 0xAEF5      BCC.W    ??GetBlackLine_2
   \   00000268   0xF112 0x000F      ADDS     R0,R2,#+15
   \   0000026C   0x289B             CMP      R0,#+155
   \   0000026E   0xD202             BCS.N    ??GetBlackLine_22
   \   00000270   0xF112 0x040F      ADDS     R4,R2,#+15
   \   00000274   0xE000             B.N      ??GetBlackLine_23
   \                     ??GetBlackLine_22:
   \   00000276   0x249B             MOVS     R4,#+155
   \                     ??GetBlackLine_23:
   \   00000278   0x2A20             CMP      R2,#+32
   \   0000027A   0xF4FF 0xAEE9      BCC.W    ??GetBlackLine_1
   \   0000027E   0xF1B2 0x061E      SUBS     R6,R2,#+30
   \   00000282   0xE6E6             B.N      ??GetBlackLine_2
    426                    
    427                }//end of while(grow > 5)
    428                
    429                OptimizeCenterLine();
   \                     ??GetBlackLine_3:
   \   00000284   0x.... 0x....      BL       OptimizeCenterLine
    430          }  //end GetBlackLine()
   \   00000288   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    431          
    432          
    433          /*
    434          ***************************************************
    435          ** 函数名称: void SendCenterLine(unsigned int * templine)
    436          ** 功能描述: 输出中心线 
    437          ** 入口：中心线数组 
    438          ** 出口：
    439          ** 说明: 以左中右三线输出
    440          ***************************************************
    441          */

   \                                 In section .text, align 2, keep-with-next
    442          void SendCenterLine3(int * templineL, int * templine, int * templineR)
    443          {
   \                     SendCenterLine3:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    444              unsigned int i,j;
    445              unsigned int temp=0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
    446          
    447              uartPrintf("Center Line :\n");
   \   0000000E   0x....             LDR.N    R0,??DataTable8_16
   \   00000010   0x.... 0x....      BL       uartPrintf
    448          
    449            
    450              
    451              for(i = 0 ;i< ROW;i++)
   \   00000014   0x2700             MOVS     R7,#+0
   \   00000016   0xE003             B.N      ??SendCenterLine3_0
    452              {
    453                  uartPrintf("%3d",i); 
    454                  uartPrintf("-%3d-%3d-%3d",templineL[i],templine[i],templineR[i]);  
    455                  
    456                  temp=templineL[i];
    457                  for(j=0;j<temp;j++)
    458                  {
    459                      uartPrintf(" ") ;
    460                  }
    461                  
    462                  if(templine[i] > templineL[i])
    463                  {
    464                      uartPrintf("。");
    465                      j++;
    466                  }
    467                  
    468                  temp=templine[i];
    469                  for(;j<temp;j++)
    470                  {
    471                      uartPrintf(" ") ;
    472                  }
    473                  printp("*");
    474                  
    475                  if(templineR[i] > templine[i])
    476                  {
    477                      j++;
    478                      temp=templineR[i];
    479                      for(;j<temp;j++)
    480                      {
    481                          uartPrintf(" ") ;
    482                      }
    483                      uartPrintf("。\n");
    484                  }
    485                  else
    486                      uartPrintf("\n");
   \                     ??SendCenterLine3_1:
   \   00000018   0x....             ADR.N    R0,??DataTable8  ;; "\n"
   \   0000001A   0x.... 0x....      BL       uartPrintf
   \                     ??SendCenterLine3_2:
   \   0000001E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SendCenterLine3_0:
   \   00000020   0x2F78             CMP      R7,#+120
   \   00000022   0xD246             BCS.N    ??SendCenterLine3_3
   \   00000024   0x0039             MOVS     R1,R7
   \   00000026   0x....             ADR.N    R0,??DataTable8_1  ;; "%3d"
   \   00000028   0x.... 0x....      BL       uartPrintf
   \   0000002C   0xF856 0x3027      LDR      R3,[R6, R7, LSL #+2]
   \   00000030   0xF855 0x2027      LDR      R2,[R5, R7, LSL #+2]
   \   00000034   0xF854 0x1027      LDR      R1,[R4, R7, LSL #+2]
   \   00000038   0x....             LDR.N    R0,??DataTable8_17
   \   0000003A   0x.... 0x....      BL       uartPrintf
   \   0000003E   0xF854 0x9027      LDR      R9,[R4, R7, LSL #+2]
   \   00000042   0xF05F 0x0800      MOVS     R8,#+0
   \   00000046   0xE004             B.N      ??SendCenterLine3_4
   \                     ??SendCenterLine3_5:
   \   00000048   0x....             ADR.N    R0,??DataTable8_2  ;; " "
   \   0000004A   0x.... 0x....      BL       uartPrintf
   \   0000004E   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??SendCenterLine3_4:
   \   00000052   0x45C8             CMP      R8,R9
   \   00000054   0xD3F8             BCC.N    ??SendCenterLine3_5
   \   00000056   0xF854 0x0027      LDR      R0,[R4, R7, LSL #+2]
   \   0000005A   0xF855 0x1027      LDR      R1,[R5, R7, LSL #+2]
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xDA04             BGE.N    ??SendCenterLine3_6
   \   00000062   0x....             ADR.N    R0,??DataTable8_3  ;; 0xA1, 0xA3, 0x00, 0x00
   \   00000064   0x.... 0x....      BL       uartPrintf
   \   00000068   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??SendCenterLine3_6:
   \   0000006C   0xF855 0x9027      LDR      R9,[R5, R7, LSL #+2]
   \   00000070   0xE004             B.N      ??SendCenterLine3_7
   \                     ??SendCenterLine3_8:
   \   00000072   0x....             ADR.N    R0,??DataTable8_2  ;; " "
   \   00000074   0x.... 0x....      BL       uartPrintf
   \   00000078   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??SendCenterLine3_7:
   \   0000007C   0x45C8             CMP      R8,R9
   \   0000007E   0xD3F8             BCC.N    ??SendCenterLine3_8
   \   00000080   0x....             ADR.N    R0,??DataTable8_4  ;; "*"
   \   00000082   0x.... 0x....      BL       uartPrintf
   \   00000086   0xF855 0x0027      LDR      R0,[R5, R7, LSL #+2]
   \   0000008A   0xF856 0x1027      LDR      R1,[R6, R7, LSL #+2]
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xDAC2             BGE.N    ??SendCenterLine3_1
   \   00000092   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000096   0xF856 0x9027      LDR      R9,[R6, R7, LSL #+2]
   \   0000009A   0xE004             B.N      ??SendCenterLine3_9
   \                     ??SendCenterLine3_10:
   \   0000009C   0x....             ADR.N    R0,??DataTable8_2  ;; " "
   \   0000009E   0x.... 0x....      BL       uartPrintf
   \   000000A2   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??SendCenterLine3_9:
   \   000000A6   0x45C8             CMP      R8,R9
   \   000000A8   0xD3F8             BCC.N    ??SendCenterLine3_10
   \   000000AA   0x....             ADR.N    R0,??DataTable8_5  ;; "。\n"
   \   000000AC   0x.... 0x....      BL       uartPrintf
   \   000000B0   0xE7B5             B.N      ??SendCenterLine3_2
    487              }
    488              
    489              uartPrintf("\n");
   \                     ??SendCenterLine3_3:
   \   000000B2   0x....             ADR.N    R0,??DataTable8  ;; "\n"
   \   000000B4   0x.... 0x....      BL       uartPrintf
    490              
    491          }
   \   000000B8   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x25 0x32          DC8      "%2d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x2A 0x00          DC8      "*",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x2C 0x00          DC8      ",",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x25 0x33          DC8      "%3d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0xA1 0xA3          DC8      0xA1, 0xA3, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x2A 0x00          DC8      "*",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0xA1 0xA3          DC8      "。\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     FTMx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     Pic_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     Line_Center

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     Line_Center_L

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     Line_Center_R

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     PhotoBlackMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     showChoice

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     photeCompleteFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     `?<Constant "Center Line :\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     `?<Constant "-%3d-%3d-%3d">`

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x32          DC8 "%2d"
   \              0x64 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x2A 0x00          DC8 "*"

   \                                 In section .rodata, align 2
   \   00000000   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x2C 0x00          DC8 ","

   \                                 In section .rodata, align 4
   \                     `?<Constant "Center Line :\\n">`:
   \   00000000   0x43 0x65          DC8 "Center Line :\012"
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x4C    
   \              0x69 0x6E    
   \              0x65 0x20    
   \              0x3A 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x33          DC8 "%3d"
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "-%3d-%3d-%3d">`:
   \   00000000   0x2D 0x25          DC8 "-%3d-%3d-%3d"
   \              0x33 0x64    
   \              0x2D 0x25    
   \              0x33 0x64    
   \              0x2D 0x25    
   \              0x33 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0xA1 0xA3          DC8 "\241\243"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0xA1 0xA3          DC8 "\241\243\012"
   \              0x0A 0x00    
    492          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  CCD_init
             24 -> DMA_PORTx2BUFF_Init
             24 -> FTM_Input_init
             24 -> gpio_init
       40  GetBlackLine
             40 -> ImproveSingleRow
             40 -> OptimizeCenterLine
        0  GetPhoto
       12  ImproveSingleRow
        8  OptimizeCenterLine
              8 -> get_mid
       32  SendCenterLine3
             32 -> uartPrintf
       16  ShowPhoto
             16 -> uart0Printf
       16  WritePicBlack
             16 -> uartPrintf
        0  WritePicTest


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
       4  ?<Constant "%2d">
       4  ?<Constant "%3d">
       4  ?<Constant "%d">
       2  ?<Constant "*">
       2  ?<Constant ",">
      16  ?<Constant "-%3d-%3d-%3d">
      16  ?<Constant "Center Line :\n">
       4  ?<Constant "\241\243">
       4  ?<Constant "\241\243\n">
       2  ?<Constant "\n">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     276  CCD_init
     652  GetBlackLine
     128  GetPhoto
     224  ImproveSingleRow
     106  OptimizeCenterLine
     188  SendCenterLine3
     110  ShowPhoto
      86  WritePicBlack
      42  WritePicTest

 
    60 bytes in section .rodata
 1 908 bytes in section .text
 
 1 908 bytes of CODE  memory
    60 bytes of CONST memory

Errors: none
Warnings: none
