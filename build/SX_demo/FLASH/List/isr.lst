###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:47:25 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\projects\SX_demo\isr.c                         #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\projects\SX_demo\isr.c -lCN                    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\SX_demo\..\ -I                     #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\common\ -I                 #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\cpu\ -I                    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ -I                #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\gpio\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\wdog\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\mcg\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\uart\ -I           #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\lptmr\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\LED\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\fun\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\FTM\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\pit\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\DIPswitch\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\steer\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\ccd\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\dma\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\drivers\motor\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\platforms\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\..\..\src\projects\SX_demo\ -Ol      #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\List\isr.lst                   #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\SX_demo\FLASH\Obj\isr.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\projects\SX_demo\isr.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[isr.c] 
      5          * 描  述 ：中断处理例程
      6          * 原创   ：野火嵌入式开发工作室
      7          *设计改进：snowwolf
      8          *  Email ：snowwolf2012@qq.com
      9          * 说  明 ：所有的中断函数写在这里
     10          ***********************************************************************
     11          */
     12          
     13          
     14          
     15          #include "common.h"
     16          #include "include.h"
     17          #include "isr.h"
     18          #include "global.h"
     19          

   \                                 In section .bss, align 1
     20          u8 PITcounter = 0;
   \                     PITcounter:
   \   00000000                      DS8 1
     21          /************************************************************************* 
     22          *  函数名称：PIT0_IRQHandler
     23          *  功能说明：PIT0 定时中断服务函数
     24          *  参数说明：无   
     25          *  函数返回：无
     26          *  修改时间：2012-2-18    已测试
     27          *  备    注：建议大家在写程序时尽量用宏定义，这样写出的代码可移值性强
     28          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     29          void PIT0_IRQHandler(void)
     30          {
   \                     PIT0_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
     31              PIT_Flag_Clear(PIT0);                 //清中断标志位
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable2  ;; 0x4003710c
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     32             
     33              trueSpeed = LPTMR0_CNR;   //保存脉冲计数器计算值
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1
   \   00000010   0x....             LDR.N    R1,??DataTable2_2  ;; 0x4004000c
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x6001             STR      R1,[R0, #+0]
     34              lptmr_counter_clean(); 
   \   00000016   0x.... 0x....      BL       lptmr_counter_clean
     35              //速度控制算法
     36              motorCtrl();
   \   0000001A   0x.... 0x....      BL       motorCtrl
     37                
     38              GPIO_TURN(PORTB,0);       //用于测试PIT频率
   \   0000001E   0x....             LDR.N    R0,??DataTable2_3
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000028   0x....             LDR.N    R1,??DataTable2_3
   \   0000002A   0x6849             LDR      R1,[R1, #+4]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     39              PITcounter = (PITcounter + 1) % 13;
   \   0000002E   0x....             LDR.N    R0,??DataTable2_4
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x210D             MOVS     R1,#+13
   \   00000036   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000003A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003E   0x....             LDR.N    R1,??DataTable2_4
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     40          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
     41          
     42          
     43          

   \                                 In section .bss, align 4
     44          u32 tmpline = 0;//行号
   \                     tmpline:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          u32 tmprow = 0; //列号
   \                     tmprow:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     46          u32 tmpnum = 0; //场号
   \                     tmpnum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          u32 picLineSum = 0;//总行数
   \                     picLineSum:
   \   00000000                      DS8 4
     48          
     49          
     50          #ifdef CCD_DMA
     51          
     52          #warning  "this is DMA"

   \                                 In section .text, align 4, keep-with-next
     53          void FTM2_IRQHandler()
     54          {
   \                     FTM2_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
     55              u8 s=FTM2_STATUS;               //读取捕捉和比较状态  All CHnF bits can be checked using only one read of STATUS.
   \   00000002   0x....             LDR.N    R0,??DataTable2_5  ;; 0x400b8050
   \   00000004   0x6804             LDR      R4,[R0, #+0]
     56              u8 CHn;
     57             
     58              DisableInterrupts; 
   \   00000006   0xB672             CPSID i         
     59              FTM2_STATUS=0x00;               //清中断标志位
   \   00000008   0x....             LDR.N    R0,??DataTable2_5  ;; 0x400b8050
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     60              
     61              //行中断 PTA8
     62              CHn=0;//中断标志位被置位，且中断使能 
   \   0000000E   0x2000             MOVS     R0,#+0
     63              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x4081             LSLS     R1,R1,R0
   \   00000014   0x0022             MOVS     R2,R4
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x420A             TST      R2,R1
   \   0000001A   0xD034             BEQ.N    ??FTM2_IRQHandler_0
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x....             LDR.N    R1,??DataTable2_6
   \   00000020   0x6889             LDR      R1,[R1, #+8]
   \   00000022   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   00000026   0x68C0             LDR      R0,[R0, #+12]
   \   00000028   0x0640             LSLS     R0,R0,#+25
   \   0000002A   0xD52C             BPL.N    ??FTM2_IRQHandler_0
     64              {
     65                  tmpline++; 
   \   0000002C   0x....             LDR.N    R0,??DataTable2_7
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable2_7
   \   00000034   0x6008             STR      R0,[R1, #+0]
     66                  
     67          
     68                  if(0 == (tmpline % 2))
   \   00000036   0x....             LDR.N    R0,??DataTable2_7
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x07C0             LSLS     R0,R0,#+31
   \   0000003C   0xD423             BMI.N    ??FTM2_IRQHandler_0
     69                  {
     70                      ASSERT_RST(DMA_CITER_ELINKNO(CCD_DMA_CH) == COLUMN,"DMA末传输结束");
   \   0000003E   0x....             LDR.N    R0,??DataTable2_8  ;; 0x40009096
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x28A0             CMP      R0,#+160
   \   00000046   0xD004             BEQ.N    ??FTM2_IRQHandler_1
   \   00000048   0x....             LDR.N    R2,??DataTable2_9
   \   0000004A   0x2146             MOVS     R1,#+70
   \   0000004C   0x....             LDR.N    R0,??DataTable2_10
   \   0000004E   0x.... 0x....      BL       assert_failed_rst
     71                      DMA_SETDAADDR(CCD_DMA_CH,&Pic_Buffer[tmprow][0]);
   \                     ??FTM2_IRQHandler_1:
   \   00000052   0x....             LDR.N    R0,??DataTable2_11
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x21A0             MOVS     R1,#+160
   \   00000058   0x....             LDR.N    R2,??DataTable2_12
   \   0000005A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000005E   0x....             LDR.N    R1,??DataTable2_13  ;; 0x40009090
   \   00000060   0x6008             STR      R0,[R1, #+0]
     72                      DMA_EN(CCD_DMA_CH);                         //开始DMA传输 
   \   00000062   0x....             LDR.N    R0,??DataTable2_14  ;; 0x4000800c
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000006A   0x....             LDR.N    R1,??DataTable2_14  ;; 0x4000800c
   \   0000006C   0x6008             STR      R0,[R1, #+0]
     73                      
     74                      tmprow++;
   \   0000006E   0x....             LDR.N    R0,??DataTable2_11
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x....             LDR.N    R1,??DataTable2_11
   \   00000076   0x6008             STR      R0,[R1, #+0]
     75                      if(tmprow >= ROW)
   \   00000078   0x....             LDR.N    R0,??DataTable2_11
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x2878             CMP      R0,#+120
   \   0000007E   0xD302             BCC.N    ??FTM2_IRQHandler_0
     76                      {
     77                          photeCompleteFlag = 1;
   \   00000080   0x....             LDR.N    R0,??DataTable2_15
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x6001             STR      R1,[R0, #+0]
     78                      }
     79                  }
     80                  
     81              }
     82              
     83              //场中断      PTA9
     84              CHn=1;
   \                     ??FTM2_IRQHandler_0:
   \   00000086   0x2001             MOVS     R0,#+1
     85              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x4081             LSLS     R1,R1,R0
   \   0000008C   0x0022             MOVS     R2,R4
   \   0000008E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000090   0x420A             TST      R2,R1
   \   00000092   0xD024             BEQ.N    ??FTM2_IRQHandler_2
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x....             LDR.N    R1,??DataTable2_6
   \   00000098   0x6889             LDR      R1,[R1, #+8]
   \   0000009A   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000009E   0x68C0             LDR      R0,[R0, #+12]
   \   000000A0   0x0640             LSLS     R0,R0,#+25
   \   000000A2   0xD51C             BPL.N    ??FTM2_IRQHandler_2
     86              {
     87                 //uartSendChar(UART0,'v');
     88                 //uartPrintf("场中断开\n");
     89                 tmpnum++;
   \   000000A4   0x....             LDR.N    R0,??DataTable2_16
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x....             LDR.N    R1,??DataTable2_16
   \   000000AC   0x6008             STR      R0,[R1, #+0]
     90                 picLineSum = tmpline;
   \   000000AE   0x....             LDR.N    R0,??DataTable2_17
   \   000000B0   0x....             LDR.N    R1,??DataTable2_7
   \   000000B2   0x6809             LDR      R1,[R1, #+0]
   \   000000B4   0x6001             STR      R1,[R0, #+0]
     91                 tmpline = 0;
   \   000000B6   0x....             LDR.N    R0,??DataTable2_7
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x6001             STR      R1,[R0, #+0]
     92                 tmprow = 0;
   \   000000BC   0x....             LDR.N    R0,??DataTable2_11
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x6001             STR      R1,[R0, #+0]
     93                 DMA_IRQ_CLEAN(CCD_DMA_CH);
   \   000000C2   0x....             LDR.N    R0,??DataTable2_18  ;; 0x40008024
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000CA   0x....             LDR.N    R1,??DataTable2_18  ;; 0x40008024
   \   000000CC   0x6008             STR      R0,[R1, #+0]
     94                 En_HREF;     //打开行中断
   \   000000CE   0x....             LDR.N    R0,??DataTable2_6
   \   000000D0   0x6880             LDR      R0,[R0, #+8]
   \   000000D2   0x68C0             LDR      R0,[R0, #+12]
   \   000000D4   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000D8   0x....             LDR.N    R1,??DataTable2_6
   \   000000DA   0x6889             LDR      R1,[R1, #+8]
   \   000000DC   0x60C8             STR      R0,[R1, #+12]
     95              }
     96              EnableInterrupts; 
   \                     ??FTM2_IRQHandler_2:
   \   000000DE   0xB662             CPSIE i         
     97          }
   \   000000E0   0xBD10             POP      {R4,PC}          ;; return
     98          
     99          #else //#ifdef CCD_DMA
    100          
    101          #warning  "this interrupt"
    102          
    103          
    104          /*
    105          以下是一96M 系统时钟 48M总线时钟下调试成功，其他摄像头需要自己调配
    106          */
    107          #define nops()  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop")
    108          void FTM2_IRQHandler()
    109          {
    110              u8 s=FTM2_STATUS;               //读取捕捉和比较状态  All CHnF bits can be checked using only one read of STATUS.
    111              u8 CHn;
    112              u8 tmpcol = 0;
    113              DisableInterrupts; 
    114              FTM2_STATUS=0x00;               //清中断标志位
    115              
    116              //行中断 PTA8
    117              CHn=0;//中断标志位被置位，且中断使能 
    118              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
    119              {
    120                  tmpline++;
    121                  
    122                  if(0 == (tmpline % 2))
    123                  {
    124                      for(tmpcol = 0;tmpcol < COLUMN;tmpcol++)
    125                      {
    126                         Pic_Buffer[tmprow][tmpcol] = CCD_DATA;
    127                         nops(); 
    128                      }
    129                      
    130                      tmprow++;
    131                      if(tmprow >= ROW)
    132                      {
    133                        photeCompleteFlag = 1;
    134                      }
    135                  }
    136                  
    137              }
    138              
    139              //场中断      PTA9
    140              CHn=1;
    141              if( (s & (1<<CHn)) && (FTM_CnSC_REG(FTMx[FTM2],CHn) & FTM_CnSC_CHIE_MASK ) )
    142              {
    143                 //uartSendChar(UART0,'v');
    144                 tmpnum++;
    145                 picLineSum = tmpline;
    146                 tmpline = 0;
    147                 tmprow = 0;
    148                 En_HREF;     //打开行中断
    149              }
    150              EnableInterrupts; 
    151          }
    152          #endif   //#ifdef CCD_DMA
    153          
    154          /*************************************************************************
    155          *  函数名称：USART1_IRQHandler
    156          *  功能说明：串口1 中断 接收 服务函数
    157          *  参数说明：无   
    158          *  函数返回：无
    159          *  修改时间：2012-2-14    已测试
    160          *  备    注：
    161          *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    162          void UART0_IRQHandler(void)
    163          {
   \                     UART0_IRQHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    164              uint8 ch;
    165              
    166              DisableInterrupts;		    //关总中断
   \   00000002   0xB672             CPSID i         
    167              
    168              //接收一个字节数据并回发
    169              ch=uartRecvChar (UART0);                //接收到一个数据
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       uartRecvChar
   \   0000000A   0x0004             MOVS     R4,R0
    170              uart0Printf("cmd = 0x%X\n",ch);
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x....             LDR.N    R0,??DataTable2_19
   \   00000012   0x.... 0x....      BL       uart0Printf
    171              
    172              if(ch == 's')
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C73             CMP      R4,#+115
   \   0000001A   0xD110             BNE.N    ??UART0_IRQHandler_0
    173              {
    174              if((showChoice & 0x01))
   \   0000001C   0x....             LDR.N    R0,??DataTable2_20
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD506             BPL.N    ??UART0_IRQHandler_1
    175                   showChoice &= 0xFE;
   \   00000024   0x....             LDR.N    R0,??DataTable2_20
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000002C   0x....             LDR.N    R1,??DataTable2_20
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
   \   00000030   0xE005             B.N      ??UART0_IRQHandler_0
    176              else
    177                   showChoice |= 0x01;
   \                     ??UART0_IRQHandler_1:
   \   00000032   0x....             LDR.N    R0,??DataTable2_20
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x....             LDR.N    R1,??DataTable2_20
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    178              }
    179              EnableInterrupts;		    //开总中断
   \                     ??UART0_IRQHandler_0:
   \   0000003E   0xB662             CPSIE i         
    180          }
   \   00000040   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     trueSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4004000C         DC32     0x4004000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     PITcounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x400B8050         DC32     0x400b8050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     FTMx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     tmpline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40009096         DC32     0x40009096

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     `?<Constant "DMA\\304\\251\\264\\253\\312\\344\\275\\34`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     tmprow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     Pic_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40009090         DC32     0x40009090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     photeCompleteFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     tmpnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     picLineSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     `?<Constant "cmd = 0x%X\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     showChoice

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 0D1H
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0xD1    
   \   00000020   0xEE 0xCF          DC8 0EEH, 0CFH, 0F2H, 0BEH, 0FCH, 0B5H, 0C4H, 4BH
   \              0xF2 0xBE    
   \              0xFC 0xB5    
   \              0xC4 0x4B    
   \   00000028   0x36 0x30          DC8 36H, 30H, 0C4H, 0A3H, 0B0H, 0E5H, 5FH, 0D6H
   \              0xC4 0xA3    
   \              0xB0 0xE5    
   \              0x5F 0xD6    
   \   00000030   0xBB 0xD3          DC8 0BBH, 0D3H, 0D0H, 0BBH, 0F9H, 0B1H, 0BEH, 49H
   \              0xD0 0xBB    
   \              0xF9 0xB1    
   \              0xBE 0x49    
   \   00000038   0x4F 0xB2          DC8 4FH, 0B2H, 0D9H, 0D7H, 0F7H, 5CH, 73H, 72H
   \              0xD9 0xD7    
   \              0xF7 0x5C    
   \              0x73 0x72    
   \   00000040   0x63 0x5C          DC8 63H, 5CH, 70H, 72H, 6FH, 6AH, 65H, 63H
   \              0x70 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000048   0x74 0x73          DC8 74H, 73H, 5CH, 53H, 58H, 5FH, 64H, 65H
   \              0x5C 0x53    
   \              0x58 0x5F    
   \              0x64 0x65    
   \   00000050   0x6D 0x6F          DC8 6DH, 6FH, 5CH, 69H, 73H, 72H, 2EH, 63H
   \              0x5C 0x69    
   \              0x73 0x72    
   \              0x2E 0x63    
   \   00000058   0x00               DC8 0
   \   00000059   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "DMA\\304\\251\\264\\253\\312\\344\\275\\34`:
   \   00000000   0x44 0x4D          DC8 "DMA\304\251\264\253\312\344\275\341\312\370"
   \              0x41 0xC4    
   \              0xA9 0xB4    
   \              0xAB 0xCA    
   \              0xE4 0xBD    
   \              0xE1 0xCA    
   \              0xF8 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cmd = 0x%X\\n">`:
   \   00000000   0x63 0x6D          DC8 "cmd = 0x%X\012"
   \              0x64 0x20    
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  FTM2_IRQHandler
             8 -> assert_failed_rst
        8  PIT0_IRQHandler
             8 -> lptmr_counter_clean
             8 -> motorCtrl
        8  UART0_IRQHandler
             8 -> uart0Printf
             8 -> uartRecvChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      92  ?<Constant "C:\\Users\\Administrato...">
      16  ?<Constant "DMA\304\251\264\253\312\344\275\34
      12  ?<Constant "cmd = 0x%X\n">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     226  FTM2_IRQHandler
      68  PIT0_IRQHandler
       1  PITcounter
      66  UART0_IRQHandler
       4  picLineSum
       4  tmpline
       4  tmpnum
       4  tmprow

 
  17 bytes in section .bss
 120 bytes in section .rodata
 444 bytes in section .text
 
 444 bytes of CODE  memory
 120 bytes of CONST memory
  17 bytes of DATA  memory

Errors: none
Warnings: 1
