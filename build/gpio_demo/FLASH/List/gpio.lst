###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  18:51:06 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\g #
#                    pio\gpio.c                                               #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\g #
#                    pio\gpio.c -lCN C:\Users\Administrator\Desktop\MPU60508. #
#                    12\build\gpio_demo\FLASH\List\ -lB                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\gpio.lst                                   #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\gpio.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\gpio\gpio.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[gpio.c] 
      5          * 描  述 ：gpio驱动函数
      6          * 原创   ：野火嵌入式开发工作室
      7          *设计改进：snowwolf
      8          *  Email ：snowwolf2012@qq.com
      9          *最后更新：2012-04-03
     10          * 说  明 ：gpio驱动函数 包括初始化，置位 翻转
     11          ***********************************************************************
     12          */
     13          #include "common.h"
     14          #include "gpio.h"
     15          
     16          //定义五个指针数组保存 GPIOx 的地址

   \                                 In section .data, align 4
     17          volatile struct GPIO_MemMap *GPIOx[5]={PTA_BASE_PTR,PTB_BASE_PTR,PTC_BASE_PTR,PTD_BASE_PTR,PTE_BASE_PTR}; 
   \                     GPIOx:
   \   00000000   0x400FF000         DC32 400FF000H, 400FF040H, 400FF080H, 400FF0C0H, 400FF100H
   \              0x400FF040   
   \              0x400FF080   
   \              0x400FF0C0   
   \              0x400FF100   
     18          //定义五个指针数组保存 PORTx 的地址

   \                                 In section .data, align 4
     19          volatile struct PORT_MemMap *PORTX[5]={PORTA_BASE_PTR,PORTB_BASE_PTR,PORTC_BASE_PTR,PORTD_BASE_PTR,PORTE_BASE_PTR};
   \                     PORTX:
   \   00000000   0x40049000         DC32 40049000H, 4004A000H, 4004B000H, 4004C000H, 4004D000H
   \              0x4004A000   
   \              0x4004B000   
   \              0x4004C000   
   \              0x4004D000   
     20          
     21          /*
     22          ************************************************************************
     23          *  函数名称：gpio_init
     24          *  功能说明：初始化gpio
     25          *  参数说明：PORTx       端口号（PORTA,PORTB,PORTC,PORTD,PORTE）
     26          *            n           端口引脚
     27          *            IO          引脚方向,0=输入,1=输出
     28          *            data        输出初始状态,0=低电平,1=高电平 （对输入无效）
     29          *  函数返回：无
     30          *  修改时间：2012-3-15 
     31          *  备    注：
     32          ************************************************************************
     33          */

   \                                 In section .text, align 2, keep-with-next
     34          void gpio_init (PORTx portx, u8 n,GPIO_CFG cfg,u8 data)
     35          {
   \                     gpio_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001E             MOVS     R6,R3
     36              ASSERT( (n < 32u)  && (data < 2u) );           //使用断言检查输入、电平 是否为1bit
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D20             CMP      R5,#+32
   \   0000000E   0xD202             BCS.N    ??gpio_init_0
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E02             CMP      R6,#+2
   \   00000014   0xD303             BCC.N    ??gpio_init_1
   \                     ??gpio_init_0: (+1)
   \   00000016   0x2124             MOVS     R1,#+36
   \   00000018   0x....             LDR.N    R0,??DataTable3
   \   0000001A   0x.... 0x....      BL       assert_failed
     37          
     38              //选择功能脚 PORTx_PCRx ，每个端口都有个寄存器 PORTx_PCRx
     39              PORT_PCR_REG(PORTX[portx],n)=(0|PORT_PCR_MUX(1)| cfg );
   \                     ??gpio_init_1: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable3_1
   \   00000024   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000028   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002A   0xF457 0x7180      ORRS     R1,R7,#0x100
   \   0000002E   0xF840 0x1025      STR      R1,[R0, R5, LSL #+2]
     40          
     41              //最低位为0，肯定是输入；GPI_UP 和 GPI_UP_PF的最低位为1，其他为输出
     42              if( ( (cfg&0x01) == GPI) || (cfg == GPI_UP) || (cfg == GPI_DOWN) )
   \   00000032   0x07F8             LSLS     R0,R7,#+31
   \   00000034   0xD505             BPL.N    ??gpio_init_2
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x2F03             CMP      R7,#+3
   \   0000003A   0xD002             BEQ.N    ??gpio_init_2
   \   0000003C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003E   0x2F02             CMP      R7,#+2
   \   00000040   0xD10D             BNE.N    ??gpio_init_3
     43                  //   最低位为0则输入   ||   输入上拉模式  ||   输入下拉
     44              {
     45                  GPIO_PDDR_REG(GPIOx[portx]) &= ~(1<<n);    //设置端口方向为输入       
   \                     ??gpio_init_2: (+1)
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x....             LDR.N    R0,??DataTable3_2
   \   00000046   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004A   0x6940             LDR      R0,[R0, #+20]
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x40A9             LSLS     R1,R1,R5
   \   00000050   0x4388             BICS     R0,R0,R1
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x....             LDR.N    R1,??DataTable3_2
   \   00000056   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000005A   0x6148             STR      R0,[R1, #+20]
   \   0000005C   0xE02A             B.N      ??gpio_init_4
     46              }
     47              else
     48              {
     49                  GPIO_PDDR_REG(GPIOx[portx]) |= (1<<n);      //设置端口方向为输出
   \                     ??gpio_init_3: (+1)
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x....             LDR.N    R0,??DataTable3_2
   \   00000062   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000066   0x6940             LDR      R0,[R0, #+20]
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x40A9             LSLS     R1,R1,R5
   \   0000006C   0x4308             ORRS     R0,R1,R0
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0x....             LDR.N    R1,??DataTable3_2
   \   00000072   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000076   0x6148             STR      R0,[R1, #+20]
     50                  if(data == 1)//output
   \   00000078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007A   0x2E01             CMP      R6,#+1
   \   0000007C   0xD10D             BNE.N    ??gpio_init_5
     51                  {
     52                      GPIO_SET(portx,n,1);                    //对端口输出控制，输出为1
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x....             LDR.N    R0,??DataTable3_2
   \   00000082   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x40A9             LSLS     R1,R1,R5
   \   0000008C   0x4308             ORRS     R0,R1,R0
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x....             LDR.N    R1,??DataTable3_2
   \   00000092   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000096   0x6008             STR      R0,[R1, #+0]
   \   00000098   0xE00C             B.N      ??gpio_init_4
     53                  }
     54          	else
     55                  {
     56                      GPIO_SET(portx,n,0);                    //对端口输出控制，输出为0
   \                     ??gpio_init_5: (+1)
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x....             LDR.N    R0,??DataTable3_2
   \   0000009E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0x40A9             LSLS     R1,R1,R5
   \   000000A8   0x4388             BICS     R0,R0,R1
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0x....             LDR.N    R1,??DataTable3_2
   \   000000AE   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B2   0x6008             STR      R0,[R1, #+0]
     57                  }
     58              }
     59          }
   \                     ??gpio_init_4: (+1)
   \   000000B4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     60          
     61          /*************************************************************************
     62          *  函数名称：gpio_set
     63          *  功能说明：设置引脚状态
     64          *  参数说明：PORTx       端口号（PORTA,PORTB,PORTC,PORTD,PORTE）
     65          *            n           端口引脚
     66          *            data        输出初始状态,0=低电平,1=高电平
     67          *  函数返回：无
     68          *  修改时间：2012-1-16   已测试
     69          *  备    注：
     70          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     71          void gpio_set (PORTx portx, u8 n, u8 data)
     72          {
   \                     gpio_set: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     73              ASSERT( (n < 32u)  && (data < 2u) );           //使用断言检查输入、电平 是否为1bit
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D20             CMP      R5,#+32
   \   0000000C   0xD202             BCS.N    ??gpio_set_0
   \   0000000E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   0x2E02             CMP      R6,#+2
   \   00000012   0xD303             BCC.N    ??gpio_set_1
   \                     ??gpio_set_0: (+1)
   \   00000014   0x2149             MOVS     R1,#+73
   \   00000016   0x....             LDR.N    R0,??DataTable3
   \   00000018   0x.... 0x....      BL       assert_failed
     74          
     75              if(data == 1)               //输出
   \                     ??gpio_set_1: (+1)
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x2E01             CMP      R6,#+1
   \   00000020   0xD10D             BNE.N    ??gpio_set_2
     76                  GPIO_SET(portx,n,1);    //GPIO_PDOR_REG(PORTx) |= (1<<n);
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x....             LDR.N    R0,??DataTable3_2
   \   00000026   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x40A9             LSLS     R1,R1,R5
   \   00000030   0x4308             ORRS     R0,R1,R0
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x....             LDR.N    R1,??DataTable3_2
   \   00000036   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0xE00C             B.N      ??gpio_set_3
     77              else
     78                  GPIO_SET(portx,n,0);    //GPIO_PDOR_REG(PORTx) &= ~(1<<n);
   \                     ??gpio_set_2: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x....             LDR.N    R0,??DataTable3_2
   \   00000042   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x40A9             LSLS     R1,R1,R5
   \   0000004C   0x4388             BICS     R0,R0,R1
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x....             LDR.N    R1,??DataTable3_2
   \   00000052   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000056   0x6008             STR      R0,[R1, #+0]
     79          }
   \                     ??gpio_set_3: (+1)
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
     80          
     81          /*************************************************************************
     82          *  函数名称：gpio_turn
     83          *  功能说明：反转引脚状态
     84          *  参数说明：PORTx       端口号（PORTA,PORTB,PORTC,PORTD,PORTE）
     85          *            n           端口引脚
     86          *  函数返回：无
     87          *  修改时间：2012-1-15   已测试
     88          *  备    注：
     89          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     90          void gpio_turn (PORTx portx, u8 n)
     91          {
   \                     gpio_turn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     92              ASSERT( n < 32u );           //使用断言检查引脚号
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D20             CMP      R5,#+32
   \   0000000A   0xD303             BCC.N    ??gpio_turn_0
   \   0000000C   0x215C             MOVS     R1,#+92
   \   0000000E   0x....             LDR.N    R0,??DataTable3
   \   00000010   0x.... 0x....      BL       assert_failed
     93              GPIO_TURN(portx,n);
   \                     ??gpio_turn_0: (+1)
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable3_2
   \   00000018   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x40A9             LSLS     R1,R1,R5
   \   00000022   0x4048             EORS     R0,R1,R0
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R1,??DataTable3_2
   \   00000028   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     94          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     95          
     96          /*************************************************************************
     97          *  函数名称：gpio_get
     98          *  功能说明：读取引脚输入状态
     99          *  参数说明：PORTx       端口号（PORTA,PORTB,PORTC,PORTD,PORTE）
    100          *            n           端口引脚
    101          *  函数返回：无
    102          *  修改时间：2012-1-15   已测试
    103          *  备    注：
    104          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    105          u8 gpio_get(PORTx portx,u8 n)           //读取引脚状态
    106          {
   \                     gpio_get: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    107              ASSERT( n < 32u );                  //使用断言检查引脚号
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D20             CMP      R5,#+32
   \   0000000A   0xD303             BCC.N    ??gpio_get_0
   \   0000000C   0x216B             MOVS     R1,#+107
   \   0000000E   0x....             LDR.N    R0,??DataTable3
   \   00000010   0x.... 0x....      BL       assert_failed
    108              return GPIO_Get(portx,n);
   \                     ??gpio_get_0: (+1)
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable3_2
   \   00000018   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001C   0x6900             LDR      R0,[R0, #+16]
   \   0000001E   0x40E8             LSRS     R0,R0,R5
   \   00000020   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    109          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     PORTX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 4DH
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0x4D    
   \   00000020   0x50 0x55          DC8 50H, 55H, 36H, 30H, 35H, 30H, 38H, 2EH
   \              0x36 0x30    
   \              0x35 0x30    
   \              0x38 0x2E    
   \   00000028   0x31 0x32          DC8 31H, 32H, 5CH, 73H, 72H, 63H, 5CH, 64H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x64    
   \   00000030   0x72 0x69          DC8 72H, 69H, 76H, 65H, 72H, 73H, 5CH, 67H
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x5C 0x67    
   \   00000038   0x70 0x69          DC8 70H, 69H, 6FH, 5CH, 67H, 70H, 69H, 6FH
   \              0x6F 0x5C    
   \              0x67 0x70    
   \              0x69 0x6F    
   \   00000040   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   gpio_get
        16   -> assert_failed
      24   gpio_init
        24   -> assert_failed
      16   gpio_set
        16   -> assert_failed
      16   gpio_turn
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?<Constant "C:\\Users\\Administrato...">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
      20  GPIOx
      20  PORTX
      38  gpio_get
     182  gpio_init
      90  gpio_set
      48  gpio_turn

 
  40 bytes in section .data
  68 bytes in section .rodata
 370 bytes in section .text
 
 370 bytes of CODE  memory
  68 bytes of CONST memory
  40 bytes of DATA  memory

Errors: none
Warnings: none
