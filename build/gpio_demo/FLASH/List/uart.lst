###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  12:46:35 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\u #
#                    art\uart.c                                               #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\u #
#                    art\uart.c -lCN C:\Users\Administrator\Desktop\MPU60508. #
#                    12\build\gpio_demo\FLASH\List\ -lB                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\uart.lst                                   #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\uart.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\uart\uart.c
      1          /*
      2          ********************************************************************************
      3           * 文件名       ：uart.c
      4           * 描述         ：串口函数
      5           * 设计改进     ：snowwolf
      6           * Email        ：snowwolf2012@qq.com
      7           * 备注         ：
      8           * 参考         ：参考苏州大学的例程
      9           *                飞思卡尔官方的例程
     10           *                野火嵌入式开发工作室
     11          ********************************************************************************
     12          */	
     13          #include <stdarg.h>
     14          #include <string.h>
     15          #include <stdio.h>
     16          #include <stdlib.h>
     17          #include "common.h"
     18          #include "uart.h"
     19          #include "assert.h"
     20          
     21          

   \                                 In section .data, align 4
     22          volatile struct UART_MemMap *UARTx[6]={UART0_BASE_PTR,UART1_BASE_PTR,UART2_BASE_PTR,UART3_BASE_PTR,UART4_BASE_PTR,UART5_BASE_PTR}; //定义五个指针数组保存 UARTx 的地址
   \                     UARTx:
   \   00000000   0x4006A000         DC32 4006A000H, 4006B000H, 4006C000H, 4006D000H, 400EA000H, 400EB000H
   \              0x4006B000   
   \              0x4006C000   
   \              0x4006D000   
   \              0x400EA000   
   \              0x400EB000   
     23          
     24          /*************************************************************************
     25          *  函数名称：uart_init
     26          *  功能说明：初始化串口，设置波特率
     27          *  参数说明：UARTn       模块号（UART0~UART5）
     28          *            baud        波特率，如9600、19200、56000、115200等
     29          *  函数返回：无
     30          *  修改时间：2012-1-20
     31          *  备    注：在官方例程上修改
     32          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     33          void uart_init (UARTn uartn, u32 baud)
     34          {
   \                     uart_init: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     35              register uint16 sbr, brfa;
     36              uint8 temp;
     37              u32 sysclk;     //时钟
     38          
     39              /* 配置 UART功能的 GPIO 接口 开启时钟 */
     40              switch(uartn)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD006             BEQ.N    ??uart_init_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD027             BEQ.N    ??uart_init_1
   \   0000000C   0xD316             BCC.N    ??uart_init_2
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD042             BEQ.N    ??uart_init_3
   \   00000012   0xD332             BCC.N    ??uart_init_4
   \   00000014   0xE04F             B.N      ??uart_init_5
     41              {
     42              case UART0:
     43                  /*不建议使用
     44                  if(UART0_RX==PTA1)   
     45                      PORTA_PCR1 = PORT_PCR_MUX(0x2);      //在PTA1上使能UART0_RXD
     46                  else 
     47                  */
     48                  if(UART0_RX==PTA15)
     49                      PORTA_PCR15 = PORT_PCR_MUX(0x3);     //在PTA15上使能UART0_RXD
     50                  else if(UART0_RX==PTB16)
     51                      PORTB_PCR16 = PORT_PCR_MUX(0x3);     //在PTB16上使能UART0_RXD
   \                     ??uart_init_0: (+1)
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x4004a040
   \   0000001A   0xF44F 0x7340      MOV      R3,#+768
   \   0000001E   0x6013             STR      R3,[R2, #+0]
     52                  else if(UART0_RX==PTD6)
     53                      PORTD_PCR6 = PORT_PCR_MUX(0x3);      //在PTD7上使能UART0_RXD
     54                  else
     55                      assert_failed(__FILE__, __LINE__);   //设置管脚有误？
     56                  /*不建议使用
     57                  if(UART0_TX==PTA2)
     58                      PORTA_PCR2 = PORT_PCR_MUX(0x2);     //在PTA2上使能UART0_RXD
     59                  else 
     60                  */      
     61                  if(UART0_TX==PTA14)
     62                      PORTA_PCR14 = PORT_PCR_MUX(0x3);     //在PTA14上使能UART0_RXD
     63                  else if(UART0_TX==PTB17)
     64                      PORTB_PCR17 = PORT_PCR_MUX(0x3);     //在PTB17上使能UART0_RXD
   \   00000020   0x.... 0x....      LDR.W    R2,??DataTable5_1  ;; 0x4004a044
   \   00000024   0xF44F 0x7340      MOV      R3,#+768
   \   00000028   0x6013             STR      R3,[R2, #+0]
     65                  else if(UART0_TX==PTD7)
     66                      PORTD_PCR7 = PORT_PCR_MUX(0x3);     //在PTD6上使能UART0_RXD
     67                  else
     68                      assert_failed(__FILE__, __LINE__);  //设置管脚有误？
     69          
     70          
     71                  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;      //使能 UARTn 时钟
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable5_2  ;; 0x40048034
   \   0000002E   0x6812             LDR      R2,[R2, #+0]
   \   00000030   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable5_2  ;; 0x40048034
   \   00000038   0x601A             STR      R2,[R3, #+0]
     72                  break;
   \   0000003A   0xE03C             B.N      ??uart_init_6
     73          
     74              case UART1:
     75                  if(UART1_RX==PTC3)
     76                      PORTC_PCR3 = PORT_PCR_MUX(0x3);     //在PTC3上使能UART1_RXD
   \                     ??uart_init_2: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable5_3  ;; 0x4004b00c
   \   00000040   0xF44F 0x7340      MOV      R3,#+768
   \   00000044   0x6013             STR      R3,[R2, #+0]
     77                  else if(UART1_RX==PTE1)
     78                      PORTE_PCR1 = PORT_PCR_MUX(0x3);     //在PTE1上使能UART1_RXD
     79                  else
     80                      assert_failed(__FILE__, __LINE__);  //设置管脚有误？
     81          
     82                  if(UART1_TX==PTC4)
     83                      PORTC_PCR4 = PORT_PCR_MUX(0x3);     //在PTC4上使能UART1_RXD
   \   00000046   0x....             LDR.N    R2,??DataTable5_4  ;; 0x4004b010
   \   00000048   0xF44F 0x7340      MOV      R3,#+768
   \   0000004C   0x6013             STR      R3,[R2, #+0]
     84                  else if(UART1_TX==PTE0)
     85                      PORTE_PCR0 = PORT_PCR_MUX(0x3);     //在PTE0上使能UART1_RXD
     86                  else
     87                      assert_failed(__FILE__, __LINE__);  //设置管脚有误？
     88          
     89                  SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   0000004E   0x....             LDR.N    R2,??DataTable5_2  ;; 0x40048034
   \   00000050   0x6812             LDR      R2,[R2, #+0]
   \   00000052   0xF452 0x6200      ORRS     R2,R2,#0x800
   \   00000056   0x....             LDR.N    R3,??DataTable5_2  ;; 0x40048034
   \   00000058   0x601A             STR      R2,[R3, #+0]
     90                  break;
   \   0000005A   0xE02C             B.N      ??uart_init_6
     91          
     92              case UART2:
     93                  PORTD_PCR3 = PORT_PCR_MUX(0x3);         //在PTD3上使能UART2_TXD功能
   \                     ??uart_init_1: (+1)
   \   0000005C   0x....             LDR.N    R2,??DataTable5_5  ;; 0x4004c00c
   \   0000005E   0xF44F 0x7340      MOV      R3,#+768
   \   00000062   0x6013             STR      R3,[R2, #+0]
     94                  PORTD_PCR2 = PORT_PCR_MUX(0x3);         //在PTD2上使能UART2_RXD
   \   00000064   0x....             LDR.N    R2,??DataTable5_6  ;; 0x4004c008
   \   00000066   0xF44F 0x7340      MOV      R3,#+768
   \   0000006A   0x6013             STR      R3,[R2, #+0]
     95                  SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
   \   0000006C   0x....             LDR.N    R2,??DataTable5_2  ;; 0x40048034
   \   0000006E   0x6812             LDR      R2,[R2, #+0]
   \   00000070   0xF452 0x5280      ORRS     R2,R2,#0x1000
   \   00000074   0x....             LDR.N    R3,??DataTable5_2  ;; 0x40048034
   \   00000076   0x601A             STR      R2,[R3, #+0]
     96                  break;
   \   00000078   0xE01D             B.N      ??uart_init_6
     97          
     98              case UART3:
     99                  if(UART3_RX==PTB10)
    100                      PORTB_PCR10 = PORT_PCR_MUX(0x3);     //在PTB10上使能UART3_RXD
    101                  else if(UART3_RX==PTC16)
    102                      PORTC_PCR16 = PORT_PCR_MUX(0x3);     //在PTC16上使能UART3_RXD
   \                     ??uart_init_4: (+1)
   \   0000007A   0x....             LDR.N    R2,??DataTable5_7  ;; 0x4004b040
   \   0000007C   0xF44F 0x7340      MOV      R3,#+768
   \   00000080   0x6013             STR      R3,[R2, #+0]
    103                  else if(UART3_RX==PTE5)
    104                      PORTE_PCR5 = PORT_PCR_MUX(0x3);      //在PTE5上使能UART3_RXD
    105                  else
    106                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    107          
    108                  if(UART3_TX==PTB11)
    109                      PORTB_PCR11 = PORT_PCR_MUX(0x3);     //在PTB11上使能UART3_RXD
    110                  else if(UART3_TX==PTC17)
    111                      PORTC_PCR17 = PORT_PCR_MUX(0x3);     //在PTC17上使能UART3_RXD
   \   00000082   0x....             LDR.N    R2,??DataTable5_8  ;; 0x4004b044
   \   00000084   0xF44F 0x7340      MOV      R3,#+768
   \   00000088   0x6013             STR      R3,[R2, #+0]
    112                  else if(UART3_TX==PTE4)
    113                      PORTE_PCR4 = PORT_PCR_MUX(0x3);     //在PTE4上使能UART3_RXD
    114                  else
    115                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    116          
    117                  SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   0000008A   0x....             LDR.N    R2,??DataTable5_2  ;; 0x40048034
   \   0000008C   0x6812             LDR      R2,[R2, #+0]
   \   0000008E   0xF452 0x5200      ORRS     R2,R2,#0x2000
   \   00000092   0x....             LDR.N    R3,??DataTable5_2  ;; 0x40048034
   \   00000094   0x601A             STR      R2,[R3, #+0]
    118                  break;
   \   00000096   0xE00E             B.N      ??uart_init_6
    119          
    120              case UART4:
    121                  if(UART4_RX==PTC14)
    122                      PORTC_PCR14 = PORT_PCR_MUX(0x3);     //在PTC14上使能UART4_RXD
    123                  else if(UART4_RX==PTE25)
    124                      PORTE_PCR25 = PORT_PCR_MUX(0x3);     //在PTE25上使能UART4_RXD
   \                     ??uart_init_3: (+1)
   \   00000098   0x....             LDR.N    R2,??DataTable5_9  ;; 0x4004d064
   \   0000009A   0xF44F 0x7340      MOV      R3,#+768
   \   0000009E   0x6013             STR      R3,[R2, #+0]
    125                  else
    126                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    127          
    128                  if(UART4_TX==PTC15)
    129                      PORTC_PCR15 = PORT_PCR_MUX(0x3);     //在PTC15上使能UART4_RXD
    130                  else if(UART4_TX==PTE24)
    131                      PORTE_PCR24 = PORT_PCR_MUX(0x3);     //在PTE24上使能UART4_RXD
   \   000000A0   0x....             LDR.N    R2,??DataTable5_10  ;; 0x4004d060
   \   000000A2   0xF44F 0x7340      MOV      R3,#+768
   \   000000A6   0x6013             STR      R3,[R2, #+0]
    132                  else
    133                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    134          
    135                  SIM_SCGC1 |= SIM_SCGC1_UART4_MASK;
   \   000000A8   0x....             LDR.N    R2,??DataTable5_11  ;; 0x40048028
   \   000000AA   0x6812             LDR      R2,[R2, #+0]
   \   000000AC   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   000000B0   0x....             LDR.N    R3,??DataTable5_11  ;; 0x40048028
   \   000000B2   0x601A             STR      R2,[R3, #+0]
    136                  break;
   \   000000B4   0xE7FF             B.N      ??uart_init_6
    137          #if K60PIN == 144u
    138              case UART5:
    139                  if(UART5_RX==PTD8)
    140                      PORTD_PCR8 = PORT_PCR_MUX(0x3);     //在PTD8上使能UART5_RXD
    141                  else if(UART5_RX==PTE9)
    142                      PORTE_PCR9 = PORT_PCR_MUX(0x3);     //在PTE9上使能UART5_RXD
    143                  else
    144                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    145          
    146                  if(UART5_TX==PTD9)
    147                      PORTD_PCR9 = PORT_PCR_MUX(0x3);     //在PTD9上使能UART5_RXD
    148                  else if(UART5_TX==PTE8)
    149                      PORTE_PCR8 = PORT_PCR_MUX(0x3);     //在PTE8上使能UART5_RXD
    150                  else
    151                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
    152          
    153                  SIM_SCGC1 |= SIM_SCGC1_UART5_MASK;
    154                  break;
    155          #endif
    156              default:
    157                  break;
    158              }
    159          
    160          
    161              //设置的时候，应该禁止发送接受
    162              UART_C2_REG(UARTx[uartn]) &= ~(UART_C2_TE_MASK  | UART_C2_RE_MASK );
   \                     ??uart_init_5: (+1)
   \                     ??uart_init_6: (+1)
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x....             LDR.N    R2,??DataTable5_12
   \   000000BA   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000BE   0x78D2             LDRB     R2,[R2, #+3]
   \   000000C0   0xF012 0x02F3      ANDS     R2,R2,#0xF3
   \   000000C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C6   0x....             LDR.N    R3,??DataTable5_12
   \   000000C8   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   000000CC   0x70DA             STRB     R2,[R3, #+3]
    163          
    164              //配置成8位无校验模式
    165              //设置 UART 数据格式、校验方式和停止位位数。通过设置 UART 模块控制寄存器 C1 实现；
    166              UART_C1_REG(UARTx[uartn]) = 0;	// 全部直接使用默认设置就行，所以直接清0
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x....             LDR.N    R2,??DataTable5_12
   \   000000D2   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000D6   0x2300             MOVS     R3,#+0
   \   000000D8   0x7093             STRB     R3,[R2, #+2]
    167          
    168              //计算波特率，串口0、1使用内核时钟，其它串口使用外设时钟
    169              if ((uartn == UART0) | (uartn == UART1))
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD101             BNE.N    ??uart_init_7
   \   000000E0   0x2201             MOVS     R2,#+1
   \   000000E2   0xE000             B.N      ??uart_init_8
   \                     ??uart_init_7: (+1)
   \   000000E4   0x2200             MOVS     R2,#+0
   \                     ??uart_init_8: (+1)
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x2801             CMP      R0,#+1
   \   000000EA   0xD101             BNE.N    ??uart_init_9
   \   000000EC   0x2301             MOVS     R3,#+1
   \   000000EE   0xE000             B.N      ??uart_init_10
   \                     ??uart_init_9: (+1)
   \   000000F0   0x2300             MOVS     R3,#+0
   \                     ??uart_init_10: (+1)
   \   000000F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000F6   0x431A             ORRS     R2,R3,R2
   \   000000F8   0x2A00             CMP      R2,#+0
   \   000000FA   0xD005             BEQ.N    ??uart_init_11
    170                  sysclk=core_clk_khz*1000;                //内核时钟
   \   000000FC   0x....             LDR.N    R2,??DataTable5_13
   \   000000FE   0x6812             LDR      R2,[R2, #+0]
   \   00000100   0xF44F 0x737A      MOV      R3,#+1000
   \   00000104   0x435A             MULS     R2,R3,R2
   \   00000106   0xE004             B.N      ??uart_init_12
    171              else
    172          	sysclk=bus_clk_khz*1000;      //外设时钟
   \                     ??uart_init_11: (+1)
   \   00000108   0x....             LDR.N    R2,??DataTable5_14
   \   0000010A   0x6812             LDR      R2,[R2, #+0]
   \   0000010C   0xF44F 0x737A      MOV      R3,#+1000
   \   00000110   0x435A             MULS     R2,R3,R2
    173          
    174              //设置 UART 数据通讯波特率。通过设置 UART 模块的波特率寄存器
    175              sbr = (u16)(sysclk/(baud << 4));
   \                     ??uart_init_12: (+1)
   \   00000112   0x010B             LSLS     R3,R1,#+4
   \   00000114   0xFBB2 0xF3F3      UDIV     R3,R2,R3
    176          
    177              /* Save off the current value of the UARTx_BDH except for the SBR field */
    178              temp = UART_BDH_REG(UARTx[uartn]) & ~(UART_BDH_SBR(0x1F));
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x....             LDR.N    R4,??DataTable5_12
   \   0000011C   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000120   0x7824             LDRB     R4,[R4, #+0]
   \   00000122   0xF014 0x04E0      ANDS     R4,R4,#0xE0
    179          
    180              UART_BDH_REG(UARTx[uartn]) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   00000126   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000128   0x0A1D             LSRS     R5,R3,#+8
   \   0000012A   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   0000012E   0x432C             ORRS     R4,R5,R4
   \   00000130   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000132   0x....             LDR.N    R5,??DataTable5_12
   \   00000134   0xF855 0x5020      LDR      R5,[R5, R0, LSL #+2]
   \   00000138   0x702C             STRB     R4,[R5, #+0]
    181              UART_BDL_REG(UARTx[uartn]) = (u8)(sbr & UART_BDL_SBR_MASK);
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0x....             LDR.N    R4,??DataTable5_12
   \   0000013E   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000142   0x7063             STRB     R3,[R4, #+1]
    182          
    183              //brfa = (((sysclk*32)/(baud * 16)) - (sbr * 32));
    184              brfa = (((sysclk<<5)/(baud <<4)) - (sbr <<5));
   \   00000144   0x0152             LSLS     R2,R2,#+5
   \   00000146   0x0109             LSLS     R1,R1,#+4
   \   00000148   0xFBB2 0xF1F1      UDIV     R1,R2,R1
   \   0000014C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000014E   0xEBB1 0x1143      SUBS     R1,R1,R3, LSL #+5
    185          
    186              /* Save off the current value of the UARTx_C4 register except for the BRFA field */
    187              temp = UART_C4_REG(UARTx[uartn]) & ~(UART_C4_BRFA(0x1F));
   \   00000152   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000154   0x....             LDR.N    R2,??DataTable5_12
   \   00000156   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000015A   0x7A92             LDRB     R2,[R2, #+10]
   \   0000015C   0xF012 0x04E0      ANDS     R4,R2,#0xE0
    188          
    189              UART_C4_REG(UARTx[uartn]) = temp |  UART_C4_BRFA(brfa);
   \   00000160   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000162   0x....             LDR.N    R2,??DataTable5_12
   \   00000164   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000168   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000016C   0x4321             ORRS     R1,R1,R4
   \   0000016E   0x7291             STRB     R1,[R2, #+10]
    190          
    191              /* 允许发送和接收 */
    192              UART_C2_REG(UARTx[uartn]) |= (UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   00000170   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000172   0x....             LDR.N    R1,??DataTable5_12
   \   00000174   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000178   0x78C9             LDRB     R1,[R1, #+3]
   \   0000017A   0xF051 0x010C      ORRS     R1,R1,#0xC
   \   0000017E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000180   0x....             LDR.N    R2,??DataTable5_12
   \   00000182   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000186   0x70C1             STRB     R1,[R0, #+3]
    193          
    194              //设置是否允许接收和发送中断。通过设置 UART 模块的 C2 寄存器的
    195              //RIE 和 TIE 位实现。如果使能中断，必须首先实现中断服务程序；
    196          }
   \   00000188   0xBC30             POP      {R4,R5}
   \   0000018A   0x4770             BX       LR               ;; return
    197          
    198          /*
    199          ************************************************************************
    200          *  函数名称：uartRecvChar
    201          *  功能说明：无限时间等待串口接受一个字节
    202          *  参数说明：UARTn       模块号（UART0~UART5）
    203          *  函数返回：接收到的字节
    204          *  修改时间：2012-3-24
    205          *  备    注：官方例程
    206          ************************************************************************
    207          */

   \                                 In section .text, align 2, keep-with-next
    208          char uartRecvChar (UARTn uartn)
    209          {
    210              /* Wait until character has been received 判断接收缓冲区是否满*/
    211              while (!(UART_S1_REG(UARTx[uartn]) & UART_S1_RDRF_MASK));
   \                     uartRecvChar: (+1)
   \                     ??uartRecvChar_0: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable5_12
   \   00000004   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000008   0x7909             LDRB     R1,[R1, #+4]
   \   0000000A   0x0689             LSLS     R1,R1,#+26
   \   0000000C   0xD5F8             BPL.N    ??uartRecvChar_0
    212          
    213              /* Return the 8-bit data from the receiver */
    214              return UART_D_REG(UARTx[uartn]);
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x....             LDR.N    R1,??DataTable5_12
   \   00000012   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000016   0x79C0             LDRB     R0,[R0, #+7]
   \   00000018   0x4770             BX       LR               ;; return
    215          }
    216          
    217          
    218          
    219          /*
    220          ************************************************************************
    221          *  函数名称：uartPendchar
    222          *  功能说明：有限时间等待串口接受一个字节
    223          *  参数说明：UARTn       模块号（UART0~UART5）
    224          *  函数返回：接收到的字节
    225          *  修改时间：2012-3-23
    226          *  备    注：
    227          ************************************************************************
    228          */

   \                                 In section .text, align 2, keep-with-next
    229          char uartPendChar (UARTn uartn,char * ch)
    230          {
    231              u32 i=0;
   \                     uartPendChar: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    232          
    233              while(++i<0xffff)                                           //时间限制
   \                     ??uartPendChar_0: (+1)
   \   00000002   0x1C52             ADDS     R2,R2,#+1
   \   00000004   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000008   0x429A             CMP      R2,R3
   \   0000000A   0xD20E             BCS.N    ??uartPendChar_1
    234              {
    235                  if(UART_S1_REG(UARTx[uartn]) & UART_S1_RDRF_MASK)         //查询是否接受到数据
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x....             LDR.N    R3,??DataTable5_12
   \   00000010   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000014   0x791B             LDRB     R3,[R3, #+4]
   \   00000016   0x069B             LSLS     R3,R3,#+26
   \   00000018   0xD5F3             BPL.N    ??uartPendChar_0
    236                  {
    237                      *ch  =   UART_D_REG(UARTx[uartn]);                    //接受到8位的数据
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x....             LDR.N    R2,??DataTable5_12
   \   0000001E   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000022   0x79C0             LDRB     R0,[R0, #+7]
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    238                      return  1;                                            //返回 1 表示接收成功
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE002             B.N      ??uartPendChar_2
    239                  }
    240              }
    241          
    242              *ch=0;                                                       //接收不到，应该清空了接收区
   \                     ??uartPendChar_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    243              return 0;                                                    //返回0表示接收失败
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??uartPendChar_2: (+1)
   \   00000030   0x4770             BX       LR               ;; return
    244          }
    245          
    246          
    247          /*
    248          ************************************************************************
    249          *  函数名称：uartRecvString
    250          *  功能说明：接受字符串
    251          *  参数说明：UARTn       模块号（UART0~UART5）
    252          *  函数返回：接收到的字节
    253          *  修改时间：2012-1-20
    254          *  备    注：
    255          ************************************************************************
    256          */

   \                                 In section .text, align 2, keep-with-next
    257          void uartRecvString (UARTn uartn,char * buff)
    258          {
   \                     uartRecvString: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    259              char *buff2=buff;//记录起始地址
   \   00000006   0x002E             MOVS     R6,R5
   \   00000008   0xE007             B.N      ??uartRecvString_0
    260              char bC; 
    261              
    262              while ((bC=uartRecvChar(uartn))!='\r')
    263              { 	          
    264            	if(bC=='\b')//处理退格符
    265                  {
    266                        if((int)buff2<(int)buff)
    267                        {
    268                           uartSendChar(uartn,'\b'); 
    269                           uartSendChar(uartn,' '); 
    270                           uartSendChar(uartn,'\b'); 
    271                           buff--;
    272                        }
    273                  }
    274                  else
    275                  {
    276                          *buff++=bC;
   \                     ??uartRecvString_1: (+1)
   \   0000000A   0x7028             STRB     R0,[R5, #+0]
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
    277                          uartSendChar(uartn,bC);
   \   0000000E   0x0001             MOVS     R1,R0
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       uartSendChar
    278                  }
   \                     ??uartRecvString_0: (+1)
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       uartRecvChar
   \   00000022   0x0001             MOVS     R1,R0
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x290D             CMP      R1,#+13
   \   00000028   0xD015             BEQ.N    ??uartRecvString_2
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2808             CMP      R0,#+8
   \   0000002E   0xD1EC             BNE.N    ??uartRecvString_1
   \   00000030   0x42AE             CMP      R6,R5
   \   00000032   0xDAF2             BGE.N    ??uartRecvString_0
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       uartSendChar
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       uartSendChar
   \   00000048   0x2108             MOVS     R1,#+8
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       uartSendChar
   \   00000052   0x1E6D             SUBS     R5,R5,#+1
   \   00000054   0xE7E1             B.N      ??uartRecvString_0
    279              } 
    280              
    281              *buff='\0';
   \                     ??uartRecvString_2: (+1)
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7028             STRB     R0,[R5, #+0]
    282              uartSendCh(uartn,'\n');
   \   0000005A   0x210A             MOVS     R1,#+10
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       uartSendCh
    283          }
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
    284          
    285          
    286          /*
    287          ************************************************************************
    288          *  函数名称：uartSendChar
    289          *  功能说明：串口发送一个字节
    290          *  参数说明：UARTn       模块号（UART0~UART5）
    291          *  函数返回：无
    292          *  修改时间：2012-3-20
    293          *  备    注：官方例程
    294          ************************************************************************
    295          */

   \                                 In section .text, align 2, keep-with-next
    296          void uartSendChar (UARTn uartn, char ch)
    297          {
    298              //等待发送缓冲区空
    299              while(!(UART_S1_REG(UARTx[uartn]) & UART_S1_TDRE_MASK));
   \                     uartSendChar: (+1)
   \                     ??uartSendChar_0: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R2,??DataTable5_12
   \   00000004   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000008   0x7912             LDRB     R2,[R2, #+4]
   \   0000000A   0x0612             LSLS     R2,R2,#+24
   \   0000000C   0xD5F8             BPL.N    ??uartSendChar_0
    300              //发送数据
    301              UART_D_REG(UARTx[uartn]) = (u8)ch;
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x....             LDR.N    R2,??DataTable5_12
   \   00000012   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000016   0x71C1             STRB     R1,[R0, #+7]
    302          }
   \   00000018   0x4770             BX       LR               ;; return
    303          /*
    304          ************************************************************************
    305          *  函数名称：uartSendChar
    306          *  功能说明：串口发送一个字节
    307          *  参数说明：UARTn       模块号（UART0~UART5）
    308          *  函数返回：无
    309          *  修改时间：2012-3-20
    310          *  备    注：当发送回车时，自动发送一个换行   
    311          ************************************************************************
    312          */

   \                                 In section .text, align 2, keep-with-next
    313          void uartSendCh (UARTn uartn, char ch)
    314          {
   \                     uartSendCh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    315              if(ch == '\n')
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D0A             CMP      R5,#+10
   \   0000000A   0xD104             BNE.N    ??uartSendCh_0
    316                 uartSendChar(uartn,'\r');
   \   0000000C   0x210D             MOVS     R1,#+13
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       uartSendChar
    317              uartSendChar(uartn,ch);
   \                     ??uartSendCh_0: (+1)
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       uartSendChar
    318          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    319          
    320          
    321          /*
    322          ************************************************************************
    323          *  函数名称：uart_sendN
    324          *  功能说明：串行 接收一个字符串
    325          *  参数说明：UARTn       模块号（UART0~UART5）
    326          *            buff        发送缓冲区
    327          *  函数返回：无
    328          *  修改时间：2012-3-20
    329          *  备    注：
    330          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    331          void uartSendString (UARTn uartn,char* buff)
    332          {
   \                     uartSendString: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0xE005             B.N      ??uartSendString_0
    333              while(*buff)uartSendCh(uartn,*buff++);
   \                     ??uartSendString_1: (+1)
   \   00000008   0x7829             LDRB     R1,[R5, #+0]
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       uartSendCh
   \   00000012   0x1C6D             ADDS     R5,R5,#+1
   \                     ??uartSendString_0: (+1)
   \   00000014   0x7828             LDRB     R0,[R5, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD1F6             BNE.N    ??uartSendString_1
    334          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    335          
    336          
    337          /*
    338          ****************************************************************************
    339          * 函数名: uart0Printf                                                       
    340          * 功  能: 格式化打印一个字符串                                             
    341          * 参  数:                                                                  
    342          * 返  回:                                                                 
    343          * 说  明: 默认为UART0                                                      
    344          ****************************************************************************
    345          */

   \                                 In section .text, align 2, keep-with-next
    346          void uartPrintf(char *pcFmt,...)
    347          {
   \                     uartPrintf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    348                  va_list ap;
    349                  char pbString[256];
    350          
    351                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    352                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    353                  uartSendString(UART_PORT,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       uartSendString
    354                  va_end(ap);
    355          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
    356          void uart0Printf(char *pcFmt,...)
    357          {
   \                     uart0Printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    358                  va_list ap;
    359                  char pbString[256];
    360          
    361                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    362                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    363                  uartSendString(UART0,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       uartSendString
    364                  va_end(ap);
    365          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
    366          void uart1Printf(char *pcFmt,...)
    367          {
   \                     uart1Printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    368                  va_list ap;
    369                  char pbString[256];
    370          
    371                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    372                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    373                  uartSendString(UART1,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       uartSendString
    374                  va_end(ap);
    375          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
    376          void uart2Printf(char *pcFmt,...)
    377          {
   \                     uart2Printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    378                  va_list ap;
    379                  char pbString[256];
    380          
    381                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    382                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    383                  uartSendString(UART2,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0x.... 0x....      BL       uartSendString
    384                  va_end(ap);
    385          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
    386          void uart3Printf(char *pcFmt,...)
    387          {
   \                     uart3Printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    388                  va_list ap;
    389                  char pbString[256];
    390          
    391                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    392                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    393                  uartSendString(UART3,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x.... 0x....      BL       uartSendString
    394                  va_end(ap);
    395          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
    396          void uart4Printf(char *pcFmt,...)
    397          {
   \                     uart4Printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
    398                  va_list ap;
    399                  char pbString[256];
    400          
    401                  va_start(ap,pcFmt);
   \   00000006   0xAA41             ADD      R2,SP,#+260
    402                  vsprintf(pbString,pcFmt,ap);
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       vsprintf
    403                  uartSendString(UART4,pbString);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x.... 0x....      BL       uartSendString
    404                  va_end(ap);
    405          }
   \   00000018   0xB040             ADD      SP,SP,#+256
   \   0000001A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    406          #if K60PIN == 144
    407          void uart5Printf(char *pcFmt,...)
    408          {
    409                  va_list ap;
    410                  char pbString[256];
    411          
    412                  va_start(ap,pcFmt);
    413                  vsprintf(pbString,pcFmt,ap);
    414                  uartSendString(UART5,pbString);
    415                  va_end(ap);
    416          }
    417          #endif
    418          /*
    419          ************************************************************************
    420          *  函数名称：uart_irq_EN
    421          *  功能说明：开串口接收中断
    422          *  参数说明：UARTn       模块号（UART0~UART5）
    423          *  函数返回：无
    424          *  修改时间：2012-3-20
    425          *  备    注：
    426          ************************************************************************
    427          */

   \                                 In section .text, align 2, keep-with-next
    428          void uart_irq_EN(UARTn uartn)
    429          {
   \                     uart_irq_EN: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    430              UART_C2_REG(UARTx[uartn])|=UART_C2_RIE_MASK;      //开放UART接收中断
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable5_12
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x78C9             LDRB     R1,[R1, #+3]
   \   0000000C   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable5_12
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x70D1             STRB     R1,[R2, #+3]
    431              enable_irq((uartn<<1)+45);			      //开接收引脚的IRQ中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x0040             LSLS     R0,R0,#+1
   \   0000001E   0x302D             ADDS     R0,R0,#+45
   \   00000020   0x.... 0x....      BL       enable_irq
    432          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    433          
    434          
    435          /*************************************************************************
    436          *  函数名称：uart_irq_DIS
    437          *  功能说明：关串口接收中断
    438          *  参数说明：UARTn       模块号（UART0~UART5）
    439          *  函数返回：无
    440          *  修改时间：2012-1-20
    441          *  备    注：
    442          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    443          void uart_irq_DIS(UARTn uartn)
    444          {
   \                     uart_irq_DIS: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    445              UART_C2_REG(UARTx[uartn])&=~UART_C2_RIE_MASK;     //禁止UART接收中断
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable5_12
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x78C9             LDRB     R1,[R1, #+3]
   \   0000000C   0xF011 0x01DF      ANDS     R1,R1,#0xDF
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable5_12
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x70D1             STRB     R1,[R2, #+3]
    446              disable_irq((uartn<<1)+45);			      //关接收引脚的IRQ中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x0040             LSLS     R0,R0,#+1
   \   0000001E   0x302D             ADDS     R0,R0,#+45
   \   00000020   0x.... 0x....      BL       disable_irq
    447          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x4004D064         DC32     0x4004d064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x40048028         DC32     0x40048028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     UARTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     bus_clk_khz
    448          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     272   uart0Printf
       272   -> uartSendString
       272   -> vsprintf
     272   uart1Printf
       272   -> uartSendString
       272   -> vsprintf
     272   uart2Printf
       272   -> uartSendString
       272   -> vsprintf
     272   uart3Printf
       272   -> uartSendString
       272   -> vsprintf
     272   uart4Printf
       272   -> uartSendString
       272   -> vsprintf
       0   uartPendChar
     272   uartPrintf
       272   -> uartSendString
       272   -> vsprintf
       0   uartRecvChar
      16   uartRecvString
        16   -> uartRecvChar
        16   -> uartSendCh
        16   -> uartSendChar
      16   uartSendCh
        16   -> uartSendChar
       0   uartSendChar
      16   uartSendString
        16   -> uartSendCh
       8   uart_init
       8   uart_irq_DIS
         8   -> disable_irq
       8   uart_irq_EN
         8   -> enable_irq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      24  UARTx
      30  uart0Printf
      30  uart1Printf
      30  uart2Printf
      30  uart3Printf
      30  uart4Printf
      50  uartPendChar
      30  uartPrintf
      26  uartRecvChar
     102  uartRecvString
      36  uartSendCh
      26  uartSendChar
      28  uartSendString
     396  uart_init
      38  uart_irq_DIS
      38  uart_irq_EN

 
  24 bytes in section .data
 980 bytes in section .text
 
 980 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
