###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  19:53:05 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\m #
#                    otor\motor.c                                             #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\m #
#                    otor\motor.c -lCN C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\List\ -lB                     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\motor.lst                                  #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\motor.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\motor\motor.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程
      4          * 文件名 :[motor.c]
      5          * 描  述 ：电机驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：电机驱动函数
      9          ***********************************************************************
     10          */
     11          
     12          #include "motor.h"
     13          
     14          
     15          
     16          /********************************************************************
     17          ** 函数名称: motor_init()
     18          ** 功能描述: 电机初始化
     19          ** 入口：角度值
     20          ** 出口：
     21          ** 说明:
     22          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          void motor_init()
     24          {
   \                     motor_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     25              ASSERT_RST(abs(MOTOR_MAX) <= FTM_PRECISON,"最大值不能超过PWM精度值");
   \   00000002   0xF44F 0x5016      MOV      R0,#+9600
   \   00000006   0x.... 0x....      BL       abs
   \   0000000A   0xF242 0x7111      MOVW     R1,#+10001
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD304             BCC.N    ??motor_init_0
   \   00000012   0x....             LDR.N    R2,??DataTable1
   \   00000014   0x2119             MOVS     R1,#+25
   \   00000016   0x....             LDR.N    R0,??DataTable1_1
   \   00000018   0x.... 0x....      BL       assert_failed_rst
     26              ASSERT_RST(abs(MOTOR_MIN) <= FTM_PRECISON,"最小值不能超过PWM精度值");
   \                     ??motor_init_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable1_2  ;; 0xffffda80
   \   0000001E   0x.... 0x....      BL       abs
   \   00000022   0xF242 0x7111      MOVW     R1,#+10001
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD304             BCC.N    ??motor_init_1
   \   0000002A   0x....             LDR.N    R2,??DataTable1_3
   \   0000002C   0x211A             MOVS     R1,#+26
   \   0000002E   0x....             LDR.N    R0,??DataTable1_1
   \   00000030   0x.... 0x....      BL       assert_failed_rst
     27          
     28              //初始化FTM0_CH0 CH1 CH2 CH3输出频率为 16kHZ,占空比为 50% 的PWM;
     29              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH0,MOTOR_FREQ,MOTOR_INIT_VAL);
   \                     ??motor_init_1: (+1)
   \   00000034   0xF241 0x3388      MOVW     R3,#+5000
   \   00000038   0xF44F 0x527A      MOV      R2,#+16000
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       FTM_PWM_init
     30              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH1,MOTOR_FREQ,MOTOR_INIT_VAL);
   \   00000044   0xF241 0x3388      MOVW     R3,#+5000
   \   00000048   0xF44F 0x527A      MOV      R2,#+16000
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       FTM_PWM_init
     31          #if MOTOR_DOUBLE
     32              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH2,MOTOR_FREQ,MOTOR_INIT_VAL);
   \   00000054   0xF241 0x3388      MOVW     R3,#+5000
   \   00000058   0xF44F 0x527A      MOV      R2,#+16000
   \   0000005C   0x2102             MOVS     R1,#+2
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       FTM_PWM_init
     33              FTM_PWM_init(MOTOR_FTMN,MOTOR_FTMCH3,MOTOR_FREQ,MOTOR_INIT_VAL);
   \   00000064   0xF241 0x3388      MOVW     R3,#+5000
   \   00000068   0xF44F 0x527A      MOV      R2,#+16000
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       FTM_PWM_init
     34          #endif
     35          }
   \   00000074   0xBD01             POP      {R0,PC}          ;; return
     36          #if !MOTOR_DOUBLE
     37          /********************************************************************
     38          ** 函数名称: PWMSetMotor
     39          ** 功能描述: 设置速度
     40          ** 入口：速度
     41          ** 出口：
     42          ** 说明:
     43          *********************************************************************/
     44          void PWMSetMotor(s32 speed_pwm)
     45          {
     46              if(speed_pwm < MOTOR_MIN)
     47              {
     48                speed_pwm = MOTOR_MIN;
     49              }
     50              if(speed_pwm > MOTOR_MAX)
     51              {
     52                speed_pwm = MOTOR_MAX;
     53              }
     54          
     55              if(speed_pwm > 0)
     56              {
     57                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,(u32)speed_pwm);
     58                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,0);
     59              }
     60              else
     61              {
     62                 speed_pwm = -speed_pwm;
     63                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,(u32)speed_pwm);
     64                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,0);
     65              }
     66          }
     67          
     68          /********************************************************************
     69          ** 函数名称: motorCtrl
     70          ** 功能描述: 速度控制算法
     71          ** 入口：
     72          ** 出口：
     73          ** 说明:
     74          *********************************************************************/
     75          void motorCtrl()
     76          {
     77              /***
     78            s32 speed_pwm;
     79          
     80              speed_pwm = 0;    //去除warning
     81          
     82              //自己的速度控制算法
     83          
     84          
     85          
     86              PWMSetMotor(speed_pwm);
     87            ***/
     88          }
     89          
     90          #endif
     91          
     92          
     93          #if MOTOR_DOUBLE
     94          /********************************************************************
     95          ** 函数名称: PWMSetMotor2
     96          ** 功能描述: 设置速度
     97          ** 入口：左右速度
     98          ** 出口：
     99          ** 说明:
    100          *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          void PWMSetMotor2(s32 speed_pwmL,s32 speed_pwmR)
    102          {
   \                     PWMSetMotor2: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    103              if(speed_pwmL < MOTOR_MIN)
   \   00000004   0xF510 0x5F16      CMN      R0,#+9600
   \   00000008   0xDA00             BGE.N    ??PWMSetMotor2_0
    104              {
    105                speed_pwmL = MOTOR_MIN;
   \   0000000A   0x....             LDR.N    R0,??DataTable1_2  ;; 0xffffda80
    106              }
    107              if(speed_pwmL > MOTOR_MAX)
   \                     ??PWMSetMotor2_0: (+1)
   \   0000000C   0xF5B0 0x5F16      CMP      R0,#+9600
   \   00000010   0xDD01             BLE.N    ??PWMSetMotor2_1
    108              {
    109                speed_pwmL = MOTOR_MAX;
   \   00000012   0xF44F 0x5016      MOV      R0,#+9600
    110              }
    111          
    112              if(speed_pwmR < MOTOR_MIN)
   \                     ??PWMSetMotor2_1: (+1)
   \   00000016   0xF514 0x5F16      CMN      R4,#+9600
   \   0000001A   0xDA00             BGE.N    ??PWMSetMotor2_2
    113              {
    114                speed_pwmR = MOTOR_MIN;
   \   0000001C   0x....             LDR.N    R4,??DataTable1_2  ;; 0xffffda80
    115              }
    116              if(speed_pwmR > MOTOR_MAX)
   \                     ??PWMSetMotor2_2: (+1)
   \   0000001E   0xF5B4 0x5F16      CMP      R4,#+9600
   \   00000022   0xDD01             BLE.N    ??PWMSetMotor2_3
    117              {
    118                speed_pwmR = MOTOR_MAX;
   \   00000024   0xF44F 0x5416      MOV      R4,#+9600
    119              }
    120          
    121              if(speed_pwmL > 0)
   \                     ??PWMSetMotor2_3: (+1)
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xDB0A             BLT.N    ??PWMSetMotor2_4
    122              {
    123                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,(u32)speed_pwmL);
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       FTM_PWM_Duty
    124                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,0);
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       FTM_PWM_Duty
   \   00000040   0xE00A             B.N      ??PWMSetMotor2_5
    125              }
    126              else
    127              {
    128                 speed_pwmL = -speed_pwmL;
   \                     ??PWMSetMotor2_4: (+1)
   \   00000042   0x4240             RSBS     R0,R0,#+0
    129                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH1,(u32)speed_pwmL);
   \   00000044   0x0002             MOVS     R2,R0
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       FTM_PWM_Duty
    130                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH0,0);
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       FTM_PWM_Duty
    131              }
    132          
    133              if(speed_pwmR > 0)
   \                     ??PWMSetMotor2_5: (+1)
   \   00000058   0x2C01             CMP      R4,#+1
   \   0000005A   0xDB0A             BLT.N    ??PWMSetMotor2_6
    134              {
    135                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH2,(u32)speed_pwmR);
   \   0000005C   0x0022             MOVS     R2,R4
   \   0000005E   0x2102             MOVS     R1,#+2
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       FTM_PWM_Duty
    136                  FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH3,0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2103             MOVS     R1,#+3
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       FTM_PWM_Duty
   \   00000070   0xE00A             B.N      ??PWMSetMotor2_7
    137              }
    138              else
    139              {
    140                 speed_pwmR = -speed_pwmR;
   \                     ??PWMSetMotor2_6: (+1)
   \   00000072   0x4264             RSBS     R4,R4,#+0
    141                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH3,(u32)speed_pwmR);
   \   00000074   0x0022             MOVS     R2,R4
   \   00000076   0x2103             MOVS     R1,#+3
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       FTM_PWM_Duty
    142                 FTM_PWM_Duty(MOTOR_FTMN,MOTOR_FTMCH2,0);
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x2102             MOVS     R1,#+2
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       FTM_PWM_Duty
    143              }
    144          }
   \                     ??PWMSetMotor2_7: (+1)
   \   00000088   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `?<Constant "\\327\\356\\264\\363\\326\\265\\262\\273\\3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xFFFFDA80         DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `?<Constant "\\327\\356\\320\\241\\326\\265\\262\\273\\3`

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 4DH
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0x4D    
   \   00000020   0x50 0x55          DC8 50H, 55H, 36H, 30H, 35H, 30H, 38H, 2EH
   \              0x36 0x30    
   \              0x35 0x30    
   \              0x38 0x2E    
   \   00000028   0x31 0x32          DC8 31H, 32H, 5CH, 73H, 72H, 63H, 5CH, 64H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x64    
   \   00000030   0x72 0x69          DC8 72H, 69H, 76H, 65H, 72H, 73H, 5CH, 6DH
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x5C 0x6D    
   \   00000038   0x6F 0x74          DC8 6FH, 74H, 6FH, 72H, 5CH, 6DH, 6FH, 74H
   \              0x6F 0x72    
   \              0x5C 0x6D    
   \              0x6F 0x74    
   \   00000040   0x6F 0x72          DC8 6FH, 72H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\327\\356\\264\\363\\326\\265\\262\\273\\3`:
   \   00000000   0xD7 0xEE          DC8 "\327\356\264\363\326\265\262\273\304\334\263\254\271\375PWM\276\253\266\310\326\265"
   \              0xB4 0xF3    
   \              0xD6 0xB5    
   \              0xB2 0xBB    
   \              0xC4 0xDC    
   \              0xB3 0xAC    
   \              0xB9 0xFD    
   \              0x50 0x57    
   \              0x4D 0xBE    
   \              0xAB 0xB6    
   \              0xC8 0xD6    
   \              0xB5 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\327\\356\\320\\241\\326\\265\\262\\273\\3`:
   \   00000000   0xD7 0xEE          DC8 "\327\356\320\241\326\265\262\273\304\334\263\254\271\375PWM\276\253\266\310\326\265"
   \              0xD0 0xA1    
   \              0xD6 0xB5    
   \              0xB2 0xBB    
   \              0xC4 0xDC    
   \              0xB3 0xAC    
   \              0xB9 0xFD    
   \              0x50 0x57    
   \              0x4D 0xBE    
   \              0xAB 0xB6    
   \              0xC8 0xD6    
   \              0xB5 0x00    
    145          
    146          /********************************************************************
    147          ** 函数名称: motorSpeedOut
    148          ** 功能描述: 速度控制算法
    149          ** 入口：
    150          ** 出口：
    151          ** 说明:
    152          *********************************************************************/
    153          /*void motorSpeedOut()
    154          {
    155            s32 fLeftVal, fRightVal;
    156          
    157            fLeftVal = g_lLeftMotorOut;
    158            fRightVal = g_lRightMotorOut;
    159            
    160            if(fLeftVal > 0) 			
    161              fLeftVal += MOTOR_OUT_DEAD_VAL_LEFT_FORWARD;
    162            else if(fLeftVal < 0) 		
    163              fLeftVal -= MOTOR_OUT_DEAD_VAL_LEFT_BACKWARD;
    164            if(fRightVal > 0)			
    165              fRightVal += MOTOR_OUT_DEAD_VAL_RIGHT_FORWARD;
    166            else if(fRightVal < 0)		
    167              fRightVal -= MOTOR_OUT_DEAD_VAL_RIGHT_BACKWARD;
    168          
    169            if(fLeftVal > MOTOR_OUT_MAX)	
    170              fLeftVal = MOTOR_OUT_MAX;
    171            if(fLeftVal < MOTOR_OUT_MIN)	
    172              fLeftVal = MOTOR_OUT_MIN;
    173            if(fRightVal > MOTOR_OUT_MAX)	
    174              fRightVal = MOTOR_OUT_MAX;
    175            if(fRightVal < MOTOR_OUT_MIN)	
    176              fRightVal = MOTOR_OUT_MIN;
    177          
    178            PWMSetMotor2(fLeftVal, fRightVal);
    179          }
    180          
    181          /********************************************************************
    182          ** 函数名称: motorCtrl
    183          ** 功能描述: 速度控制算法
    184          ** 入口：
    185          ** 出口：
    186          ** 说明:
    187          *********************************************************************/
    188          /*void motorCtrl()
    189          {
    190            float fLeft, fRight;
    191          
    192            fLeft = g_fAngleControlOut - g_fSpeedControlOut + g_fDirectionControlOut;
    193            fRight = g_fAngleControlOut - g_fSpeedControlOut- g_fDirectionControlOut; 
    194          
    195          
    196            // 看似控制速度的系数，我需要改动它来进行调试.
    197          //  fLeft *= 10000;//10000
    198          //  fRight *= 10000;//10000
    199            
    200             fLeft *= 10000;//10000
    201            fRight *= 10000;//10000
    202            
    203            
    204            if(fLeft > MOTOR_OUT_MAX)
    205              fLeft = MOTOR_OUT_MAX;
    206            if(fLeft < MOTOR_OUT_MIN)	
    207              fLeft = MOTOR_OUT_MIN;
    208            if(fRight > MOTOR_OUT_MAX)
    209              fRight = MOTOR_OUT_MAX;
    210            if(fRight < MOTOR_OUT_MIN)
    211              fRight = MOTOR_OUT_MIN;
    212          
    213            g_lLeftMotorOut = (long int)fLeft;
    214            g_lRightMotorOut = (long int)fRight;
    215            
    216            motorSpeedOut();
    217           
    218          }*/
    219          
    220          
    221          
    222          #endif
    223          
    224          
    225          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PWMSetMotor2
         8   -> FTM_PWM_Duty
       8   motor_init
         8   -> FTM_PWM_init
         8   -> abs
         8   -> assert_failed_rst


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  ?<Constant "C:\\Users\\Administrato...">
      24  ?<Constant "\327\356\264\363\326\265\262\273\3
      24  ?<Constant "\327\356\320\241\326\265\262\273\3
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
     138  PWMSetMotor2
     118  motor_init

 
 120 bytes in section .rodata
 272 bytes in section .text
 
 272 bytes of CODE  memory
 120 bytes of CONST memory

Errors: none
Warnings: 1
