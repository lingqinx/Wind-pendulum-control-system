###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  19:53:05 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\M #
#                    MA845x\MMA845x.c                                         #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\M #
#                    MA845x\MMA845x.c -lCN C:\Users\Administrator\Desktop\MPU #
#                    60508.12\build\gpio_demo\FLASH\List\ -lB                 #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\MMA845x.lst                                #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\MMA845x.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\MMA845x\MMA845x.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[MMA845x.c] 
      5          * 描  述 ：MMA845x函数定义
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：MMA845x函数定义
      9          ***********************************************************************
     10          */
     11          
     12          #include "MMA845x.h"
     13          
     14          #ifdef K60IIC
     15          
     16          /*************************************************************************
     17          *  函数名称：MMA845x_Init
     18          *  功能说明：初始化8451
     19          *  参数说明：无
     20          *  函数返回：无
     21          *  修改时间：2012-2-2   已测试
     22          *  备    注：
     23          *************************************************************************/
     24          void MMA845x_Init(void)
     25          {
     26              char v = 0;
     27              I2C_init(MMA845xI2C);                                 //初始化I2C0
     28                 
     29              MMA845x_WRITE_BYTE(CTRL_REG1,ASLP_RATE_20MS+DATA_RATE_5MS);	
     30              MMA845x_WRITE_BYTE(XYZ_DATA_CFG_REG, FULL_SCALE_2G); //2G
     31              MMA845x_WRITE_BYTE(CTRL_REG1, ACTIVE_MASK);          //激活状态
     32              
     33              v= MMA845x_READ_BYTE(WHO_AM_I_REG);
     34              if((v == MMA8451Q_ID)||(v == MMA8452Q_ID)||(v == MMA8453Q_ID)) 
     35              {
     36                 uartPrintf("\n8451  init OK!");    
     37              }
     38              else
     39              {
     40                 uartPrintf("\n8451  init Failed!");  	
     41              }
     42              /* //测试寄存器是否写入
     43              //MMA845x_WRITE_BYTE(CTRL_REG1,0xBA);
     44              v= MMA845x_READ_BYTE(CTRL_REG1);
     45              uartPrintf("\ndata = 0x%X\n",v);  
     46              v= MMA845x_READ_BYTE(XYZ_DATA_CFG_REG);
     47              uartPrintf("\ndata = 0x%X\n",v);
     48              */
     49          }
     50          
     51          /*************************************************************************
     52          *  函数名称：MMA845x_readbyte
     53          *  功能说明：从特定地址读取一个值
     54          *  参数说明：无
     55          *  函数返回：无
     56          *  修改时间：2012-2-2   已测试
     57          *  备    注：
     58          *************************************************************************/
     59          unsigned char MMA845x_readbyte(unsigned char address)
     60          {
     61              return I2C_ReadAddr(MMA845xI2C,MMA845x_IIC_ADDRESS,address);
     62          }
     63          
     64          
     65          /*************************************************************************
     66          *  函数名称：MMA845x_readbyte
     67          *  功能说明：从特定地址写入一个值
     68          *  参数说明：无
     69          *  函数返回：无
     70          *  修改时间：2012-2-2   已测试
     71          *  备    注：
     72          *************************************************************************/
     73          void MMA845x_writebyte(unsigned char address, unsigned char thedata)
     74          {
     75              I2C_WriteAddr(MMA845xI2C,MMA845x_IIC_ADDRESS,address,thedata);
     76          }
     77          
     78          /*************************************************************************
     79          *  函数名称：Get845xX_xbit
     80          *  功能说明：读取一个值
     81          *  参数说明：u8 N  取平均的次数
     82          *  函数返回：无
     83          *  修改时间：2012-2-2   已测试
     84          *  备    注：经测试读取一次的时间是0.11ms,建议每ms读取5次求平均
     85          *************************************************************************/
     86          u8 Get845xX_8bit(u8 N) 
     87          {
     88              u16 tmp = 0;
     89              u8 i = 0;
     90              
     91              for(i = 0; i < N; i++)
     92                  tmp += MMA845x_READ_BYTE(OUT_X_MSB_REG); 
     93              tmp = tmp / N;
     94              
     95              return (u8)tmp;
     96          }
     97          
     98          u16 Get845xX_10bit(u8 N) 
     99          {
    100              u32 tmp = 0;
    101              u8 i = 0;
    102              u16 xm = 0;
    103              u16 xl = 0;
    104              for(i = 0; i < N; i++)
    105              {
    106                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
    107                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
    108                
    109                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 6) & 0x03FF);
    110              }
    111              tmp = tmp / N;
    112              return (u16)tmp;
    113          }
    114          
    115          
    116          u16 Get845xX_12bit(u8 N) 
    117          {
    118              u32 tmp = 0;
    119              u8 i = 0;
    120              u16 xm = 0;
    121              u16 xl = 0;
    122              for(i = 0; i < N; i++)
    123              {
    124                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
    125                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
    126                
    127                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 4) & 0x0FFF);
    128              }
    129              tmp = tmp / N;
    130              return (u16)tmp;
    131          }
    132          
    133          u16 Get845xX_14bit(u8 N) 
    134          {
    135              u32 tmp = 0;
    136              u8 i = 0;
    137              u16 xm = 0;
    138              u16 xl = 0;
    139              for(i = 0; i < N; i++)
    140              {
    141                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
    142                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
    143                
    144                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 2) & 0x3FFF);
    145              }
    146              tmp = tmp / N;
    147              return (u16)tmp;
    148          }
    149          
    150          u8 Get845xY_8bit(u8 N) 
    151          {
    152              u16 tmp = 0;
    153              u8 i = 0;
    154              
    155              for(i = 0; i < N; i++)
    156                  tmp += MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
    157              tmp = tmp / N;
    158              
    159              return (u8)tmp;
    160          }
    161          
    162          u16 Get845xY_10bit(u8 N) 
    163          {
    164              u32 tmp = 0;
    165              u8 i = 0;
    166              u16 ym = 0;
    167              u16 yl = 0;
    168              for(i = 0; i < N; i++)
    169              {
    170                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
    171                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
    172                
    173                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 6) & 0x03FF);
    174              }
    175              tmp = tmp / N;
    176              return (u16)tmp;
    177          }
    178          
    179          
    180          u16 Get845xY_12bit(u8 N) 
    181          {
    182              u32 tmp = 0;
    183              u8 i = 0;
    184              u16 ym = 0;
    185              u16 yl = 0;
    186              for(i = 0; i < N; i++)
    187              {
    188                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
    189                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
    190                
    191                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 4) & 0x0FFF);
    192              }
    193              tmp = tmp / N;
    194              return (u16)tmp;
    195          }
    196          
    197          u16 Get845xY_14bit(u8 N) 
    198          {
    199              u32 tmp = 0;
    200              u8 i = 0;
    201              u16 ym = 0;
    202              u16 yl = 0;
    203              for(i = 0; i < N; i++)
    204              {
    205                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
    206                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
    207                
    208                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 2) & 0x3FFF);
    209              }
    210              tmp = tmp / N;
    211              return (u16)tmp;
    212          }
    213          u8 Get845xZ_8bit(u8 N) 
    214          {
    215              u16 tmp = 0;
    216              u8 i = 0;
    217              
    218              for(i = 0; i < N; i++)
    219                  tmp += MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
    220              tmp = tmp / N;
    221              
    222              return (u8)tmp;
    223          }
    224          
    225          u16 Get845xZ_10bit(u8 N) 
    226          {
    227              u32 tmp = 0;
    228              u8 i = 0;
    229              u16 zm = 0;
    230              u16 zl = 0;
    231              for(i = 0; i < N; i++)
    232              {
    233                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
    234                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
    235                
    236                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 6) & 0x03FF);
    237              }
    238              tmp = tmp / N;
    239              return (u16)tmp;
    240          }
    241          
    242          
    243          u16 Get845xZ_12bit(u8 N) 
    244          {
    245              u32 tmp = 0;
    246              u8 i = 0;
    247              u16 zm = 0;
    248              u16 zl = 0;
    249              for(i = 0; i < N; i++)
    250              {
    251                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
    252                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
    253                
    254                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 4) & 0x0FFF);
    255              }
    256              tmp = tmp / N;
    257              return (u16)tmp;
    258          }
    259          
    260          u16 Get845xZ_14bit(u8 N) 
    261          {
    262              u32 tmp = 0;
    263              u8 i = 0;
    264              u16 zm = 0;
    265              u16 zl = 0;
    266              for(i = 0; i < N; i++)
    267              {
    268                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
    269                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
    270                
    271                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 2) & 0x3FFF);
    272              }
    273              tmp = tmp / N;
    274              return (u16)tmp;
    275          }
    276          
    277          
    278          #endif
    279          
    280          #ifdef   IOIIC            // 模拟IIC
    281          #include "ioi2c.h"
    282          

   \                                 In section .text, align 2, keep-with-next
    283          unsigned char MMA845x_readbyte(unsigned char address)
    284          {
   \                     MMA845x_readbyte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    285                  unsigned char ret = 100;
   \   00000004   0x2564             MOVS     R5,#+100
    286          	IIC_start();		//启动
   \   00000006   0x.... 0x....      BL       IIC_start
    287          	send_byte(MMA845x_IIC_ADDRESS);	//写入设备ID及写信号
   \   0000000A   0x2038             MOVS     R0,#+56
   \   0000000C   0x.... 0x....      BL       send_byte
    288          	send_byte(address);	//X地址
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       send_byte
    289          	IIC_start();		//重新发送开始
   \   00000018   0x.... 0x....      BL       IIC_start
    290          	send_byte(MMA845x_IIC_ADDRESS+1);	//写入设备ID及读信
   \   0000001C   0x2039             MOVS     R0,#+57
   \   0000001E   0x.... 0x....      BL       send_byte
    291          	ret = read_byte();	//读取一字节
   \   00000022   0x.... 0x....      BL       read_byte
   \   00000026   0x0005             MOVS     R5,R0
    292          	IIC_stop();
   \   00000028   0x.... 0x....      BL       IIC_stop
    293          	return ret;
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    294          }
    295          
    296          //写入

   \                                 In section .text, align 2, keep-with-next
    297          void MMA845x_writebyte(unsigned char address, unsigned char thedata)
    298          {
   \                     MMA845x_writebyte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    299          	IIC_start();		//启动
   \   00000006   0x.... 0x....      BL       IIC_start
    300          	send_byte(MMA845x_IIC_ADDRESS);	//写入设备ID及写信号
   \   0000000A   0x2038             MOVS     R0,#+56
   \   0000000C   0x.... 0x....      BL       send_byte
    301          	send_byte(address);	//X地址
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       send_byte
    302          	send_byte(thedata);	//写入设备ID及读信
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       send_byte
    303          	IIC_stop();
   \   00000020   0x.... 0x....      BL       IIC_stop
    304          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    305          
    306          //初始化
    307          //初始化为指定模式

   \                                 In section .text, align 4, keep-with-next
    308          void MMA845x_init()
    309          {	
   \                     MMA845x_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    310                  byte v;
    311                  gpio_init(PORTB,0,GPO,1);
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       gpio_init
    312                  gpio_init(PORTB,1,GPO,1);
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       gpio_init
    313          	
    314          	MMA845x_writebyte(CTRL_REG1,ASLP_RATE_20MS+DATA_RATE_5MS);	
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x202A             MOVS     R0,#+42
   \   0000001E   0x.... 0x....      BL       MMA845x_writebyte
    315          	ioi2cnops(); ioi2cnops(); 
   \   00000022   0xBF00             nop
   \   00000024   0xBF00             nop
   \   00000026   0xBF00             nop
   \   00000028   0xBF00             nop
   \   0000002A   0xBF00             nop
   \   0000002C   0xBF00             nop
   \   0000002E   0xBF00             nop
   \   00000030   0xBF00             nop
   \   00000032   0xBF00             nop
   \   00000034   0xBF00             nop
   \   00000036   0xBF00             nop
   \   00000038   0xBF00             nop
   \   0000003A   0xBF00             nop
   \   0000003C   0xBF00             nop
   \   0000003E   0xBF00             nop
   \   00000040   0xBF00             nop
   \   00000042   0xBF00             nop
   \   00000044   0xBF00             nop
   \   00000046   0xBF00             nop
   \   00000048   0xBF00             nop
   \   0000004A   0xBF00             nop
   \   0000004C   0xBF00             nop
   \   0000004E   0xBF00             nop
   \   00000050   0xBF00             nop
   \   00000052   0xBF00             nop
   \   00000054   0xBF00             nop
   \   00000056   0xBF00             nop
   \   00000058   0xBF00             nop
   \   0000005A   0xBF00             nop
   \   0000005C   0xBF00             nop
   \   0000005E   0xBF00             nop
   \   00000060   0xBF00             nop
   \   00000062   0xBF00             nop
   \   00000064   0xBF00             nop
   \   00000066   0xBF00             nop
   \   00000068   0xBF00             nop
   \   0000006A   0xBF00             nop
   \   0000006C   0xBF00             nop
   \   0000006E   0xBF00             nop
   \   00000070   0xBF00             nop
   \   00000072   0xBF00             nop
   \   00000074   0xBF00             nop
   \   00000076   0xBF00             nop
   \   00000078   0xBF00             nop
   \   0000007A   0xBF00             nop
   \   0000007C   0xBF00             nop
   \   0000007E   0xBF00             nop
   \   00000080   0xBF00             nop
   \   00000082   0xBF00             nop
   \   00000084   0xBF00             nop
   \   00000086   0xBF00             nop
   \   00000088   0xBF00             nop
   \   0000008A   0xBF00             nop
   \   0000008C   0xBF00             nop
   \   0000008E   0xBF00             nop
   \   00000090   0xBF00             nop
   \   00000092   0xBF00             nop
   \   00000094   0xBF00             nop
   \   00000096   0xBF00             nop
   \   00000098   0xBF00             nop
   \   0000009A   0xBF00             nop
   \   0000009C   0xBF00             nop
   \   0000009E   0xBF00             nop
   \   000000A0   0xBF00             nop
   \   000000A2   0xBF00             nop
   \   000000A4   0xBF00             nop
   \   000000A6   0xBF00             nop
   \   000000A8   0xBF00             nop
   \   000000AA   0xBF00             nop
   \   000000AC   0xBF00             nop
   \   000000AE   0xBF00             nop
   \   000000B0   0xBF00             nop
   \   000000B2   0xBF00             nop
   \   000000B4   0xBF00             nop
   \   000000B6   0xBF00             nop
   \   000000B8   0xBF00             nop
   \   000000BA   0xBF00             nop
   \   000000BC   0xBF00             nop
   \   000000BE   0xBF00             nop
   \   000000C0   0xBF00             nop
   \   000000C2   0xBF00             nop
   \   000000C4   0xBF00             nop
   \   000000C6   0xBF00             nop
   \   000000C8   0xBF00             nop
   \   000000CA   0xBF00             nop
   \   000000CC   0xBF00             nop
   \   000000CE   0xBF00             nop
   \   000000D0   0xBF00             nop
   \   000000D2   0xBF00             nop
   \   000000D4   0xBF00             nop
   \   000000D6   0xBF00             nop
   \   000000D8   0xBF00             nop
   \   000000DA   0xBF00             nop
   \   000000DC   0xBF00             nop
   \   000000DE   0xBF00             nop
   \   000000E0   0xBF00             nop
   \   000000E2   0xBF00             nop
   \   000000E4   0xBF00             nop
   \   000000E6   0xBF00             nop
   \   000000E8   0xBF00             nop
    316          	MMA845x_writebyte(XYZ_DATA_CFG_REG, FULL_SCALE_2G); //2G
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0x200E             MOVS     R0,#+14
   \   000000EE   0x.... 0x....      BL       MMA845x_writebyte
    317          	ioi2cnops(); ioi2cnops(); 
   \   000000F2   0xBF00             nop
   \   000000F4   0xBF00             nop
   \   000000F6   0xBF00             nop
   \   000000F8   0xBF00             nop
   \   000000FA   0xBF00             nop
   \   000000FC   0xBF00             nop
   \   000000FE   0xBF00             nop
   \   00000100   0xBF00             nop
   \   00000102   0xBF00             nop
   \   00000104   0xBF00             nop
   \   00000106   0xBF00             nop
   \   00000108   0xBF00             nop
   \   0000010A   0xBF00             nop
   \   0000010C   0xBF00             nop
   \   0000010E   0xBF00             nop
   \   00000110   0xBF00             nop
   \   00000112   0xBF00             nop
   \   00000114   0xBF00             nop
   \   00000116   0xBF00             nop
   \   00000118   0xBF00             nop
   \   0000011A   0xBF00             nop
   \   0000011C   0xBF00             nop
   \   0000011E   0xBF00             nop
   \   00000120   0xBF00             nop
   \   00000122   0xBF00             nop
   \   00000124   0xBF00             nop
   \   00000126   0xBF00             nop
   \   00000128   0xBF00             nop
   \   0000012A   0xBF00             nop
   \   0000012C   0xBF00             nop
   \   0000012E   0xBF00             nop
   \   00000130   0xBF00             nop
   \   00000132   0xBF00             nop
   \   00000134   0xBF00             nop
   \   00000136   0xBF00             nop
   \   00000138   0xBF00             nop
   \   0000013A   0xBF00             nop
   \   0000013C   0xBF00             nop
   \   0000013E   0xBF00             nop
   \   00000140   0xBF00             nop
   \   00000142   0xBF00             nop
   \   00000144   0xBF00             nop
   \   00000146   0xBF00             nop
   \   00000148   0xBF00             nop
   \   0000014A   0xBF00             nop
   \   0000014C   0xBF00             nop
   \   0000014E   0xBF00             nop
   \   00000150   0xBF00             nop
   \   00000152   0xBF00             nop
   \   00000154   0xBF00             nop
   \   00000156   0xBF00             nop
   \   00000158   0xBF00             nop
   \   0000015A   0xBF00             nop
   \   0000015C   0xBF00             nop
   \   0000015E   0xBF00             nop
   \   00000160   0xBF00             nop
   \   00000162   0xBF00             nop
   \   00000164   0xBF00             nop
   \   00000166   0xBF00             nop
   \   00000168   0xBF00             nop
   \   0000016A   0xBF00             nop
   \   0000016C   0xBF00             nop
   \   0000016E   0xBF00             nop
   \   00000170   0xBF00             nop
   \   00000172   0xBF00             nop
   \   00000174   0xBF00             nop
   \   00000176   0xBF00             nop
   \   00000178   0xBF00             nop
   \   0000017A   0xBF00             nop
   \   0000017C   0xBF00             nop
   \   0000017E   0xBF00             nop
   \   00000180   0xBF00             nop
   \   00000182   0xBF00             nop
   \   00000184   0xBF00             nop
   \   00000186   0xBF00             nop
   \   00000188   0xBF00             nop
   \   0000018A   0xBF00             nop
   \   0000018C   0xBF00             nop
   \   0000018E   0xBF00             nop
   \   00000190   0xBF00             nop
   \   00000192   0xBF00             nop
   \   00000194   0xBF00             nop
   \   00000196   0xBF00             nop
   \   00000198   0xBF00             nop
   \   0000019A   0xBF00             nop
   \   0000019C   0xBF00             nop
   \   0000019E   0xBF00             nop
   \   000001A0   0xBF00             nop
   \   000001A2   0xBF00             nop
   \   000001A4   0xBF00             nop
   \   000001A6   0xBF00             nop
   \   000001A8   0xBF00             nop
   \   000001AA   0xBF00             nop
   \   000001AC   0xBF00             nop
   \   000001AE   0xBF00             nop
   \   000001B0   0xBF00             nop
   \   000001B2   0xBF00             nop
   \   000001B4   0xBF00             nop
   \   000001B6   0xBF00             nop
   \   000001B8   0xBF00             nop
    318          	MMA845x_writebyte(CTRL_REG1, ACTIVE_MASK);          //激活状态
   \   000001BA   0x2101             MOVS     R1,#+1
   \   000001BC   0x202A             MOVS     R0,#+42
   \   000001BE   0x.... 0x....      BL       MMA845x_writebyte
    319          	ioi2cnops(); ioi2cnops(); 
   \   000001C2   0xBF00             nop
   \   000001C4   0xBF00             nop
   \   000001C6   0xBF00             nop
   \   000001C8   0xBF00             nop
   \   000001CA   0xBF00             nop
   \   000001CC   0xBF00             nop
   \   000001CE   0xBF00             nop
   \   000001D0   0xBF00             nop
   \   000001D2   0xBF00             nop
   \   000001D4   0xBF00             nop
   \   000001D6   0xBF00             nop
   \   000001D8   0xBF00             nop
   \   000001DA   0xBF00             nop
   \   000001DC   0xBF00             nop
   \   000001DE   0xBF00             nop
   \   000001E0   0xBF00             nop
   \   000001E2   0xBF00             nop
   \   000001E4   0xBF00             nop
   \   000001E6   0xBF00             nop
   \   000001E8   0xBF00             nop
   \   000001EA   0xBF00             nop
   \   000001EC   0xBF00             nop
   \   000001EE   0xBF00             nop
   \   000001F0   0xBF00             nop
   \   000001F2   0xBF00             nop
   \   000001F4   0xBF00             nop
   \   000001F6   0xBF00             nop
   \   000001F8   0xBF00             nop
   \   000001FA   0xBF00             nop
   \   000001FC   0xBF00             nop
   \   000001FE   0xBF00             nop
   \   00000200   0xBF00             nop
   \   00000202   0xBF00             nop
   \   00000204   0xBF00             nop
   \   00000206   0xBF00             nop
   \   00000208   0xBF00             nop
   \   0000020A   0xBF00             nop
   \   0000020C   0xBF00             nop
   \   0000020E   0xBF00             nop
   \   00000210   0xBF00             nop
   \   00000212   0xBF00             nop
   \   00000214   0xBF00             nop
   \   00000216   0xBF00             nop
   \   00000218   0xBF00             nop
   \   0000021A   0xBF00             nop
   \   0000021C   0xBF00             nop
   \   0000021E   0xBF00             nop
   \   00000220   0xBF00             nop
   \   00000222   0xBF00             nop
   \   00000224   0xBF00             nop
   \   00000226   0xBF00             nop
   \   00000228   0xBF00             nop
   \   0000022A   0xBF00             nop
   \   0000022C   0xBF00             nop
   \   0000022E   0xBF00             nop
   \   00000230   0xBF00             nop
   \   00000232   0xBF00             nop
   \   00000234   0xBF00             nop
   \   00000236   0xBF00             nop
   \   00000238   0xBF00             nop
   \   0000023A   0xBF00             nop
   \   0000023C   0xBF00             nop
   \   0000023E   0xBF00             nop
   \   00000240   0xBF00             nop
   \   00000242   0xBF00             nop
   \   00000244   0xBF00             nop
   \   00000246   0xBF00             nop
   \   00000248   0xBF00             nop
   \   0000024A   0xBF00             nop
   \   0000024C   0xBF00             nop
   \   0000024E   0xBF00             nop
   \   00000250   0xBF00             nop
   \   00000252   0xBF00             nop
   \   00000254   0xBF00             nop
   \   00000256   0xBF00             nop
   \   00000258   0xBF00             nop
   \   0000025A   0xBF00             nop
   \   0000025C   0xBF00             nop
   \   0000025E   0xBF00             nop
   \   00000260   0xBF00             nop
   \   00000262   0xBF00             nop
   \   00000264   0xBF00             nop
   \   00000266   0xBF00             nop
   \   00000268   0xBF00             nop
   \   0000026A   0xBF00             nop
   \   0000026C   0xBF00             nop
   \   0000026E   0xBF00             nop
   \   00000270   0xBF00             nop
   \   00000272   0xBF00             nop
   \   00000274   0xBF00             nop
   \   00000276   0xBF00             nop
   \   00000278   0xBF00             nop
   \   0000027A   0xBF00             nop
   \   0000027C   0xBF00             nop
   \   0000027E   0xBF00             nop
   \   00000280   0xBF00             nop
   \   00000282   0xBF00             nop
   \   00000284   0xBF00             nop
   \   00000286   0xBF00             nop
   \   00000288   0xBF00             nop
    320          	
    321          	v= MMA845x_readbyte(WHO_AM_I_REG);
   \   0000028A   0x200D             MOVS     R0,#+13
   \   0000028C   0x.... 0x....      BL       MMA845x_readbyte
   \   00000290   0x0001             MOVS     R1,R0
    322                  if((v == MMA8451Q_ID)||(v == MMA8452Q_ID)||(v == MMA8453Q_ID)) 
   \   00000292   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000294   0x291A             CMP      R1,#+26
   \   00000296   0xD005             BEQ.N    ??MMA845x_init_0
   \   00000298   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000029A   0x292A             CMP      R1,#+42
   \   0000029C   0xD002             BEQ.N    ??MMA845x_init_0
   \   0000029E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002A0   0x293A             CMP      R1,#+58
   \   000002A2   0xD104             BNE.N    ??MMA845x_init_1
    323                  {
    324                    uartPrintf("\nMMA845x init OK!\nv:%d\n",v);
   \                     ??MMA845x_init_0: (+1)
   \   000002A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002A6   0x....             LDR.N    R0,??DataTable0
   \   000002A8   0x.... 0x....      BL       uartPrintf
   \   000002AC   0xE003             B.N      ??MMA845x_init_2
    325                  }
    326                  else
    327                  {
    328                    uartPrintf("\nMMA845x init Failed!\nV:%d\n",v); 
   \                     ??MMA845x_init_1: (+1)
   \   000002AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002B0   0x....             LDR.N    R0,??DataTable0_1
   \   000002B2   0x.... 0x....      BL       uartPrintf
    329                  }
    330          }
   \                     ??MMA845x_init_2: (+1)
   \   000002B6   0xBD01             POP      {R0,PC}          ;; return
    331          
    332          

   \                                 In section .text, align 2, keep-with-next
    333          unsigned char Get845xX() 
    334          {
   \                     Get845xX: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    335              return MMA845x_readbyte(OUT_X_MSB_REG); 
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       MMA845x_readbyte
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    336          }

   \                                 In section .text, align 2, keep-with-next
    337          unsigned char Get845xY() 
    338          {
   \                     Get845xY: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    339              return MMA845x_readbyte(OUT_Y_MSB_REG); 
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       MMA845x_readbyte
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    340          }

   \                                 In section .text, align 2, keep-with-next
    341          unsigned char Get845xZ() 
    342          {
   \                     Get845xZ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    343              return MMA845x_readbyte(OUT_Z_MSB_REG); 
   \   00000002   0x2005             MOVS     R0,#+5
   \   00000004   0x.... 0x....      BL       MMA845x_readbyte
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    344          }
    345          

   \                                 In section .text, align 2, keep-with-next
    346          u16 Get845xZ_14bit() 
    347          {
   \                     Get845xZ_14bit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    348              u32 tmp = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    349            //  u8 i = 0;
    350              u16 zm = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    351              u16 zl = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    352          
    353              zm = MMA845x_readbyte(OUT_Z_MSB_REG); 
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0x.... 0x....      BL       MMA845x_readbyte
   \   0000000E   0x0005             MOVS     R5,R0
    354              zl = MMA845x_readbyte(OUT_Z_LSB_REG);
   \   00000010   0x2006             MOVS     R0,#+6
   \   00000012   0x.... 0x....      BL       MMA845x_readbyte
   \   00000016   0x0006             MOVS     R6,R0
    355                
    356              tmp = (  ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 2) & 0x3FFF);
   \   00000018   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001C   0xB2F0             UXTB     R0,R6            ;; ZeroExt  R0,R6,#+24,#+24
   \   0000001E   0xEA50 0x2005      ORRS     R0,R0,R5, LSL #+8
   \   00000022   0x1080             ASRS     R0,R0,#+2
   \   00000024   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   00000026   0x0C80             LSRS     R0,R0,#+18
   \   00000028   0x0004             MOVS     R4,R0
    357              return (u16)tmp;
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
    358          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     `?<Constant "\\nMMA845x init OK!\\nv:%d\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     `?<Constant "\\nMMA845x init Failed!...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nMMA845x init OK!\\nv:%d\\n">`:
   \   00000000   0x0A 0x4D          DC8 "\012MMA845x init OK!\012v:%d\012"
   \              0x4D 0x41    
   \              0x38 0x34    
   \              0x35 0x78    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x21 0x0A    
   \              0x76 0x3A    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nMMA845x init Failed!...">`:
   \   00000000   0x0A 0x4D          DC8 "\012MMA845x init Failed!\012V:%d\012"
   \              0x4D 0x41    
   \              0x38 0x34    
   \              0x35 0x78    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x21 0x0A    
   \              0x56 0x3A    
   \              0x25 0x64    
   \              0x0A 0x00    
    359          
    360          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Get845xX
         8   -> MMA845x_readbyte
       8   Get845xY
         8   -> MMA845x_readbyte
       8   Get845xZ
         8   -> MMA845x_readbyte
      16   Get845xZ_14bit
        16   -> MMA845x_readbyte
       8   MMA845x_init
         8   -> MMA845x_readbyte
         8   -> MMA845x_writebyte
         8   -> gpio_init
         8   -> uartPrintf
      16   MMA845x_readbyte
        16   -> IIC_start
        16   -> IIC_stop
        16   -> read_byte
        16   -> send_byte
      16   MMA845x_writebyte
        16   -> IIC_start
        16   -> IIC_stop
        16   -> send_byte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "\nMMA845x init Failed!...">
      24  ?<Constant "\nMMA845x init OK!\nv:%d\n">
       4  ??DataTable0
       4  ??DataTable0_1
      10  Get845xX
      10  Get845xY
      10  Get845xZ
      48  Get845xZ_14bit
     696  MMA845x_init
      50  MMA845x_readbyte
      38  MMA845x_writebyte

 
  52 bytes in section .rodata
 870 bytes in section .text
 
 870 bytes of CODE  memory
  52 bytes of CONST memory

Errors: none
Warnings: none
