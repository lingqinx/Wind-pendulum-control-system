###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  12:46:22 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\d #
#                    ma\dma.c                                                 #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\d #
#                    ma\dma.c -lCN C:\Users\Administrator\Desktop\MPU60508.12 #
#                    \build\gpio_demo\FLASH\List\ -lB                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\dma.lst                                    #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\dma.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\dma\dma.c
      1          
      2          #include "dma.h"
      3          #include "pit.h"
      4          
      5          
      6          
      7          /*************************************************************************
      8          *  函数名称：DMA_PORTx2BUFF_Init
      9          *  功能说明：DMA初始化，读取端口数据到内存
     10          *  参数说明：DMA_CHn              通道号（DMA_CH0 ~ DMA_CH15）
     11          *            SADDR                源地址( (void * )&PTx_BYTEn_IN 或 (void * )&PTx_WORDn_IN   )
     12          *            DADDR                目的地址
     13          *            PTxn                 触发端口
     14          *            DMA_BYTEn            每次DMA传输字节数
     15          *            count                一个主循环传输字节数
     16          *            DMA_PORTx2BUFF_cfg   DMA传输配置
     17          *  函数返回：无
     18          *  修改时间：2012-1-20
     19          *  备    注：
     20          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          void DMA_PORTx2BUFF_Init(DMA_CHn CHn,void * SADDR,void * DADDR, PTxn ptxn,DMA_BYTEn byten,u32 count,DMA_PORTx2BUFF_cfg cfg)
     22          {
   \                     DMA_PORTx2BUFF_Init: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x4691             MOV      R9,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
     23              u8 n,i,tmp;
     24          
     25              ASSERT(                                             //用断言检测 源地址和每次传输字节数是否正确
     26                      (   (byten == DMA_BYTE1)                    //传输一个字节
     27                       && ( (SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE3_IN )))
     28                       )
     29           
     30                    ||(   (byten == DMA_BYTE2)                    //传输两个字节(注意，不能跨端口)
     31                       && ( (SADDR >= &PTA_BYTE0_IN)
     32                       && (SADDR <= ( &PTE_WORD1_IN ))
     33                       && (((u32)SADDR&0x03)!=0x03) )             //保证不跨端口
     34                       )
     35           
     36                    ||(   (byten == DMA_BYTE4)                    //传输四个字节
     37                       && ((SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE0_IN )))
     38                       && (((u32)SADDR&0x03)==0x00)               //保证不跨端口
     39                       )
     40                     );
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD107             BNE.N    ??DMA_PORTx2BUFF_Init_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable1  ;; 0x400ff010
   \   00000018   0x4285             CMP      R5,R0
   \   0000001A   0xD303             BCC.N    ??DMA_PORTx2BUFF_Init_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable1_1  ;; 0x400ff113
   \   00000020   0x42A8             CMP      R0,R5
   \   00000022   0xD222             BCS.N    ??DMA_PORTx2BUFF_Init_1
   \                     ??DMA_PORTx2BUFF_Init_0: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C01             CMP      R4,#+1
   \   00000028   0xD10B             BNE.N    ??DMA_PORTx2BUFF_Init_2
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable1  ;; 0x400ff010
   \   0000002E   0x4285             CMP      R5,R0
   \   00000030   0xD307             BCC.N    ??DMA_PORTx2BUFF_Init_2
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable1_2  ;; 0x400ff112
   \   00000036   0x42A8             CMP      R0,R5
   \   00000038   0xD303             BCC.N    ??DMA_PORTx2BUFF_Init_2
   \   0000003A   0xF015 0x0003      ANDS     R0,R5,#0x3
   \   0000003E   0x2803             CMP      R0,#+3
   \   00000040   0xD113             BNE.N    ??DMA_PORTx2BUFF_Init_1
   \                     ??DMA_PORTx2BUFF_Init_2: (+1)
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x2C02             CMP      R4,#+2
   \   00000046   0xD10B             BNE.N    ??DMA_PORTx2BUFF_Init_3
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable1  ;; 0x400ff010
   \   0000004C   0x4285             CMP      R5,R0
   \   0000004E   0xD307             BCC.N    ??DMA_PORTx2BUFF_Init_3
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable1_3  ;; 0x400ff110
   \   00000054   0x42A8             CMP      R0,R5
   \   00000056   0xD303             BCC.N    ??DMA_PORTx2BUFF_Init_3
   \   00000058   0xF015 0x0003      ANDS     R0,R5,#0x3
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD004             BEQ.N    ??DMA_PORTx2BUFF_Init_1
   \                     ??DMA_PORTx2BUFF_Init_3: (+1)
   \   00000060   0x2128             MOVS     R1,#+40
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   00000066   0x.... 0x....      BL       assert_failed
     41          
     42              u8 BYTEs=(byten==DMA_BYTE1 ? 1:(byten==DMA_BYTE2 ? 2:(byten==DMA_BYTE4 ? 4:16 ) ) );    //计算传输字节数
   \                     ??DMA_PORTx2BUFF_Init_1: (+1)
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x2C00             CMP      R4,#+0
   \   0000006E   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_4
   \   00000070   0x2601             MOVS     R6,#+1
   \   00000072   0xE00A             B.N      ??DMA_PORTx2BUFF_Init_5
   \                     ??DMA_PORTx2BUFF_Init_4: (+1)
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x2C01             CMP      R4,#+1
   \   00000078   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_6
   \   0000007A   0x2602             MOVS     R6,#+2
   \   0000007C   0xE005             B.N      ??DMA_PORTx2BUFF_Init_7
   \                     ??DMA_PORTx2BUFF_Init_6: (+1)
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x2C02             CMP      R4,#+2
   \   00000082   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_8
   \   00000084   0x2604             MOVS     R6,#+4
   \   00000086   0xE000             B.N      ??DMA_PORTx2BUFF_Init_9
   \                     ??DMA_PORTx2BUFF_Init_8: (+1)
   \   00000088   0x2610             MOVS     R6,#+16
     43          
     44              /* 开启时钟 */
     45              SIM_SCGC7|=SIM_SCGC7_DMA_MASK;                          //打开DMA模块时钟
   \                     ??DMA_PORTx2BUFF_Init_9: (+1)
   \                     ??DMA_PORTx2BUFF_Init_7: (+1)
   \                     ??DMA_PORTx2BUFF_Init_5: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable1_5  ;; 0x40048040
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable1_5  ;; 0x40048040
   \   00000098   0x6008             STR      R0,[R1, #+0]
     46              SIM_SCGC6|=SIM_SCGC6_DMAMUX_MASK;                       //打开DMA多路复用器时钟
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable1_6  ;; 0x4004803c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable1_6  ;; 0x4004803c
   \   000000A8   0x6008             STR      R0,[R1, #+0]
     47          	
     48              /* 配置 DMA 通道 的 传输控制块 TCD ( Transfer Control Descriptor ) */
     49              DMA_SADDR(CHn) =    (u32)SADDR;                         // 设置  源地址
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x0178             LSLS     R0,R7,#+5
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x40009000
   \   000000B2   0x5045             STR      R5,[R0, R1]
     50              DMA_DADDR(CHn) =    (u32)DADDR;                         // 设置目的地址
   \   000000B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B6   0x0178             LSLS     R0,R7,#+5
   \   000000B8   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000BC   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000C0   0xF8C0 0x9010      STR      R9,[R0, #+16]
     51              DMA_SOFF(CHn)  =    0x00u;                              // 设置源地址偏移 = 0x0, 即不变
   \   000000C4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C6   0x0178             LSLS     R0,R7,#+5
   \   000000C8   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000CC   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0x8081             STRH     R1,[R0, #+4]
     52              DMA_DOFF(CHn)  =    BYTEs;                              // 每次传输后，目的地址加 BYTEs
   \   000000D4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000D6   0x0178             LSLS     R0,R7,#+5
   \   000000D8   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000DC   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000E2   0x8286             STRH     R6,[R0, #+20]
     53          
     54              DMA_ATTR(CHn)  =    (0
     55                                  | DMA_ATTR_SMOD(0x0)                // 源地址模数禁止  Source address modulo feature is disabled
     56                                  | DMA_ATTR_SSIZE(byten)             // 源数据位宽 ：DMA_BYTEn  。    SSIZE = 0 -> 8-bit ，SSIZE = 1 -> 16-bit ，SSIZE = 2 -> 32-bit ，SSIZE = 4 -> 16-byte
     57                                  | DMA_ATTR_DMOD(0x0)                // 目标地址模数禁止
     58                                  | DMA_ATTR_DSIZE(byten)             // 目标数据位宽 ：DMA_BYTEn  。  设置参考  SSIZE
     59                                  );
   \   000000E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E6   0x0220             LSLS     R0,R4,#+8
   \   000000E8   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EE   0xF014 0x0107      ANDS     R1,R4,#0x7
   \   000000F2   0x4308             ORRS     R0,R1,R0
   \   000000F4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F6   0x0179             LSLS     R1,R7,#+5
   \   000000F8   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000FC   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000100   0x80C8             STRH     R0,[R1, #+6]
   \   00000102   0x9909             LDR      R1,[SP, #+36]
     60          
     61              DMA_CITER_ELINKNO(CHn)  = DMA_CITER_ELINKNO_CITER(count); //当前主循环次数
   \   00000104   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000106   0x0178             LSLS     R0,R7,#+5
   \   00000108   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000010C   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000110   0x000A             MOVS     R2,R1
   \   00000112   0x0452             LSLS     R2,R2,#+17       ;; ZeroExtS R2,R2,#+17,#+17
   \   00000114   0x0C52             LSRS     R2,R2,#+17
   \   00000116   0x82C2             STRH     R2,[R0, #+22]
     62              DMA_BITER_ELINKNO(CHn)  = DMA_BITER_ELINKYES_BITER(count);//起始主循环次数
   \   00000118   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000011A   0x0178             LSLS     R0,R7,#+5
   \   0000011C   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000120   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000124   0x000A             MOVS     R2,R1
   \   00000126   0x05D2             LSLS     R2,R2,#+23       ;; ZeroExtS R2,R2,#+23,#+23
   \   00000128   0x0DD2             LSRS     R2,R2,#+23
   \   0000012A   0x83C2             STRH     R2,[R0, #+30]
     63          
     64          
     65              DMA_CR &=~DMA_CR_EMLM_MASK;                             // CR[EMLM] = 0
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable1_8  ;; 0x40008000
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000136   0x.... 0x....      LDR.W    R2,??DataTable1_8  ;; 0x40008000
   \   0000013A   0x6010             STR      R0,[R2, #+0]
     66          
     67              //当CR[EMLM] = 0 时:
     68              DMA_NBYTES_MLNO(CHn)=   DMA_NBYTES_MLNO_NBYTES(BYTEs);  // 通道每次传输字节数，这里设置为BYTEs个字节。注：值为0表示传输4GB */
   \   0000013C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000013E   0x0178             LSLS     R0,R7,#+5
   \   00000140   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000144   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000148   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014A   0x6086             STR      R6,[R0, #+8]
     69          
     70          
     71              /* 配置 DMA 传输结束后的操作 */
     72              DMA_SLAST(CHn)      =   0;                              //调整  源地址的附加值,主循环结束后恢复  源地址
   \   0000014C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000014E   0x0178             LSLS     R0,R7,#+5
   \   00000150   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000154   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000158   0x2200             MOVS     R2,#+0
   \   0000015A   0x60C2             STR      R2,[R0, #+12]
   \   0000015C   0x980A             LDR      R0,[SP, #+40]
     73              DMA_DLAST_SGA(CHn)  =   (u32)( (cfg&0x20) == 0 ? (-count)  :0 ); //调整目的地址的附加值,主循环结束后恢复目的地址或者保持地址
   \   0000015E   0x0682             LSLS     R2,R0,#+26
   \   00000160   0xD401             BMI.N    ??DMA_PORTx2BUFF_Init_10
   \   00000162   0x4249             RSBS     R1,R1,#+0
   \   00000164   0xE000             B.N      ??DMA_PORTx2BUFF_Init_11
   \                     ??DMA_PORTx2BUFF_Init_10: (+1)
   \   00000166   0x2100             MOVS     R1,#+0
   \                     ??DMA_PORTx2BUFF_Init_11: (+1)
   \   00000168   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000016A   0x017A             LSLS     R2,R7,#+5
   \   0000016C   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   00000170   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   00000174   0x6191             STR      R1,[R2, #+24]
     74              DMA_CSR(CHn)        =   (0
     75                                       | DMA_CSR_DREQ_MASK            //主循环结束后停止硬件请求
     76                                       | DMA_CSR_INTMAJOR_MASK        //主循环结束后产生中断
     77                                       );
   \   00000176   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000178   0x0179             LSLS     R1,R7,#+5
   \   0000017A   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000017E   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000182   0x220A             MOVS     R2,#+10
   \   00000184   0x838A             STRH     R2,[R1, #+28]
     78                                       
     79              /* 配置 DMA 触发源 */
     80              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,CHn) = (0
     81                                                      | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
     82                                                      //| DMAMUX_CHCFG_TRIG_MASK                        /* Trigger Mode: Periodic   PIT周期触发传输模式   通道1对应PIT1，必须使能PIT1，且配置相应的PIT定时触发 */
     83                                                      | DMAMUX_CHCFG_SOURCE((ptxn>>5)+DMA_Port_A)     /* 通道触发传输源:     */
     84                                                      );
   \   00000186   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000018A   0xEA5F 0x1158      LSRS     R1,R8,#+5
   \   0000018E   0x3131             ADDS     R1,R1,#+49
   \   00000190   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000194   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000196   0x.... 0x....      LDR.W    R2,??DataTable1_9  ;; 0x40021000
   \   0000019A   0x54B9             STRB     R1,[R7, R2]
     85          
     86              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK<<(ptxn>>5));                                                                 //开启PORTx端口
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable1_10  ;; 0x40048038
   \   000001A0   0x6809             LDR      R1,[R1, #+0]
   \   000001A2   0xF44F 0x7200      MOV      R2,#+512
   \   000001A6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001AA   0xEA5F 0x1358      LSRS     R3,R8,#+5
   \   000001AE   0x409A             LSLS     R2,R2,R3
   \   000001B0   0x4311             ORRS     R1,R2,R1
   \   000001B2   0x.... 0x....      LDR.W    R2,??DataTable1_10  ;; 0x40048038
   \   000001B6   0x6011             STR      R1,[R2, #+0]
     87              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1<<(ptxn&0x1f));                                                           //设置端口方向为输入
   \   000001B8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001BC   0xEA5F 0x1168      ASRS     R1,R8,#+5
   \   000001C0   0x.... 0x....      LDR.W    R2,??DataTable1_11
   \   000001C4   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   000001C8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001CC   0xEA5F 0x1268      ASRS     R2,R8,#+5
   \   000001D0   0x.... 0x....      LDR.W    R3,??DataTable1_11
   \   000001D4   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   000001D8   0x6952             LDR      R2,[R2, #+20]
   \   000001DA   0x2301             MOVS     R3,#+1
   \   000001DC   0xF018 0x071F      ANDS     R7,R8,#0x1F
   \   000001E0   0x40BB             LSLS     R3,R3,R7
   \   000001E2   0x439A             BICS     R2,R2,R3
   \   000001E4   0x614A             STR      R2,[R1, #+20]
     88              PORT_PCR_REG(PORTX[(ptxn>>5)],(ptxn&0x1F))= ( 0
     89                                                          | PORT_PCR_MUX(1)               // 复用GPIO
     90                                                          | PORT_PCR_IRQC(cfg & 0x03 )    // 确定触发模式
     91                                                          | ((cfg & 0xc0 )>>6)            // 开启上拉或下拉电阻，或者没有
     92                                                          | 0x10
     93                                                            );
   \   000001E6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001EA   0xF018 0x011F      ANDS     R1,R8,#0x1F
   \   000001EE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001F2   0xEA5F 0x1268      ASRS     R2,R8,#+5
   \   000001F6   0x.... 0x....      LDR.W    R3,??DataTable1_12
   \   000001FA   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   000001FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000200   0xF010 0x0303      ANDS     R3,R0,#0x3
   \   00000204   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000206   0x0980             LSRS     R0,R0,#+6
   \   00000208   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020A   0xEA50 0x4003      ORRS     R0,R0,R3, LSL #+16
   \   0000020E   0xF450 0x7088      ORRS     R0,R0,#0x110
   \   00000212   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
     94              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &=~(1<<(ptxn&&0x1F));                                                            //输入模式
   \   00000216   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000021A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000021E   0xD001             BEQ.N    ??DMA_PORTx2BUFF_Init_12
   \   00000220   0x2001             MOVS     R0,#+1
   \   00000222   0xE000             B.N      ??DMA_PORTx2BUFF_Init_13
   \                     ??DMA_PORTx2BUFF_Init_12: (+1)
   \   00000224   0x2000             MOVS     R0,#+0
   \                     ??DMA_PORTx2BUFF_Init_13: (+1)
   \   00000226   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000022A   0xEA5F 0x1168      ASRS     R1,R8,#+5
   \   0000022E   0x.... 0x....      LDR.W    R2,??DataTable1_11
   \   00000232   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   00000236   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000023A   0xEA5F 0x1268      ASRS     R2,R8,#+5
   \   0000023E   0x.... 0x....      LDR.W    R3,??DataTable1_11
   \   00000242   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   00000246   0x6952             LDR      R2,[R2, #+20]
   \   00000248   0x2301             MOVS     R3,#+1
   \   0000024A   0xFA13 0xF000      LSLS     R0,R3,R0
   \   0000024E   0xEA32 0x0000      BICS     R0,R2,R0
   \   00000252   0x6148             STR      R0,[R1, #+20]
     95          
     96              /*  配置输入源   */
     97              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK<<((((u32)SADDR)&0x1ff)>>6));                 //开启PORTx端口
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable1_10  ;; 0x40048038
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0xF44F 0x7100      MOV      R1,#+512
   \   0000025E   0x09AA             LSRS     R2,R5,#+6
   \   00000260   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   00000264   0x4091             LSLS     R1,R1,R2
   \   00000266   0x4308             ORRS     R0,R1,R0
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable1_10  ;; 0x40048038
   \   0000026C   0x6008             STR      R0,[R1, #+0]
     98              switch(byten)
   \   0000026E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000270   0x2C00             CMP      R4,#+0
   \   00000272   0xD003             BEQ.N    ??DMA_PORTx2BUFF_Init_14
   \   00000274   0x2C02             CMP      R4,#+2
   \   00000276   0xD007             BEQ.N    ??DMA_PORTx2BUFF_Init_15
   \   00000278   0xD303             BCC.N    ??DMA_PORTx2BUFF_Init_16
   \   0000027A   0xE008             B.N      ??DMA_PORTx2BUFF_Init_17
     99              {
    100               case DMA_BYTE1:
    101                  *((u8 *)((u32)SADDR+4))=0;       //设置为输入方向。为什么加4？PDIR地址加4后，就变成对应的PDDR地址
   \                     ??DMA_PORTx2BUFF_Init_14: (+1)
   \   0000027C   0x2000             MOVS     R0,#+0
   \   0000027E   0x7128             STRB     R0,[R5, #+4]
    102                  break;
   \   00000280   0xE009             B.N      ??DMA_PORTx2BUFF_Init_18
    103               case DMA_BYTE2:
    104                  *((u16 *)((u32)SADDR+4))=0;
   \                     ??DMA_PORTx2BUFF_Init_16: (+1)
   \   00000282   0x2000             MOVS     R0,#+0
   \   00000284   0x80A8             STRH     R0,[R5, #+4]
    105                  break;
   \   00000286   0xE006             B.N      ??DMA_PORTx2BUFF_Init_18
    106               case DMA_BYTE4:
    107                  *((u32 *)((u32)SADDR+4))=0;
   \                     ??DMA_PORTx2BUFF_Init_15: (+1)
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x6068             STR      R0,[R5, #+4]
    108                  break;
   \   0000028C   0xE003             B.N      ??DMA_PORTx2BUFF_Init_18
    109               default:
    110                  assert_failed(__FILE__, __LINE__);
   \                     ??DMA_PORTx2BUFF_Init_17: (+1)
   \   0000028E   0x216E             MOVS     R1,#+110
   \   00000290   0x....             LDR.N    R0,??DataTable1_4
   \   00000292   0x.... 0x....      BL       assert_failed
    111                  break;
    112              }
    113          
    114              /*  输入源管脚选择功能脚  */
    115              n=(u8)(((u32)SADDR - ((u32)(&PTA_BYTE0_IN)))&0x3f);             //最小的引脚号
   \                     ??DMA_PORTx2BUFF_Init_18: (+1)
   \   00000296   0x0028             MOVS     R0,R5
   \   00000298   0x3810             SUBS     R0,R0,#+16
   \   0000029A   0xF010 0x003F      ANDS     R0,R0,#0x3F
    116              tmp=(n<<3) + (BYTEs<<3);                                             //最大的引脚号
   \   0000029E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002A2   0x00F1             LSLS     R1,R6,#+3
   \   000002A4   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
    117              for(i=n;i<tmp;i++)
   \   000002A8   0xE00B             B.N      ??DMA_PORTx2BUFF_Init_19
    118              {
    119                //#define PTA_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF000u)
    120                //地址经过以下运算后得到  01234对应ABCDE
    121                PORT_PCR_REG(PORTX[   ((((u32)SADDR)&0x1ff)>>6)    ],i)=(0
    122                                                                           |PORT_PCR_MUX(1)
    123                                                                           | GPI_DOWN             //输入源应该下拉，默认读取到的是0
    124                                                                           );
   \                     ??DMA_PORTx2BUFF_Init_20: (+1)
   \   000002AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002AC   0x09AA             LSRS     R2,R5,#+6
   \   000002AE   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   000002B2   0x....             LDR.N    R3,??DataTable1_12
   \   000002B4   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   000002B8   0xF44F 0x7381      MOV      R3,#+258
   \   000002BC   0xF842 0x3020      STR      R3,[R2, R0, LSL #+2]
    125              }
   \   000002C0   0x1C40             ADDS     R0,R0,#+1
   \                     ??DMA_PORTx2BUFF_Init_19: (+1)
   \   000002C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002C6   0x4288             CMP      R0,R1
   \   000002C8   0xD3EF             BCC.N    ??DMA_PORTx2BUFF_Init_20
    126          }
   \   000002CA   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    127          
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void DMA_PORTx2BUFF_PeriInit(DMA_CHn CHn,void * SADDR,void * DADDR, PTxn ptxn,DMA_BYTEn byten,u32 count,DMA_PORTx2BUFF_cfg cfg)
    130          {
   \                     DMA_PORTx2BUFF_PeriInit: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    131              u8 n,i,tmp;
    132          
    133              ASSERT(                                             //用断言检测 源地址和每次传输字节数是否正确
    134                      (   (byten == DMA_BYTE1)                    //传输一个字节
    135                       && ( (SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE3_IN )))
    136                       )
    137           
    138                    ||(   (byten == DMA_BYTE2)                    //传输两个字节(注意，不能跨端口)
    139                       && ( (SADDR >= &PTA_BYTE0_IN)
    140                       && (SADDR <= ( &PTE_WORD1_IN ))
    141                       && (((u32)SADDR&0x03)!=0x03) )             //保证不跨端口
    142                       )
    143           
    144                    ||(   (byten == DMA_BYTE4)                    //传输四个字节
    145                       && ((SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE0_IN )))
    146                       && (((u32)SADDR&0x03)==0x00)               //保证不跨端口
    147                       )
    148                     );
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD105             BNE.N    ??DMA_PORTx2BUFF_PeriInit_0
   \   00000014   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff010
   \   00000016   0x4286             CMP      R6,R0
   \   00000018   0xD302             BCC.N    ??DMA_PORTx2BUFF_PeriInit_0
   \   0000001A   0x....             LDR.N    R0,??DataTable1_1  ;; 0x400ff113
   \   0000001C   0x42B0             CMP      R0,R6
   \   0000001E   0xD21D             BCS.N    ??DMA_PORTx2BUFF_PeriInit_1
   \                     ??DMA_PORTx2BUFF_PeriInit_0: (+1)
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C01             CMP      R4,#+1
   \   00000024   0xD109             BNE.N    ??DMA_PORTx2BUFF_PeriInit_2
   \   00000026   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff010
   \   00000028   0x4286             CMP      R6,R0
   \   0000002A   0xD306             BCC.N    ??DMA_PORTx2BUFF_PeriInit_2
   \   0000002C   0x....             LDR.N    R0,??DataTable1_2  ;; 0x400ff112
   \   0000002E   0x42B0             CMP      R0,R6
   \   00000030   0xD303             BCC.N    ??DMA_PORTx2BUFF_PeriInit_2
   \   00000032   0xF016 0x0003      ANDS     R0,R6,#0x3
   \   00000036   0x2803             CMP      R0,#+3
   \   00000038   0xD110             BNE.N    ??DMA_PORTx2BUFF_PeriInit_1
   \                     ??DMA_PORTx2BUFF_PeriInit_2: (+1)
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C02             CMP      R4,#+2
   \   0000003E   0xD109             BNE.N    ??DMA_PORTx2BUFF_PeriInit_3
   \   00000040   0x....             LDR.N    R0,??DataTable1  ;; 0x400ff010
   \   00000042   0x4286             CMP      R6,R0
   \   00000044   0xD306             BCC.N    ??DMA_PORTx2BUFF_PeriInit_3
   \   00000046   0x....             LDR.N    R0,??DataTable1_3  ;; 0x400ff110
   \   00000048   0x42B0             CMP      R0,R6
   \   0000004A   0xD303             BCC.N    ??DMA_PORTx2BUFF_PeriInit_3
   \   0000004C   0xF016 0x0003      ANDS     R0,R6,#0x3
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD003             BEQ.N    ??DMA_PORTx2BUFF_PeriInit_1
   \                     ??DMA_PORTx2BUFF_PeriInit_3: (+1)
   \   00000054   0x2194             MOVS     R1,#+148
   \   00000056   0x....             LDR.N    R0,??DataTable1_4
   \   00000058   0x.... 0x....      BL       assert_failed
    149          
    150              u8 BYTEs=(byten==DMA_BYTE1 ? 1:(byten==DMA_BYTE2 ? 2:(byten==DMA_BYTE4 ? 4:16 ) ) );    //计算传输字节数
   \                     ??DMA_PORTx2BUFF_PeriInit_1: (+1)
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0x2C00             CMP      R4,#+0
   \   00000060   0xD101             BNE.N    ??DMA_PORTx2BUFF_PeriInit_4
   \   00000062   0x2701             MOVS     R7,#+1
   \   00000064   0xE00A             B.N      ??DMA_PORTx2BUFF_PeriInit_5
   \                     ??DMA_PORTx2BUFF_PeriInit_4: (+1)
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C01             CMP      R4,#+1
   \   0000006A   0xD101             BNE.N    ??DMA_PORTx2BUFF_PeriInit_6
   \   0000006C   0x2702             MOVS     R7,#+2
   \   0000006E   0xE005             B.N      ??DMA_PORTx2BUFF_PeriInit_7
   \                     ??DMA_PORTx2BUFF_PeriInit_6: (+1)
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xD101             BNE.N    ??DMA_PORTx2BUFF_PeriInit_8
   \   00000076   0x2704             MOVS     R7,#+4
   \   00000078   0xE000             B.N      ??DMA_PORTx2BUFF_PeriInit_9
   \                     ??DMA_PORTx2BUFF_PeriInit_8: (+1)
   \   0000007A   0x2710             MOVS     R7,#+16
    151          
    152              /* 开启时钟 */
    153              SIM_SCGC7|=SIM_SCGC7_DMA_MASK;                          //打开DMA模块时钟
   \                     ??DMA_PORTx2BUFF_PeriInit_9: (+1)
   \                     ??DMA_PORTx2BUFF_PeriInit_7: (+1)
   \                     ??DMA_PORTx2BUFF_PeriInit_5: (+1)
   \   0000007C   0x....             LDR.N    R0,??DataTable1_5  ;; 0x40048040
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000084   0x....             LDR.N    R1,??DataTable1_5  ;; 0x40048040
   \   00000086   0x6008             STR      R0,[R1, #+0]
    154              SIM_SCGC6|=SIM_SCGC6_DMAMUX_MASK;                       //打开DMA多路复用器时钟
   \   00000088   0x....             LDR.N    R0,??DataTable1_6  ;; 0x4004803c
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x....             LDR.N    R1,??DataTable1_6  ;; 0x4004803c
   \   00000092   0x6008             STR      R0,[R1, #+0]
    155          	
    156              /* 配置 DMA 通道 的 传输控制块 TCD ( Transfer Control Descriptor ) */
    157              DMA_SADDR(CHn) =    (u32)SADDR;                         // 设置  源地址
   \   00000094   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000098   0xEA5F 0x1048      LSLS     R0,R8,#+5
   \   0000009C   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40009000
   \   0000009E   0x5046             STR      R6,[R0, R1]
    158              DMA_DADDR(CHn) =    (u32)DADDR;                         // 设置目的地址
   \   000000A0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000A4   0xEA5F 0x1048      LSLS     R0,R8,#+5
   \   000000A8   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000AC   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000B0   0x6105             STR      R5,[R0, #+16]
    159              DMA_SOFF(CHn)  =    0x00u;                              // 设置源地址偏移 = 0x0, 即不变
   \   000000B2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B6   0xEA5F 0x1048      LSLS     R0,R8,#+5
   \   000000BA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000BE   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x8081             STRH     R1,[R0, #+4]
    160              DMA_DOFF(CHn)  =    BYTEs;                              // 每次传输后，目的地址加 BYTEs
   \   000000C6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000CA   0xEA5F 0x1048      LSLS     R0,R8,#+5
   \   000000CE   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000D2   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000D6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000D8   0x8287             STRH     R7,[R0, #+20]
    161          
    162              DMA_ATTR(CHn)  =    (0
    163                                  | DMA_ATTR_SMOD(0x0)                // 源地址模数禁止  Source address modulo feature is disabled
    164                                  | DMA_ATTR_SSIZE(byten)             // 源数据位宽 ：DMA_BYTEn  。    SSIZE = 0 -> 8-bit ，SSIZE = 1 -> 16-bit ，SSIZE = 2 -> 32-bit ，SSIZE = 4 -> 16-byte
    165                                  | DMA_ATTR_DMOD(0x0)                // 目标地址模数禁止
    166                                  | DMA_ATTR_DSIZE(byten)             // 目标数据位宽 ：DMA_BYTEn  。  设置参考  SSIZE
    167                                  );
   \   000000DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DC   0x0220             LSLS     R0,R4,#+8
   \   000000DE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E4   0xF014 0x0107      ANDS     R1,R4,#0x7
   \   000000E8   0x4308             ORRS     R0,R1,R0
   \   000000EA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EE   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   000000F2   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000F6   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   000000FA   0x80C8             STRH     R0,[R1, #+6]
   \   000000FC   0x9809             LDR      R0,[SP, #+36]
    168          
    169              DMA_CITER_ELINKNO(CHn)  = DMA_CITER_ELINKNO_CITER(count); //当前主循环次数
   \   000000FE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000102   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   00000106   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000010A   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000010E   0x0002             MOVS     R2,R0
   \   00000110   0x0452             LSLS     R2,R2,#+17       ;; ZeroExtS R2,R2,#+17,#+17
   \   00000112   0x0C52             LSRS     R2,R2,#+17
   \   00000114   0x82CA             STRH     R2,[R1, #+22]
    170              DMA_BITER_ELINKNO(CHn)  = DMA_BITER_ELINKYES_BITER(count);//起始主循环次数
   \   00000116   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000011A   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   0000011E   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000122   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000126   0x0002             MOVS     R2,R0
   \   00000128   0x05D2             LSLS     R2,R2,#+23       ;; ZeroExtS R2,R2,#+23,#+23
   \   0000012A   0x0DD2             LSRS     R2,R2,#+23
   \   0000012C   0x83CA             STRH     R2,[R1, #+30]
    171          
    172          
    173              DMA_CR &=~DMA_CR_EMLM_MASK;                             // CR[EMLM] = 0
   \   0000012E   0x....             LDR.N    R1,??DataTable1_8  ;; 0x40008000
   \   00000130   0x6809             LDR      R1,[R1, #+0]
   \   00000132   0xF031 0x0180      BICS     R1,R1,#0x80
   \   00000136   0x....             LDR.N    R2,??DataTable1_8  ;; 0x40008000
   \   00000138   0x6011             STR      R1,[R2, #+0]
    174          
    175              //当CR[EMLM] = 0 时:
    176              DMA_NBYTES_MLNO(CHn)=   DMA_NBYTES_MLNO_NBYTES(BYTEs);  // 通道每次传输字节数，这里设置为BYTEs个字节。注：值为0表示传输4GB */
   \   0000013A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000013E   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   00000142   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000146   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000014A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000014C   0x608F             STR      R7,[R1, #+8]
    177          
    178          
    179              /* 配置 DMA 传输结束后的操作 */
    180              DMA_SLAST(CHn)      =   0;                              //调整  源地址的附加值,主循环结束后恢复  源地址
   \   0000014E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000152   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   00000156   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000015A   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000015E   0x2200             MOVS     R2,#+0
   \   00000160   0x60CA             STR      R2,[R1, #+12]
   \   00000162   0x9D0A             LDR      R5,[SP, #+40]
    181              DMA_DLAST_SGA(CHn)  =   (u32)( (cfg&0x20) == 0 ? (-count)  :0 ); //调整目的地址的附加值,主循环结束后恢复目的地址或者保持地址
   \   00000164   0x06A9             LSLS     R1,R5,#+26
   \   00000166   0xD401             BMI.N    ??DMA_PORTx2BUFF_PeriInit_10
   \   00000168   0x4240             RSBS     R0,R0,#+0
   \   0000016A   0xE000             B.N      ??DMA_PORTx2BUFF_PeriInit_11
   \                     ??DMA_PORTx2BUFF_PeriInit_10: (+1)
   \   0000016C   0x2000             MOVS     R0,#+0
   \                     ??DMA_PORTx2BUFF_PeriInit_11: (+1)
   \   0000016E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000172   0xEA5F 0x1148      LSLS     R1,R8,#+5
   \   00000176   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000017A   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000017E   0x6188             STR      R0,[R1, #+24]
    182              DMA_CSR(CHn)        =   (0
    183                                       | DMA_CSR_DREQ_MASK            //主循环结束后停止硬件请求
    184                                       | DMA_CSR_INTMAJOR_MASK        //主循环结束后产生中断
    185                                       | DMA_CSR_START_MASK
    186                                       | DMA_CSR_ACTIVE_MASK   
    187                                       );
   \   00000180   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000184   0xEA5F 0x1048      LSLS     R0,R8,#+5
   \   00000188   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000018C   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000190   0x214B             MOVS     R1,#+75
   \   00000192   0x8381             STRH     R1,[R0, #+28]
    188                
    189              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,CHn) = 0x00;
   \   00000194   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000198   0x....             LDR.N    R0,??DataTable1_9  ;; 0x40021000
   \   0000019A   0x2100             MOVS     R1,#+0
   \   0000019C   0xF808 0x1000      STRB     R1,[R8, R0]
    190              //DMA_ERQ |= (DMA_ERQ_ERQ0_MASK<<(CHn)) ;        //使能通道硬件DMA请求
    191              pit_init(PIT0,1000);
   \   000001A0   0xF44F 0x717A      MOV      R1,#+1000
   \   000001A4   0x2000             MOVS     R0,#+0
   \   000001A6   0x.... 0x....      BL       pit_init
    192              pit_init(PIT1,1000);
   \   000001AA   0xF44F 0x717A      MOV      R1,#+1000
   \   000001AE   0x2001             MOVS     R0,#+1
   \   000001B0   0x.... 0x....      BL       pit_init
    193              pit_init(PIT2,1000);
   \   000001B4   0xF44F 0x717A      MOV      R1,#+1000
   \   000001B8   0x2002             MOVS     R0,#+2
   \   000001BA   0x.... 0x....      BL       pit_init
    194              pit_init(PIT3,1000);
   \   000001BE   0xF44F 0x717A      MOV      R1,#+1000
   \   000001C2   0x2003             MOVS     R0,#+3
   \   000001C4   0x.... 0x....      BL       pit_init
    195              PIT_IRQ_EN(PIT2);
   \   000001C8   0x....             LDR.N    R0,??DataTable1_13  ;; 0x40037128
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000001D0   0x....             LDR.N    R1,??DataTable1_13  ;; 0x40037128
   \   000001D2   0x6008             STR      R0,[R1, #+0]
   \   000001D4   0x2046             MOVS     R0,#+70
   \   000001D6   0x.... 0x....      BL       enable_irq
    196              /* 配置 DMA 触发源 */
    197              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,CHn) = 0xDF;
   \   000001DA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001DE   0x....             LDR.N    R0,??DataTable1_9  ;; 0x40021000
   \   000001E0   0x21DF             MOVS     R1,#+223
   \   000001E2   0xF808 0x1000      STRB     R1,[R8, R0]
    198              //DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,CHn) = (0
    199              //                                        | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
    200              //                                        | DMAMUX_CHCFG_TRIG_MASK                        /* Trigger Mode: Periodic   PIT周期触发传输模式   通道1对应PIT1，必须使能PIT1，且配置相应的PIT定时触发 */
    201              //                                        //| DMAMUX_CHCFG_SOURCE((ptxn>>5)+DMA_Port_A)     /* 通道触发传输源:     */
    202              //                                       );
    203              
    204              //DMA_CSR(CHn) |= 
    205          ///*
    206              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK<<(ptxn>>5));                                                                 //开启PORTx端口
   \   000001E6   0x....             LDR.N    R0,??DataTable1_10  ;; 0x40048038
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0xF44F 0x7100      MOV      R1,#+512
   \   000001EE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001F2   0xEA5F 0x1259      LSRS     R2,R9,#+5
   \   000001F6   0x4091             LSLS     R1,R1,R2
   \   000001F8   0x4308             ORRS     R0,R1,R0
   \   000001FA   0x....             LDR.N    R1,??DataTable1_10  ;; 0x40048038
   \   000001FC   0x6008             STR      R0,[R1, #+0]
    207              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1<<(ptxn&0x1f));                                                           //设置端口方向为输入
   \   000001FE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000202   0xEA5F 0x1069      ASRS     R0,R9,#+5
   \   00000206   0x....             LDR.N    R1,??DataTable1_11
   \   00000208   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000020C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000210   0xEA5F 0x1169      ASRS     R1,R9,#+5
   \   00000214   0x....             LDR.N    R2,??DataTable1_11
   \   00000216   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   0000021A   0x6949             LDR      R1,[R1, #+20]
   \   0000021C   0x2201             MOVS     R2,#+1
   \   0000021E   0xF019 0x031F      ANDS     R3,R9,#0x1F
   \   00000222   0x409A             LSLS     R2,R2,R3
   \   00000224   0x4391             BICS     R1,R1,R2
   \   00000226   0x6141             STR      R1,[R0, #+20]
    208              PORT_PCR_REG(PORTX[(ptxn>>5)],(ptxn&0x1F))= ( 0
    209                                                          | PORT_PCR_MUX(1)               // 复用GPIO
    210                                                          | PORT_PCR_IRQC(cfg & 0x03 )    // 确定触发模式
    211                                                          | ((cfg & 0xc0 )>>6)            // 开启上拉或下拉电阻，或者没有
    212                                                          );
   \   00000228   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000022C   0xF019 0x001F      ANDS     R0,R9,#0x1F
   \   00000230   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000234   0xEA5F 0x1169      ASRS     R1,R9,#+5
   \   00000238   0x....             LDR.N    R2,??DataTable1_12
   \   0000023A   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   0000023E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000240   0xF015 0x0203      ANDS     R2,R5,#0x3
   \   00000244   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000246   0x09AB             LSRS     R3,R5,#+6
   \   00000248   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000024A   0xEA53 0x4202      ORRS     R2,R3,R2, LSL #+16
   \   0000024E   0xF452 0x7280      ORRS     R2,R2,#0x100
   \   00000252   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    213              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &=~(1<<(ptxn&&0x1F));                                                            //输入模式
   \   00000256   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000025A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000025E   0xD001             BEQ.N    ??DMA_PORTx2BUFF_PeriInit_12
   \   00000260   0x2001             MOVS     R0,#+1
   \   00000262   0xE000             B.N      ??DMA_PORTx2BUFF_PeriInit_13
   \                     ??DMA_PORTx2BUFF_PeriInit_12: (+1)
   \   00000264   0x2000             MOVS     R0,#+0
   \                     ??DMA_PORTx2BUFF_PeriInit_13: (+1)
   \   00000266   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000026A   0xEA5F 0x1169      ASRS     R1,R9,#+5
   \   0000026E   0x....             LDR.N    R2,??DataTable1_11
   \   00000270   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   00000274   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000278   0xEA5F 0x1269      ASRS     R2,R9,#+5
   \   0000027C   0x....             LDR.N    R3,??DataTable1_11
   \   0000027E   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   00000282   0x6952             LDR      R2,[R2, #+20]
   \   00000284   0x2301             MOVS     R3,#+1
   \   00000286   0xFA13 0xF000      LSLS     R0,R3,R0
   \   0000028A   0xEA32 0x0000      BICS     R0,R2,R0
   \   0000028E   0x6148             STR      R0,[R1, #+20]
    214          //*/
    215              /*  配置输入源   */
    216              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK<<((((u32)SADDR)&0x1ff)>>6));                 //开启PORTx端口
   \   00000290   0x....             LDR.N    R0,??DataTable1_10  ;; 0x40048038
   \   00000292   0x6800             LDR      R0,[R0, #+0]
   \   00000294   0xF44F 0x7100      MOV      R1,#+512
   \   00000298   0x09B2             LSRS     R2,R6,#+6
   \   0000029A   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   0000029E   0x4091             LSLS     R1,R1,R2
   \   000002A0   0x4308             ORRS     R0,R1,R0
   \   000002A2   0x....             LDR.N    R1,??DataTable1_10  ;; 0x40048038
   \   000002A4   0x6008             STR      R0,[R1, #+0]
    217              switch(byten)
   \   000002A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A8   0x2C00             CMP      R4,#+0
   \   000002AA   0xD003             BEQ.N    ??DMA_PORTx2BUFF_PeriInit_14
   \   000002AC   0x2C02             CMP      R4,#+2
   \   000002AE   0xD007             BEQ.N    ??DMA_PORTx2BUFF_PeriInit_15
   \   000002B0   0xD303             BCC.N    ??DMA_PORTx2BUFF_PeriInit_16
   \   000002B2   0xE008             B.N      ??DMA_PORTx2BUFF_PeriInit_17
    218              {
    219               case DMA_BYTE1:
    220                  *((u8 *)((u32)SADDR+4))=0;       //设置为输入方向。为什么加4？PDIR地址加4后，就变成对应的PDDR地址
   \                     ??DMA_PORTx2BUFF_PeriInit_14: (+1)
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x7130             STRB     R0,[R6, #+4]
    221                  break;
   \   000002B8   0xE009             B.N      ??DMA_PORTx2BUFF_PeriInit_18
    222               case DMA_BYTE2:
    223                  *((u16 *)((u32)SADDR+4))=0;
   \                     ??DMA_PORTx2BUFF_PeriInit_16: (+1)
   \   000002BA   0x2000             MOVS     R0,#+0
   \   000002BC   0x80B0             STRH     R0,[R6, #+4]
    224                  break;
   \   000002BE   0xE006             B.N      ??DMA_PORTx2BUFF_PeriInit_18
    225               case DMA_BYTE4:
    226                  *((u32 *)((u32)SADDR+4))=0;
   \                     ??DMA_PORTx2BUFF_PeriInit_15: (+1)
   \   000002C0   0x2000             MOVS     R0,#+0
   \   000002C2   0x6070             STR      R0,[R6, #+4]
    227                  break;
   \   000002C4   0xE003             B.N      ??DMA_PORTx2BUFF_PeriInit_18
    228               default:
    229                  assert_failed(__FILE__, __LINE__);
   \                     ??DMA_PORTx2BUFF_PeriInit_17: (+1)
   \   000002C6   0x21E5             MOVS     R1,#+229
   \   000002C8   0x....             LDR.N    R0,??DataTable1_4
   \   000002CA   0x.... 0x....      BL       assert_failed
    230                  break;
    231              }
    232          
    233              /*  输入源管脚选择功能脚  */
    234              n=(u8)(((u32)SADDR - ((u32)(&PTA_BYTE0_IN)))&0x3f);             //最小的引脚号
   \                     ??DMA_PORTx2BUFF_PeriInit_18: (+1)
   \   000002CE   0x0030             MOVS     R0,R6
   \   000002D0   0x3810             SUBS     R0,R0,#+16
   \   000002D2   0xF010 0x003F      ANDS     R0,R0,#0x3F
    235              tmp=(n<<3) + (BYTEs<<3);                                             //最大的引脚号
   \   000002D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002DA   0x00F9             LSLS     R1,R7,#+3
   \   000002DC   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
    236              for(i=n;i<tmp;i++)
   \   000002E0   0xE00B             B.N      ??DMA_PORTx2BUFF_PeriInit_19
    237              {
    238                //#define PTA_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF000u)
    239                //地址经过以下运算后得到  01234对应ABCDE
    240                PORT_PCR_REG(PORTX[   ((((u32)SADDR)&0x1ff)>>6)    ],i)=(0
    241                                                                           |PORT_PCR_MUX(1)
    242                                                                           | GPI_DOWN             //输入源应该下拉，默认读取到的是0
    243                                                                           );
   \                     ??DMA_PORTx2BUFF_PeriInit_20: (+1)
   \   000002E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002E4   0x09B2             LSRS     R2,R6,#+6
   \   000002E6   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   000002EA   0x....             LDR.N    R3,??DataTable1_12
   \   000002EC   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   000002F0   0xF44F 0x7381      MOV      R3,#+258
   \   000002F4   0xF842 0x3020      STR      R3,[R2, R0, LSL #+2]
    244              }
   \   000002F8   0x1C40             ADDS     R0,R0,#+1
   \                     ??DMA_PORTx2BUFF_PeriInit_19: (+1)
   \   000002FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002FC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002FE   0x4288             CMP      R0,R1
   \   00000300   0xD3EF             BCC.N    ??DMA_PORTx2BUFF_PeriInit_20
    245          }
   \   00000302   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    246          
    247          
    248          
    249          /*************************************************************************
    250          *  函数名称：DMA_setDAddress
    251          *  功能说明：配置DMA目标地址
    252          *  参数说明：DMA_CHn              通道号（DMA_CH0 ~ DMA_CH15）       
    253          *            DADDR                目的地址
    254          *  函数返回：无
    255          *  修改时间：2012-1-20
    256          *  备    注：
    257          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    258          void DMA_setDAddress(DMA_CHn CHn,void * DADDR)
    259          {
    260              DMA_DADDR(CHn) =    (u32)DADDR;                         // 设置目的地址
   \                     DMA_setDAddress: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x0140             LSLS     R0,R0,#+5
   \   00000004   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000008   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   0000000C   0x6101             STR      R1,[R0, #+16]
    261          }
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x400FF113         DC32     0x400ff113

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x400FF112         DC32     0x400ff112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x400FF110         DC32     0x400ff110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     PORTX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x40037128         DC32     0x40037128

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 4DH
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0x4D    
   \   00000020   0x50 0x55          DC8 50H, 55H, 36H, 30H, 35H, 30H, 38H, 2EH
   \              0x36 0x30    
   \              0x35 0x30    
   \              0x38 0x2E    
   \   00000028   0x31 0x32          DC8 31H, 32H, 5CH, 73H, 72H, 63H, 5CH, 64H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x64    
   \   00000030   0x72 0x69          DC8 72H, 69H, 76H, 65H, 72H, 73H, 5CH, 64H
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x5C 0x64    
   \   00000038   0x6D 0x61          DC8 6DH, 61H, 5CH, 64H, 6DH, 61H, 2EH, 63H
   \              0x5C 0x64    
   \              0x6D 0x61    
   \              0x2E 0x63    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    262          
    263          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   DMA_PORTx2BUFF_Init
        32   -> assert_failed
      32   DMA_PORTx2BUFF_PeriInit
        32   -> assert_failed
        32   -> enable_irq
        32   -> pit_init
       0   DMA_setDAddress


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?<Constant "C:\\Users\\Administrato...">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     718  DMA_PORTx2BUFF_Init
     774  DMA_PORTx2BUFF_PeriInit
      16  DMA_setDAddress

 
    68 bytes in section .rodata
 1 564 bytes in section .text
 
 1 564 bytes of CODE  memory
    68 bytes of CONST memory

Errors: none
Warnings: none
