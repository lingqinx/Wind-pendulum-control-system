###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  12:46:18 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\a #
#                    dc\adc.c                                                 #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\a #
#                    dc\adc.c -lCN C:\Users\Administrator\Desktop\MPU60508.12 #
#                    \build\gpio_demo\FLASH\List\ -lB                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\adc.lst                                    #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\adc.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\adc\adc.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程
      4          * 文件名 :[adc.c]
      5          * 描  述 ：adc驱动函数
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：adc驱动函数
      9          ***********************************************************************
     10          */
     11          #include "common.h"
     12          #include "adc.h"
     13          
     14          

   \                                 In section .bss, align 4
     15          tADC_Config Master_Adc_Config;          //该结构体包含了需要的ADC/PGA配置
   \                     Master_Adc_Config:
   \   00000000                      DS8 16
     16          

   \                                 In section .data, align 4
     17          volatile struct ADC_MemMap *ADCx[2]={ADC0_BASE_PTR,ADC1_BASE_PTR}; //定义两个指针数组保存 ADCx 的地址
   \                     ADCx:
   \   00000000   0x4003B000         DC32 4003B000H, 400BB000H
   \              0x400BB000   
     18          
     19          /*************************************************************************
     20          *  函数名称：adc_init
     21          *  功能说明：AD初始化，使能时钟
     22          *  参数说明：ADCn        模块号（ ADC0、 ADC1）
     23          *  函数返回：无
     24          *  修改时间：2012-2-10
     25          *  备    注：参考苏州大学的例程
     26          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     27          void adc_init(ADCn adcn,ADC_Ch ch)
     28          {
   \                     adc_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     29              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD104             BNE.N    ??adc_init_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0xF1B4 0x0008      SUBS     R0,R4,#+8
   \   00000012   0x280B             CMP      R0,#+11
   \   00000014   0xD30B             BCC.N    ??adc_init_1
   \                     ??adc_init_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xD103             BNE.N    ??adc_init_2
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x1F20             SUBS     R0,R4,#+4
   \   00000020   0x280E             CMP      R0,#+14
   \   00000022   0xD304             BCC.N    ??adc_init_1
   \                     ??adc_init_2: (+1)
   \   00000024   0x211D             MOVS     R1,#+29
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000002A   0x.... 0x....      BL       assert_failed
     30          
     31              switch(adcn)
   \                     ??adc_init_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD002             BEQ.N    ??adc_init_3
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD078             BEQ.N    ??adc_init_4
   \   00000038   0xE0E4             B.N      ??adc_init_5
     32              {
     33              case ADC0:       /*   ADC0  */
     34                  SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK );        //开启ADC0时钟
   \                     ??adc_init_3: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable5_1  ;; 0x4004803c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable5_1  ;; 0x4004803c
   \   00000048   0x6008             STR      R0,[R1, #+0]
     35                  SIM_SOPT7 &= ~(SIM_SOPT7_ADC0ALTTRGEN_MASK  |SIM_SOPT7_ADC0PRETRGSEL_MASK);// selects PDB not ALT trigger
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40048018
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF030 0x0090      BICS     R0,R0,#0x90
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x40048018
   \   00000058   0x6008             STR      R0,[R1, #+0]
     36                  SIM_SOPT7 = SIM_SOPT7_ADC0TRGSEL(0);        // PDB external pin input trigger for ADC
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40048018
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x6001             STR      R1,[R0, #+0]
     37          
     38                  switch(ch)
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3808             SUBS     R0,R0,#+8
   \   00000068   0x2801             CMP      R0,#+1
   \   0000006A   0xD90C             BLS.N    ??adc_init_6
   \   0000006C   0x1E80             SUBS     R0,R0,#+2
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD91B             BLS.N    ??adc_init_7
   \   00000072   0x1E80             SUBS     R0,R0,#+2
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD928             BLS.N    ??adc_init_8
   \   00000078   0x1E80             SUBS     R0,R0,#+2
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xD935             BLS.N    ??adc_init_9
   \   0000007E   0x1EC0             SUBS     R0,R0,#+3
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xD942             BLS.N    ??adc_init_10
   \   00000084   0xE050             B.N      ??adc_init_11
     39                  {
     40                  case AD8:   //ADC0_SE8 -- PTB0
     41                  case AD9:   //ADC0_SE9 -- PTB1
     42                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_6: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40048038
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x40048038
   \   00000094   0x6008             STR      R0,[R1, #+0]
     43                      PORT_PCR_REG(PORTB_BASE_PTR, ch-AD8+0) =  PORT_PCR_MUX(0);
   \   00000096   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000098   0x00A0             LSLS     R0,R4,#+2
   \   0000009A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000009E   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0xF840 0x1C20      STR      R1,[R0, #-32]
     44                      break;
     45                  case AD10:  //ADC0_SE10 -- PTA7
     46                  case AD11:  //ADC0_SE11 -- PTA8
     47                      SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
     48                      PORT_PCR_REG(PORTA_BASE_PTR, ch-AD10+7) =  PORT_PCR_MUX(0);
     49                      break;
     50                  case AD12:  //ADC0_SE12 -- PTB2
     51                  case AD13:  //ADC0_SE13 -- PTB3
     52                      SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
     53                      PORT_PCR_REG(PORTB_BASE_PTR, ch-AD12+2) =  PORT_PCR_MUX(0);
     54                      break;
     55                  case AD14:  //ADC0_SE14 -- PTC0
     56                  case AD15:  //ADC0_SE15 -- PTC1
     57                      SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
     58                      PORT_PCR_REG(PORTC_BASE_PTR, ch-AD14+0) =  PORT_PCR_MUX(0);
     59                      break;
     60                  case AD17:   //ADC0_SE17 -- PTE24
     61                  case AD18:   //ADC0_SE17 -- PTE25
     62                      SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
     63                      PORT_PCR_REG(PORTE_BASE_PTR, ch-AD17+24) =  PORT_PCR_MUX(0);
     64                      break;
     65                  default:
     66                      return;
     67                  }
     68                  return;
   \                     ??adc_init_12: (+1)
   \   000000A8   0xE0AC             B.N      ??adc_init_13
   \                     ??adc_init_7: (+1)
   \   000000AA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000000B2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000B4   0x6008             STR      R0,[R1, #+0]
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0x00A0             LSLS     R0,R4,#+2
   \   000000BA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000BE   0xF510 0x2092      ADDS     R0,R0,#+299008
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0xF840 0x1C0C      STR      R1,[R0, #-12]
   \   000000C8   0xE7EE             B.N      ??adc_init_12
   \                     ??adc_init_8: (+1)
   \   000000CA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000D2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000D4   0x6008             STR      R0,[R1, #+0]
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0x00A0             LSLS     R0,R4,#+2
   \   000000DA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000DE   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0xF840 0x1C28      STR      R1,[R0, #-40]
   \   000000E8   0xE7DE             B.N      ??adc_init_12
   \                     ??adc_init_9: (+1)
   \   000000EA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000F2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000000F4   0x6008             STR      R0,[R1, #+0]
   \   000000F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F8   0x00A0             LSLS     R0,R4,#+2
   \   000000FA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000FE   0xF510 0x2096      ADDS     R0,R0,#+307200
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0xF840 0x1C38      STR      R1,[R0, #-56]
   \   00000108   0xE7CE             B.N      ??adc_init_12
   \                     ??adc_init_10: (+1)
   \   0000010A   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000112   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000114   0x6008             STR      R0,[R1, #+0]
   \   00000116   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000118   0x00A0             LSLS     R0,R4,#+2
   \   0000011A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000011E   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x61C1             STR      R1,[R0, #+28]
   \   00000126   0xE7BF             B.N      ??adc_init_12
   \                     ??adc_init_11: (+1)
   \   00000128   0xE06C             B.N      ??adc_init_13
     69          
     70            case ADC1:       /*   ADC1    */
     71                SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK );
   \                     ??adc_init_4: (+1)
   \   0000012A   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40048030
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000132   0x....             LDR.N    R1,??DataTable5_4  ;; 0x40048030
   \   00000134   0x6008             STR      R0,[R1, #+0]
     72                SIM_SOPT7 &= ~(SIM_SOPT7_ADC1ALTTRGEN_MASK  |SIM_SOPT7_ADC1PRETRGSEL_MASK) ;
   \   00000136   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40048018
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0xF430 0x4010      BICS     R0,R0,#0x9000
   \   0000013E   0x....             LDR.N    R1,??DataTable5_2  ;; 0x40048018
   \   00000140   0x6008             STR      R0,[R1, #+0]
     73                SIM_SOPT7 = SIM_SOPT7_ADC1TRGSEL(0);
   \   00000142   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40048018
   \   00000144   0x2100             MOVS     R1,#+0
   \   00000146   0x6001             STR      R1,[R0, #+0]
     74          
     75                switch(ch)
   \   00000148   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014A   0x0020             MOVS     R0,R4
   \   0000014C   0x1F00             SUBS     R0,R0,#+4
   \   0000014E   0x2803             CMP      R0,#+3
   \   00000150   0xD90B             BLS.N    ??adc_init_14
   \   00000152   0x1F00             SUBS     R0,R0,#+4
   \   00000154   0x2801             CMP      R0,#+1
   \   00000156   0xD918             BLS.N    ??adc_init_15
   \   00000158   0x1E80             SUBS     R0,R0,#+2
   \   0000015A   0x2803             CMP      R0,#+3
   \   0000015C   0xD925             BLS.N    ??adc_init_16
   \   0000015E   0x1F00             SUBS     R0,R0,#+4
   \   00000160   0x2801             CMP      R0,#+1
   \   00000162   0xD932             BLS.N    ??adc_init_17
   \   00000164   0x1EC0             SUBS     R0,R0,#+3
   \   00000166   0xD040             BEQ.N    ??adc_init_18
   \   00000168   0xE04B             B.N      ??adc_init_19
     76                {
     77                case AD4a:   //ADC1_SE4a -- PTE0
     78                case AD5a:   //ADC1_SE5a -- PTE1
     79                case AD6a:   //ADC1_SE6a -- PTE2
     80                case AD7a:   //ADC1_SE7a -- PTE3
     81                    SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
   \                     ??adc_init_14: (+1)
   \   0000016A   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000172   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000174   0x6008             STR      R0,[R1, #+0]
     82                    PORT_PCR_REG(PORTE_BASE_PTR, ch-AD4a+0) =  PORT_PCR_MUX(0);
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x00A0             LSLS     R0,R4,#+2
   \   0000017A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000017E   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   00000182   0x2100             MOVS     R1,#+0
   \   00000184   0xF840 0x1C10      STR      R1,[R0, #-16]
     83                    break;
   \   00000188   0xE03B             B.N      ??adc_init_20
     84                case AD8:  //ADC1_SE8 -- PTB0
     85                case AD9:  //ADC1_SE9 -- PTB1
     86                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_15: (+1)
   \   0000018A   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000192   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   00000194   0x6008             STR      R0,[R1, #+0]
     87                    PORT_PCR_REG(PORTB_BASE_PTR, ch-AD8+0) =  PORT_PCR_MUX(0);
   \   00000196   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000198   0x00A0             LSLS     R0,R4,#+2
   \   0000019A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000019E   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001A2   0x2100             MOVS     R1,#+0
   \   000001A4   0xF840 0x1C20      STR      R1,[R0, #-32]
     88                    break;
   \   000001A8   0xE02B             B.N      ??adc_init_20
     89                case AD10:  //ADC1_SE10 -- PTB4
     90                case AD11:  //ADC1_SE11 -- PTB5
     91                case AD12:  //ADC1_SE12 -- PTB6
     92                case AD13:  //ADC1_SE13 -- PTB7
     93                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_16: (+1)
   \   000001AA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001AC   0x6800             LDR      R0,[R0, #+0]
   \   000001AE   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001B2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001B4   0x6008             STR      R0,[R1, #+0]
     94                    PORT_PCR_REG(PORTB_BASE_PTR, ch-6) =  PORT_PCR_MUX(0);
   \   000001B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B8   0x00A0             LSLS     R0,R4,#+2
   \   000001BA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001BE   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001C2   0x2100             MOVS     R1,#+0
   \   000001C4   0xF840 0x1C18      STR      R1,[R0, #-24]
     95                    break;
   \   000001C8   0xE01B             B.N      ??adc_init_20
     96                case AD14:  //ADC1_SE14 -- PTB10
     97                case AD15:  //ADC1_SE15 -- PTB11
     98                    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??adc_init_17: (+1)
   \   000001CA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001CC   0x6800             LDR      R0,[R0, #+0]
   \   000001CE   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001D2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001D4   0x6008             STR      R0,[R1, #+0]
     99                    PORT_PCR_REG(PORTB_BASE_PTR, ch-AD10+4) =  PORT_PCR_MUX(0);
   \   000001D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D8   0x00A0             LSLS     R0,R4,#+2
   \   000001DA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001DE   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001E2   0x2100             MOVS     R1,#+0
   \   000001E4   0xF840 0x1C18      STR      R1,[R0, #-24]
    100                    break;
   \   000001E8   0xE00B             B.N      ??adc_init_20
    101                case AD17:  //ADC1_SE17 -- PTA17
    102                    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \                     ??adc_init_18: (+1)
   \   000001EA   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40048038
   \   000001EC   0x6800             LDR      R0,[R0, #+0]
   \   000001EE   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000001F2   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40048038
   \   000001F4   0x6008             STR      R0,[R1, #+0]
    103                    PORT_PCR_REG(PORTA_BASE_PTR, ch) =  PORT_PCR_MUX(0);
   \   000001F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001F8   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40049000
   \   000001FA   0x2100             MOVS     R1,#+0
   \   000001FC   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    104                    break;
   \   00000200   0xE7FF             B.N      ??adc_init_20
    105                default:
    106                    break;
    107                }
    108                break;
   \                     ??adc_init_19: (+1)
   \                     ??adc_init_20: (+1)
   \   00000202   0xE7FF             B.N      ??adc_init_21
    109            default:
    110                break;
    111            }
    112          }
   \                     ??adc_init_5: (+1)
   \                     ??adc_init_21: (+1)
   \                     ??adc_init_13: (+1)
   \   00000204   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    113          
    114          
    115          /*************************************************************************
    116          *                             野火嵌入式开发工作室
    117          *
    118          *  函数名称：ad_once
    119          *  功能说明：采集一次一路模拟量的AD值
    120          *  参数说明：ADCn        模块号（ ADC0、 ADC1）
    121          *            ADC_Channel 通道号
    122          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    123          *  函数返回：无符号结果值
    124          *  修改时间：2012-2-10
    125          *  备    注：参考苏州大学的例程，B通道不能软件触发！！！！  个人测试 在48Mbus下，AD转换一个次不到7us
    126          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          u16 ad_once(ADCn adcn,ADC_Ch ch,ADC_nbit bit)  //采集某路模拟量的AD值
    128          {
   \                     ad_once: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    129              u16 result = 0;
   \   00000008   0x2000             MOVS     R0,#+0
    130              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD104             BNE.N    ??ad_once_0
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   00000016   0x280B             CMP      R0,#+11
   \   00000018   0xD30A             BCC.N    ??ad_once_1
   \                     ??ad_once_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD103             BNE.N    ??ad_once_2
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x1F28             SUBS     R0,R5,#+4
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xD303             BCC.N    ??ad_once_1
   \                     ??ad_once_2: (+1)
   \   00000028   0x2182             MOVS     R1,#+130
   \   0000002A   0x....             LDR.N    R0,??DataTable5
   \   0000002C   0x.... 0x....      BL       assert_failed
    131          
    132              adc_start(adcn, ch, bit);	  //启动ADC转换
   \                     ??ad_once_1: (+1)
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       adc_start
    133          
    134              while (( ADC_SC1_REG(ADCx[adcn], A ) & ADC_SC1_COCO_MASK ) != ADC_SC1_COCO_MASK);
   \                     ??ad_once_3: (+1)
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x....             LDR.N    R0,??DataTable5_6
   \   00000044   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x0600             LSLS     R0,R0,#+24
   \   0000004C   0xD5F8             BPL.N    ??ad_once_3
    135              result = ADC_R_REG(ADCx[adcn],A);
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x....             LDR.N    R0,??DataTable5_6
   \   00000052   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000056   0x6900             LDR      R0,[R0, #+16]
    136              ADC_SC1_REG(ADCx[adcn],A) &= ~ADC_SC1_COCO_MASK;
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x....             LDR.N    R1,??DataTable5_6
   \   0000005C   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF031 0x0180      BICS     R1,R1,#0x80
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x....             LDR.N    R2,??DataTable5_6
   \   0000006A   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000006E   0x6011             STR      R1,[R2, #+0]
    137              return result;
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
    138          }
    139          
    140          /*************************************************************************
    141          *                             野火嵌入式开发工作室
    142          *
    143          *  函数名称：ad_mid
    144          *  功能说明：采集三次一路模拟量的AD值，返回 中值
    145          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    146          *            ADC_Channel 通道号
    147          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    148          *  函数返回：无符号结果值
    149          *  修改时间：2012-2-10
    150          *  备    注：修改苏州大学的例程
    151          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          u16 ad_mid(ADCn adcn,ADC_Ch ch,ADC_nbit bit)
    153          {
   \                     ad_mid: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    154              u16 i,j,k,tmp;
    155              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD104             BNE.N    ??ad_mid_0
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   00000016   0x280B             CMP      R0,#+11
   \   00000018   0xD30A             BCC.N    ??ad_mid_1
   \                     ??ad_mid_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD103             BNE.N    ??ad_mid_2
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x1F28             SUBS     R0,R5,#+4
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xD303             BCC.N    ??ad_mid_1
   \                     ??ad_mid_2: (+1)
   \   00000028   0x219B             MOVS     R1,#+155
   \   0000002A   0x....             LDR.N    R0,??DataTable5
   \   0000002C   0x.... 0x....      BL       assert_failed
    156          
    157              //3次ADC转换
    158              i = ad_once(adcn,ch,bit);
   \                     ??ad_mid_1: (+1)
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       ad_once
   \   00000040   0x0007             MOVS     R7,R0
    159              j = ad_once(adcn,ch,bit);
   \   00000042   0x0032             MOVS     R2,R6
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       ad_once
   \   00000052   0x4680             MOV      R8,R0
    160              k = ad_once(adcn,ch,bit);
   \   00000054   0x0032             MOVS     R2,R6
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0x0029             MOVS     R1,R5
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       ad_once
    161          
    162              //取中值
    163              tmp = i>j ? i:j;              //tmp取两者最大值
   \   00000064   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000068   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006A   0x45B8             CMP      R8,R7
   \   0000006C   0xD201             BCS.N    ??ad_mid_3
   \   0000006E   0x46B8             MOV      R8,R7
   \   00000070   0xE7FF             B.N      ??ad_mid_4
    164              return k > tmp ?    tmp :  (   k>i  ?    k   :     i  );
   \                     ??ad_mid_3: (+1)
   \                     ??ad_mid_4: (+1)
   \   00000072   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0x4580             CMP      R8,R0
   \   0000007A   0xD201             BCS.N    ??ad_mid_5
   \   0000007C   0x4647             MOV      R7,R8
   \   0000007E   0xE005             B.N      ??ad_mid_6
   \                     ??ad_mid_5: (+1)
   \   00000080   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x4287             CMP      R7,R0
   \   00000086   0xD201             BCS.N    ??ad_mid_7
   \   00000088   0x0007             MOVS     R7,R0
   \   0000008A   0xE7FF             B.N      ??ad_mid_8
   \                     ??ad_mid_7: (+1)
   \                     ??ad_mid_8: (+1)
   \                     ??ad_mid_6: (+1)
   \   0000008C   0x0038             MOVS     R0,R7
   \   0000008E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000090   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    165              //                k>tmp>i             tmp>k>i   tmp>i>k
    166          }
    167          
    168          /*************************************************************************
    169          *                             野火嵌入式开发工作室
    170          *
    171          *  函数名称：ad_ave
    172          *  功能说明：多次采样，取平均值
    173          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    174          *            ADC_Channel 通道号
    175          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    176          *            N           均值滤波次数(范围:0~255)
    177          *  函数返回：16位无符号结果值
    178          *  修改时间：2012-2-10
    179          *  备    注：修改苏州大学的例程
    180          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          u16 ad_ave(ADCn adcn,ADC_Ch ch,ADC_nbit bit,u16 N) //均值滤波
    182          {
   \                     ad_ave: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    183              u32 tmp = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    184              u16  i;
    185              ASSERT( ((adcn == ADC0) && (ch>=AD8 && ch<=AD18)) || ((adcn == ADC1)&& (ch>=AD4a && ch<=AD17)) ) ;   //使用断言检测ADCn_CHn是否正常
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD104             BNE.N    ??ad_ave_0
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0xF1B5 0x0008      SUBS     R0,R5,#+8
   \   0000001C   0x280B             CMP      R0,#+11
   \   0000001E   0xD30A             BCC.N    ??ad_ave_1
   \                     ??ad_ave_0: (+1)
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C01             CMP      R4,#+1
   \   00000024   0xD103             BNE.N    ??ad_ave_2
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x1F28             SUBS     R0,R5,#+4
   \   0000002A   0x280E             CMP      R0,#+14
   \   0000002C   0xD303             BCC.N    ??ad_ave_1
   \                     ??ad_ave_2: (+1)
   \   0000002E   0x21B9             MOVS     R1,#+185
   \   00000030   0x....             LDR.N    R0,??DataTable5
   \   00000032   0x.... 0x....      BL       assert_failed
    186          
    187              for(i = 0; i < N; i++)
   \                     ??ad_ave_1: (+1)
   \   00000036   0xF05F 0x0900      MOVS     R9,#+0
   \   0000003A   0xE00B             B.N      ??ad_ave_3
    188                  tmp += ad_once(adcn,ch,bit);
   \                     ??ad_ave_4: (+1)
   \   0000003C   0x0032             MOVS     R2,R6
   \   0000003E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       ad_once
   \   0000004C   0xFA18 0xF880      UXTAH    R8,R8,R0
   \   00000050   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??ad_ave_3: (+1)
   \   00000054   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000058   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005A   0x45B9             CMP      R9,R7
   \   0000005C   0xD3EE             BCC.N    ??ad_ave_4
    189              tmp = tmp / N;
   \   0000005E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000060   0xFBB8 0xF8F7      UDIV     R8,R8,R7
    190              return (u16)tmp;
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    191          }
    192          
    193          /*************************************************************************
    194          *  函数名称：adc_start
    195          *  功能说明：启动adc软件采样，B通道不能用于软件触发！！！！
    196          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    197          *            ADC_Channel 通道号
    198          *            ADC_nbit    精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    199          *  函数返回：无
    200          *  修改时间：2012-2-10
    201          *  备    注：修改苏州大学的例程
    202          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          void adc_start(ADCn adcn,ADC_Ch ch,ADC_nbit bit)
    204          {
   \                     adc_start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    205          
    206              Master_Adc_Config.STATUS1A = AIEN_ON | DIFF_SINGLE | ADC_SC1_ADCH( ch );
   \   00000002   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000006   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000000A   0x....             LDR.N    R3,??DataTable5_7
   \   0000000C   0x7219             STRB     R1,[R3, #+8]
    207          
    208              //初始化ADC默认配置
    209              Master_Adc_Config.CONFIG1  = ADLPC_NORMAL
    210                                           | ADC_CFG1_ADIV(ADIV_2)
    211                                           | ADLSMP_LONG
    212                                           | ADC_CFG1_MODE(bit)
    213                                           | ADC_CFG1_ADICLK(ADICLK_BUS);
   \   0000000E   0x0091             LSLS     R1,R2,#+2
   \   00000010   0xF011 0x010C      ANDS     R1,R1,#0xC
   \   00000014   0xF051 0x0130      ORRS     R1,R1,#0x30
   \   00000018   0x....             LDR.N    R2,??DataTable5_7
   \   0000001A   0x7011             STRB     R1,[R2, #+0]
    214              Master_Adc_Config.CONFIG2  = MUXSEL_ADCA    //MUXSEL_ADCA
    215                                           | ADACKEN_DISABLED
    216                                           | ADHSC_HISPEED
    217                                           | ADC_CFG2_ADLSTS(ADLSTS_20) ;
   \   0000001C   0x....             LDR.N    R1,??DataTable5_7
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x704A             STRB     R2,[R1, #+1]
    218          
    219              Master_Adc_Config.COMPARE1 = 0x1234u ;                 //任意值
   \   00000022   0x....             LDR.N    R1,??DataTable5_7
   \   00000024   0xF241 0x2234      MOVW     R2,#+4660
   \   00000028   0x804A             STRH     R2,[R1, #+2]
    220              Master_Adc_Config.COMPARE2 = 0x5678u ;                 //任意值
   \   0000002A   0x....             LDR.N    R1,??DataTable5_7
   \   0000002C   0xF245 0x6278      MOVW     R2,#+22136
   \   00000030   0x808A             STRH     R2,[R1, #+4]
    221          
    222              adc_config_alt(ADCx[adcn], &Master_Adc_Config);       // 配置 ADCn
   \   00000032   0x....             LDR.N    R1,??DataTable5_7
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x....             LDR.N    R2,??DataTable5_6
   \   00000038   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000003C   0x.... 0x....      BL       adc_config_alt
    223          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    224          
    225          /*************************************************************************
    226          *                             野火嵌入式开发工作室
    227          *
    228          *  函数名称：adc_stop
    229          *  功能说明：停止ADC转换
    230          *  参数说明：ADCx        模块号（ ADC0、 ADC1）
    231          *            ADC_Channel 通道号
    232          *  函数返回：无
    233          *  修改时间：2012-2-10
    234          *  备    注：修改苏州大学的例程
    235          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          void adc_stop(ADCn adcn)
    237          {
   \                     adc_stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    238              Master_Adc_Config.STATUS1A = AIEN_ON | DIFF_SINGLE | ADC_SC1_ADCH(Module_disabled);
   \   00000002   0x....             LDR.N    R1,??DataTable5_7
   \   00000004   0x225F             MOVS     R2,#+95
   \   00000006   0x720A             STRB     R2,[R1, #+8]
    239              adc_config_alt(ADCx[adcn], &Master_Adc_Config);  // 配置ADC0
   \   00000008   0x....             LDR.N    R1,??DataTable5_7
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x....             LDR.N    R2,??DataTable5_6
   \   0000000E   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000012   0x.... 0x....      BL       adc_config_alt
    240          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    241          
    242          
    243          /*************************************************************************
    244          *                             野火嵌入式开发工作室
    245          *
    246          *  函数名称：adc_config_alt
    247          *  功能说明：将adc寄存器结构体配置进adc寄存器
    248          *  参数说明：adcmap      adc基址寄存器地址（ADC0_BASE_PTR,ADC1_BASE_PTR）
    249          *            ADC_CfgPtr  存放 寄存器值的结构体
    250          *  函数返回：无
    251          *  修改时间：2012-2-10
    252          *  备    注：修改官方工程的例程
    253          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          void adc_config_alt(ADC_MemMapPtr adcmap, tADC_ConfigPtr ADC_CfgPtr)
    255          {
    256              ADC_CFG1_REG(adcmap) = ADC_CfgPtr->CONFIG1;
   \                     adc_config_alt: (+1)
   \   00000000   0x780A             LDRB     R2,[R1, #+0]
   \   00000002   0x6082             STR      R2,[R0, #+8]
    257              ADC_CFG2_REG(adcmap) = ADC_CfgPtr->CONFIG2;
   \   00000004   0x784A             LDRB     R2,[R1, #+1]
   \   00000006   0x60C2             STR      R2,[R0, #+12]
    258              ADC_CV1_REG(adcmap)  = ADC_CfgPtr->COMPARE1;
   \   00000008   0x884A             LDRH     R2,[R1, #+2]
   \   0000000A   0x6182             STR      R2,[R0, #+24]
    259              ADC_CV2_REG(adcmap)  = ADC_CfgPtr->COMPARE2;
   \   0000000C   0x888A             LDRH     R2,[R1, #+4]
   \   0000000E   0x61C2             STR      R2,[R0, #+28]
    260              ADC_SC2_REG(adcmap)  = ADC_CfgPtr->STATUS2;
   \   00000010   0x798A             LDRB     R2,[R1, #+6]
   \   00000012   0x6202             STR      R2,[R0, #+32]
    261              ADC_SC3_REG(adcmap)  = ADC_CfgPtr->STATUS3;
   \   00000014   0x79CA             LDRB     R2,[R1, #+7]
   \   00000016   0x6242             STR      R2,[R0, #+36]
    262              ADC_PGA_REG(adcmap)  = ADC_CfgPtr->PGA;
   \   00000018   0x68CA             LDR      R2,[R1, #+12]
   \   0000001A   0x6502             STR      R2,[R0, #+80]
    263              ADC_SC1_REG(adcmap,A)= ADC_CfgPtr->STATUS1A;
   \   0000001C   0x7A0A             LDRB     R2,[R1, #+8]
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    264              ADC_SC1_REG(adcmap,B)= ADC_CfgPtr->STATUS1B;
   \   00000020   0x7A49             LDRB     R1,[R1, #+9]
   \   00000022   0x6041             STR      R1,[R0, #+4]
    265          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     `?<Constant "C:\\\\Users\\\\Administrato...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40048018         DC32     0x40048018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ADCx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     Master_Adc_Config

   \                                 In section .rodata, align 4
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 4DH
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0x4D    
   \   00000020   0x50 0x55          DC8 50H, 55H, 36H, 30H, 35H, 30H, 38H, 2EH
   \              0x36 0x30    
   \              0x35 0x30    
   \              0x38 0x2E    
   \   00000028   0x31 0x32          DC8 31H, 32H, 5CH, 73H, 72H, 63H, 5CH, 64H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x64    
   \   00000030   0x72 0x69          DC8 72H, 69H, 76H, 65H, 72H, 73H, 5CH, 61H
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x5C 0x61    
   \   00000038   0x64 0x63          DC8 64H, 63H, 5CH, 61H, 64H, 63H, 2EH, 63H
   \              0x5C 0x61    
   \              0x64 0x63    
   \              0x2E 0x63    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    266          
    267          
    268          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ad_ave
        32   -> ad_once
        32   -> assert_failed
      24   ad_mid
        24   -> ad_once
        24   -> assert_failed
      16   ad_once
        16   -> adc_start
        16   -> assert_failed
       0   adc_config_alt
      16   adc_init
        16   -> assert_failed
       8   adc_start
         8   -> adc_config_alt
       8   adc_stop
         8   -> adc_config_alt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?<Constant "C:\\Users\\Administrato...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       8  ADCx
      16  Master_Adc_Config
     108  ad_ave
     148  ad_mid
     116  ad_once
      38  adc_config_alt
     518  adc_init
      66  adc_start
      24  adc_stop

 
    16 bytes in section .bss
     8 bytes in section .data
    68 bytes in section .rodata
 1 050 bytes in section .text
 
 1 050 bytes of CODE  memory
    68 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
