###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      15/Aug/2015  19:53:00 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\projects\ #
#                    gpio_demo\control.c                                      #
#    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\projects\ #
#                    gpio_demo\control.c -lCN C:\Users\Administrator\Desktop\ #
#                    MPU60508.12\build\gpio_demo\FLASH\List\ -lB              #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU6050 #
#                    8.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\IAR Systems\Embedded     #
#                    Workbench 6.5\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\bui #
#                    ld\gpio_demo\..\..\src\common\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MPU6 #
#                    0508.12\build\gpio_demo\..\..\src\drivers\ -I            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\gpio\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\olcd\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\diskio\ -I                          #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\iospi\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\wdog\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\mcg\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\flash\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\uart\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\lptmr\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\LED\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\fun\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\FTM\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\pit\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\DIPswitch\ -I                       #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\motor\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\laser\ -I                           #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\i2c\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\ADdevice\ -I                        #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\adc\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\serial_digtal_scope\ -I             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MMA845x\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\exti\ -I                            #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\dma\ -I                             #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\platforms\ -I C:\Users\Administrator\Deskto #
#                    p\MPU60508.12\build\gpio_demo\..\..\src\projects\ -I     #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\projects\gpio_demo\ -I                      #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\MPU6050\ -I                         #
#                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\..\..\src\drivers\steer\ -Ol                          #
#    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\List\control.lst                                #
#    Object file  =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_de #
#                    mo\FLASH\Obj\control.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\MPU60508.12\src\projects\gpio_demo\control.c
      1          #include "include.h"
      2          #include "control.h"
      3          
      4          
      5          
      6          /**********************************************************************************
      7          *  函数名称：void init()
      8          *  功能说明：各种初始化函数
      9          *  参数说明：无
     10          *  函数返回：无
     11          *  修改时间：2014-6-16  wuwenqi
     12          *  备    注：
     13          **********************************************************************************/	

   \                                 In section .text, align 4, keep-with-next
     14          void init()
     15          {
   \                     init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     16            DisableInterrupts;
   \   00000002   0xB672             CPSID i
     17            //打开串口中断
     18            LCD_Init();
   \   00000004   0x.... 0x....      BL       LCD_Init
     19            SD_init();
   \   00000008   0x.... 0x....      BL       SD_init
     20            
     21            
     22          //  gpio_init(PORTA,12,GPO,0);//蜂鸣器初始化
     23          
     24            uart_init(UART0,115200);
   \   0000000C   0xF45F 0x31E1      MOVS     R1,#+115200
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       uart_init
     25            //初始化并开启PIT中断
     26            pit_init(PIT0,100); //pit定时，10ms
   \   00000016   0x2164             MOVS     R1,#+100
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       pit_init
     27              
     28            pit_init(PIT1,100); //pit定时，10ms
   \   0000001E   0x2164             MOVS     R1,#+100
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       pit_init
     29           // pit_init(PIT1,1); //pit定时，1s
     30           // PIT_IRQ_EN(PIT1);   
     31            
     32            //电机初始化，PTC1,PTC2频率：16kHz，50%占空比
     33            motor_init();
   \   00000026   0x.... 0x....      BL       motor_init
     34            
     35            //舵机初始化
     36            steer_init();
   \   0000002A   0x.... 0x....      BL       steer_init
     37            
     38            //编码器初始化
     39            lptmr_counter_init(LPT0_ALT2,65535,2,LPT_Rising); 
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x2202             MOVS     R2,#+2
   \   00000032   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       lptmr_counter_init
     40            FTM_QUAD_DIR_init(FTM2);
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       FTM_QUAD_DIR_init
     41            
     42            
     43            //调整中断优先级 set_irq_priority (int irq, int prio),肥叉烧,2014-3-30
     44            set_irq_priority (88,0); //exti_PTB最高优先级0，用于控制DMA采集图像；
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2058             MOVS     R0,#+88
   \   00000046   0x.... 0x....      BL       set_irq_priority
     45            set_irq_priority (68,1); // PIT0第二优先级1，用于速度和方向控制；
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2044             MOVS     R0,#+68
   \   0000004E   0x.... 0x....      BL       set_irq_priority
     46            set_irq_priority (45,2); // UART0第三优先级，没你的事儿。
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x202D             MOVS     R0,#+45
   \   00000056   0x.... 0x....      BL       set_irq_priority
     47            //摄像头初始化
     48            gpio_init(PORTA,15,GPO,HIGH);         //核心板测试LED，初始化 PTA15 ：输出高电平 ,即 初始化 LED0，灭
   \   0000005A   0x2301             MOVS     R3,#+1
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x210F             MOVS     R1,#+15
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       gpio_init
     49            gpio_init(PORTA,4,GPO,HIGH);          //主板测试LED    初始化 PTA4 ： 输出高电平 ,即 初始化 LED0，灭
   \   00000066   0x2301             MOVS     R3,#+1
   \   00000068   0x2201             MOVS     R2,#+1
   \   0000006A   0x2104             MOVS     R1,#+4
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       gpio_init
     50            //蜂鸣器初始化
     51            gpio_init(PORTA,14,GPO,0);
   \   00000072   0x2300             MOVS     R3,#+0
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x210E             MOVS     R1,#+14
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       gpio_init
     52            
     53            //拨码开关初始化
     54            gpio_init(PORTA,16,GPO,0);
   \   0000007E   0x2300             MOVS     R3,#+0
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x2110             MOVS     R1,#+16
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      BL       gpio_init
     55            gpio_init(PORTA,19,GPO,0);
   \   0000008A   0x2300             MOVS     R3,#+0
   \   0000008C   0x2201             MOVS     R2,#+1
   \   0000008E   0x2113             MOVS     R1,#+19
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       gpio_init
     56            gpio_init(PORTA,18,GPO,0);
   \   00000096   0x2300             MOVS     R3,#+0
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x2112             MOVS     R1,#+18
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       gpio_init
     57          
     58            //红外接收管初始化
     59            exti_init(PORTC,8,falling_down);
   \   000000A2   0x220A             MOVS     R2,#+10
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x.... 0x....      BL       exti_init
     60            
     61            
     62            
     63            cam_init();
   \   000000AC   0x.... 0x....      BL       cam_init
     64            flash_init();
   \   000000B0   0x.... 0x....      BL       flash_init
     65            
     66            
     67            EnableInterrupts;
   \   000000B4   0xB662             CPSIE i
     68            
     69          }
   \   000000B6   0xBD01             POP      {R0,PC}          ;; return
     70          
     71          
     72          /***********************************************
     73          * 摄像头初始化函数
     74          *  函数名称：cam_init
     75          *  功能说明：初始化摄像头场行中断，初始化摄像头DMA传输
     76          *  参数说明：
     77          *  函数返回：无
     78          *  修改时间：2014-3-29
     79          *  备    注：
     80          ***********************************************/
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void cam_init()
     83          {
   \                     cam_init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     84            //胡兆华
     85              exti_init(CAM_PORTX,CAM_HR_CHn,rising_down);                //行中断//初始化外部中断输入捕捉模式，上升沿触发
   \   00000002   0x2209             MOVS     R2,#+9
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       exti_init
     86              exti_init(CAM_PORTX,CAM_VS_CHn,falling_down);               //场中断//初始化外部中断输入捕捉模式，下降沿触发// Changed to rising for test,feichashao,20140328
   \   0000000C   0x220A             MOVS     R2,#+10
   \   0000000E   0x2103             MOVS     R1,#+3
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       exti_init
     87              Dis_CAM; 
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       exti_irq_DIS
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       exti_irq_DIS
     88              DMA_PORTx2BUFF_Init (CAM_DMA_CH,(void *)&PTD_BYTE0_IN,&Pic_Buffer[0][0],PLCK_CH,DMA_BYTE1,COLUMN,DMA_rising);//DMA_falling DMA_rising 
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x9002             STR      R0,[SP, #+8]
   \   0000002A   0x2073             MOVS     R0,#+115
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x2329             MOVS     R3,#+41
   \   00000034   0x....             LDR.N    R2,??DataTable4_2
   \   00000036   0x....             LDR.N    R1,??DataTable4_3  ;; 0x400ff0d0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       DMA_PORTx2BUFF_Init
     89          }
   \   0000003E   0xBD07             POP      {R0-R2,PC}       ;; return
     90          
     91          
     92          
     93          
     94          
     95          
     96          /**********************************************************************************
     97          *  函数名称：void get_photo() 
     98          *  功能说明：采集图像
     99          *  参数说明：无
    100          *  函数返回：无
    101          *  修改时间：2014-6-17  wuwenqi
    102          *  备    注：
    103          **********************************************************************************/	

   \                                 In section .text, align 2, keep-with-next
    104          void get_photo()
    105          {
    106          
    107            
    108                     
    109              
    110              
    111          }
   \                     get_photo: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    112            
    113          
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void Erosion(unsigned char* inputData,unsigned char* outputData)  
    116          {  
   \                     Erosion: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0BA             SUB      SP,SP,#+232
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    117           int i, j; 
    118           long x,y;
    119               
    120           unsigned char source[COLUMN]={0};
   \   00000008   0xA81D             ADD      R0,SP,#+116
   \   0000000A   0x2174             MOVS     R1,#+116
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    121           unsigned char distinition[COLUMN]={0};
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x2174             MOVS     R1,#+116
   \   00000014   0x.... 0x....      BL       __aeabi_memclr4
    122                    for(j=10;j<COLUMN;j++)
   \   00000018   0x200A             MOVS     R0,#+10
   \   0000001A   0xE003             B.N      ??Erosion_0
    123                     {distinition[j]=inputData[j];}
   \                     ??Erosion_1: (+1)
   \   0000001C   0x5D01             LDRB     R1,[R0, R4]
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x5481             STRB     R1,[R0, R2]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \                     ??Erosion_0: (+1)
   \   00000024   0x2873             CMP      R0,#+115
   \   00000026   0xDBF9             BLT.N    ??Erosion_1
    124                  for(i = 4;i <ROW-1;i++)  //ROW  从右往左扫 
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0xE007             B.N      ??Erosion_2
    125                  {
    126          			//printp("%2d:",i);
    127          	        for(j=10;j<COLUMN;j++)
    128          	        {
    129          	         source[j]=inputData[i*COLUMN+j];
    130          	        }
    131          			  for(j =10;j <COLUMN-1;j++)  //COLUMN
    132          			  { 
    133          			        x=distinition[j+1]+2*source[j+1]+inputData[(i+1)*COLUMN+j+1]-
    134          			        (distinition[j-1]+2*source[j-1]+inputData[(i+1)*COLUMN+j-1]);
    135          
    136           
    137          
    138          			         
    139          			        y=distinition[j-1]+2*distinition[j]+distinition[j+1]-
    140          			        (
    141          			         inputData[(i+1)*COLUMN+j-1]+2*inputData[(i+1)*COLUMN+j]+inputData[(i+1)*COLUMN+j+1]);
    142          			         if(x*x+y*y<ruihua_yuzhi)//100*100
    143          			          {
    144          			         outputData[i*COLUMN+j]=1;
    145          			          //printp(" ");
    146          			          }
    147          			         else  
    148          			         {
    149          			           outputData[i*COLUMN+j]=0;  
    150          			           //printp("%d*",j);                         
    151          			           }   
    152          			  }
    153          			  //printp("\n") ;   
    154          			  for(j=10;j<COLUMN;j++)
    155          			        {
    156          			            distinition[j]=source[j];
   \                     ??Erosion_3: (+1)
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0xAB1D             ADD      R3,SP,#+116
   \   00000030   0x5CC3             LDRB     R3,[R0, R3]
   \   00000032   0x5483             STRB     R3,[R0, R2]
    157          			        }    
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??Erosion_4: (+1)
   \   00000036   0x2873             CMP      R0,#+115
   \   00000038   0xDBF8             BLT.N    ??Erosion_3
   \   0000003A   0x1C49             ADDS     R1,R1,#+1
   \                     ??Erosion_2: (+1)
   \   0000003C   0x2977             CMP      R1,#+119
   \   0000003E   0xDA6A             BGE.N    ??Erosion_5
   \   00000040   0x200A             MOVS     R0,#+10
   \   00000042   0xE006             B.N      ??Erosion_6
   \                     ??Erosion_7: (+1)
   \   00000044   0x2273             MOVS     R2,#+115
   \   00000046   0xFB02 0x0201      MLA      R2,R2,R1,R0
   \   0000004A   0x5D12             LDRB     R2,[R2, R4]
   \   0000004C   0xAB1D             ADD      R3,SP,#+116
   \   0000004E   0x54C2             STRB     R2,[R0, R3]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \                     ??Erosion_6: (+1)
   \   00000052   0x2873             CMP      R0,#+115
   \   00000054   0xDBF6             BLT.N    ??Erosion_7
   \   00000056   0x200A             MOVS     R0,#+10
   \   00000058   0xE005             B.N      ??Erosion_8
   \                     ??Erosion_9: (+1)
   \   0000005A   0x2273             MOVS     R2,#+115
   \   0000005C   0xFB02 0x0201      MLA      R2,R2,R1,R0
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0x5553             STRB     R3,[R2, R5]
   \                     ??Erosion_10: (+1)
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \                     ??Erosion_8: (+1)
   \   00000066   0x2872             CMP      R0,#+114
   \   00000068   0xDA53             BGE.N    ??Erosion_11
   \   0000006A   0xAA00             ADD      R2,SP,#+0
   \   0000006C   0x1882             ADDS     R2,R0,R2
   \   0000006E   0x7852             LDRB     R2,[R2, #+1]
   \   00000070   0xAB1D             ADD      R3,SP,#+116
   \   00000072   0x18C3             ADDS     R3,R0,R3
   \   00000074   0x785B             LDRB     R3,[R3, #+1]
   \   00000076   0x005B             LSLS     R3,R3,#+1
   \   00000078   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   0000007C   0x2373             MOVS     R3,#+115
   \   0000007E   0xFB03 0x0301      MLA      R3,R3,R1,R0
   \   00000082   0x191B             ADDS     R3,R3,R4
   \   00000084   0xF893 0x3074      LDRB     R3,[R3, #+116]
   \   00000088   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   0000008C   0xAB00             ADD      R3,SP,#+0
   \   0000008E   0x18C3             ADDS     R3,R0,R3
   \   00000090   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   00000094   0x1AD2             SUBS     R2,R2,R3
   \   00000096   0xAB1D             ADD      R3,SP,#+116
   \   00000098   0x18C3             ADDS     R3,R0,R3
   \   0000009A   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000009E   0xEBB2 0x0243      SUBS     R2,R2,R3, LSL #+1
   \   000000A2   0x2373             MOVS     R3,#+115
   \   000000A4   0xFB03 0x0301      MLA      R3,R3,R1,R0
   \   000000A8   0x191B             ADDS     R3,R3,R4
   \   000000AA   0xF893 0x3072      LDRB     R3,[R3, #+114]
   \   000000AE   0x1AD2             SUBS     R2,R2,R3
   \   000000B0   0xAB00             ADD      R3,SP,#+0
   \   000000B2   0x18C3             ADDS     R3,R0,R3
   \   000000B4   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   000000B8   0xAE00             ADD      R6,SP,#+0
   \   000000BA   0x5D86             LDRB     R6,[R0, R6]
   \   000000BC   0x0076             LSLS     R6,R6,#+1
   \   000000BE   0xFA56 0xF383      UXTAB    R3,R6,R3
   \   000000C2   0xAE00             ADD      R6,SP,#+0
   \   000000C4   0x1986             ADDS     R6,R0,R6
   \   000000C6   0x7876             LDRB     R6,[R6, #+1]
   \   000000C8   0xFA53 0xF386      UXTAB    R3,R3,R6
   \   000000CC   0x2673             MOVS     R6,#+115
   \   000000CE   0xFB06 0x0601      MLA      R6,R6,R1,R0
   \   000000D2   0x1936             ADDS     R6,R6,R4
   \   000000D4   0xF896 0x6072      LDRB     R6,[R6, #+114]
   \   000000D8   0x1B9B             SUBS     R3,R3,R6
   \   000000DA   0x2673             MOVS     R6,#+115
   \   000000DC   0xFB06 0x0601      MLA      R6,R6,R1,R0
   \   000000E0   0x1936             ADDS     R6,R6,R4
   \   000000E2   0xF896 0x6073      LDRB     R6,[R6, #+115]
   \   000000E6   0xEBB3 0x0346      SUBS     R3,R3,R6, LSL #+1
   \   000000EA   0x2673             MOVS     R6,#+115
   \   000000EC   0xFB06 0x0601      MLA      R6,R6,R1,R0
   \   000000F0   0x1936             ADDS     R6,R6,R4
   \   000000F2   0xF896 0x6074      LDRB     R6,[R6, #+116]
   \   000000F6   0x1B9B             SUBS     R3,R3,R6
   \   000000F8   0x435B             MULS     R3,R3,R3
   \   000000FA   0xFB02 0x3202      MLA      R2,R2,R2,R3
   \   000000FE   0x....             LDR.N    R3,??DataTable4_4
   \   00000100   0x681B             LDR      R3,[R3, #+0]
   \   00000102   0x429A             CMP      R2,R3
   \   00000104   0xDAA9             BGE.N    ??Erosion_9
   \   00000106   0x2273             MOVS     R2,#+115
   \   00000108   0xFB02 0x0201      MLA      R2,R2,R1,R0
   \   0000010C   0x2301             MOVS     R3,#+1
   \   0000010E   0x5553             STRB     R3,[R2, R5]
   \   00000110   0xE7A8             B.N      ??Erosion_10
   \                     ??Erosion_11: (+1)
   \   00000112   0x200A             MOVS     R0,#+10
   \   00000114   0xE78F             B.N      ??Erosion_4
    158              		}
    159          }
   \                     ??Erosion_5: (+1)
   \   00000116   0xB03A             ADD      SP,SP,#+232
   \   00000118   0xBD70             POP      {R4-R6,PC}       ;; return
    160          
    161          
    162              
    163          
    164          /**********************************************************************************
    165          *  函数名称：void show_photo_data() 
    166          *  功能说明：输出图像原始数据
    167          *  参数说明：无
    168          *  函数返回：无
    169          *  修改时间：2014-6-17  wuwenqi
    170          *  备    注：
    171          **********************************************************************************/	

   \                                 In section .text, align 2, keep-with-next
    172          void show_photo_data()
    173          {
   \                     show_photo_data: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    174              u16 i,j;
    175              for(i=0;i<ROW;i++) 
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE014             B.N      ??show_photo_data_0
    176                {                                  
    177                  for(j=0;j<COLUMN;j++)
    178                  {
    179                   // if(Pic_roberts[i][j]>80)
    180                       uart0Printf("%d ",Pic_Buffer[i][j]);
   \                     ??show_photo_data_1: (+1)
   \   00000006   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x2073             MOVS     R0,#+115
   \   0000000C   0x....             LDR.N    R1,??DataTable4_2
   \   0000000E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000012   0x5C29             LDRB     R1,[R5, R0]
   \   00000014   0x....             ADR.N    R0,??DataTable4  ;; "%d "
   \   00000016   0x.... 0x....      BL       uart0Printf
    181                     //uartPrintf("255 ");
    182                   // else uartPrintf("0 ");
    183                       if(j != COLUMN -1)
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x2D72             CMP      R5,#+114
   \   0000001E   0xD102             BNE.N    ??show_photo_data_2
    184                       {
    185                           //uart0Printf(",");
    186                       }else{
    187                         uart0Printf("\n");
   \   00000020   0x....             ADR.N    R0,??DataTable4_1  ;; "\n"
   \   00000022   0x.... 0x....      BL       uart0Printf
    188                       }
    189                  }
   \                     ??show_photo_data_2: (+1)
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??show_photo_data_3: (+1)
   \   00000028   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002A   0x2D73             CMP      R5,#+115
   \   0000002C   0xDBEB             BLT.N    ??show_photo_data_1
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \                     ??show_photo_data_0: (+1)
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x2C78             CMP      R4,#+120
   \   00000034   0xDA01             BGE.N    ??show_photo_data_4
   \   00000036   0x2500             MOVS     R5,#+0
   \   00000038   0xE7F6             B.N      ??show_photo_data_3
    190                }
    191          }
   \                     ??show_photo_data_4: (+1)
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    192          
    193          
    194          
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void show_photo_data_2()
    197          {
   \                     show_photo_data_2: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    198              u16 i,j;
    199              uartSendChar(UART0,0xFF);  //图像头
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       uartSendChar
    200              //uartSendChar (UART0,0xff);
    201              
    202              for(i=0;i<ROW-1;i++) 
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0xE011             B.N      ??show_photo_data_2_0
    203                {                                  
    204                  for(j=0;j<COLUMN;j++)
    205                  {
    206                   
    207                    //if(Pic_Buffer[i][j]==0xff)Pic_Buffer[i][j]=Pic_Buffer[i][j]-1;
    208                    uart0Printf("%d ",Pic_Buffer[i][j]);
   \                     ??show_photo_data_2_1: (+1)
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x2073             MOVS     R0,#+115
   \   00000014   0x....             LDR.N    R1,??DataTable4_2
   \   00000016   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000001A   0x5C29             LDRB     R1,[R5, R0]
   \   0000001C   0x....             ADR.N    R0,??DataTable4  ;; "%d "
   \   0000001E   0x.... 0x....      BL       uart0Printf
    209                  
    210                  }
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??show_photo_data_2_2: (+1)
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2D73             CMP      R5,#+115
   \   00000028   0xDBF1             BLT.N    ??show_photo_data_2_1
    211                  uart0Printf("\n");
   \   0000002A   0x....             ADR.N    R0,??DataTable4_1  ;; "\n"
   \   0000002C   0x.... 0x....      BL       uart0Printf
   \   00000030   0x1C64             ADDS     R4,R4,#+1
   \                     ??show_photo_data_2_0: (+1)
   \   00000032   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000034   0x2C77             CMP      R4,#+119
   \   00000036   0xDA01             BGE.N    ??show_photo_data_2_3
   \   00000038   0x2500             MOVS     R5,#+0
   \   0000003A   0xE7F3             B.N      ??show_photo_data_2_2
    212                   
    213                }
    214              uartSendChar(UART0,0xFF);  //图像尾
   \                     ??show_photo_data_2_3: (+1)
   \   0000003C   0x21FF             MOVS     R1,#+255
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       uartSendChar
    215              
    216             
    217          
    218          }
   \   00000044   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    219          
    220          
    221          /**********************************************************************************
    222          *  函数名称：void show_photo() 
    223          *  功能说明：连续输出图像
    224          *  参数说明：无
    225          *  函数返回：无
    226          *  修改时间：2014-6-17  wuwenqi
    227          *  备    注：
    228          **********************************************************************************/	

   \                                 In section .text, align 2, keep-with-next
    229          void show_photo()
    230          {
   \                     show_photo: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    231            
    232            //uart0Printf("开始采集图像！");
    233            uartSendChar(UART0,0xFF);  //图像头
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       uartSendChar
    234          
    235            for(int i=0; i<ROW; i++)
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0xE00E             B.N      ??show_photo_0
    236            {
    237              for(int j=0;j<COLUMN ;j++)
    238              {
    239                
    240                uartPrintf("%d ",Pic_Erosion[i][j]);
   \                     ??show_photo_1: (+1)
   \   0000000E   0x2073             MOVS     R0,#+115
   \   00000010   0x....             LDR.N    R1,??DataTable4_5
   \   00000012   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000016   0x5C29             LDRB     R1,[R5, R0]
   \   00000018   0x....             ADR.N    R0,??DataTable4  ;; "%d "
   \   0000001A   0x.... 0x....      BL       uartPrintf
    241               }
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??show_photo_2: (+1)
   \   00000020   0x2D73             CMP      R5,#+115
   \   00000022   0xDBF4             BLT.N    ??show_photo_1
    242              uartPrintf("\n");
   \   00000024   0x....             ADR.N    R0,??DataTable4_1  ;; "\n"
   \   00000026   0x.... 0x....      BL       uartPrintf
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \                     ??show_photo_0: (+1)
   \   0000002C   0x2C78             CMP      R4,#+120
   \   0000002E   0xDA01             BGE.N    ??show_photo_3
   \   00000030   0x2500             MOVS     R5,#+0
   \   00000032   0xE7F5             B.N      ??show_photo_2
    243            }
    244            uartSendChar(UART0,0xFF);  //图像头
   \                     ??show_photo_3: (+1)
   \   00000034   0x21FF             MOVS     R1,#+255
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       uartSendChar
    245            /*
    246            for(int i=0; i<ROW; i++)
    247            {
    248              for(int j = 0;j < COLUMN; j++)
    249               {
    250                if(j == left_line[i]){
    251                uartSendChar(UART0,0);
    252                }else if(j == center_line[i]){
    253                  uartSendChar(UART0,0);
    254                }else if(j == right_line[i]){
    255                  uartSendChar(UART0,0);
    256                }else{
    257                   uartSendChar(UART0,244);
    258                }     
    259               }  
    260            }
    261            */
    262          }
   \   0000003C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x25 0x64          DC8      "%d "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     Pic_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ruihua_yuzhi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     Pic_Erosion

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d "
   \              0x20 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"
    263          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     248   Erosion
       248   -> __aeabi_memclr4
      16   cam_init
        16   -> DMA_PORTx2BUFF_Init
        16   -> exti_init
        16   -> exti_irq_DIS
       0   get_photo
       8   init
         8   -> FTM_QUAD_DIR_init
         8   -> LCD_Init
         8   -> SD_init
         8   -> cam_init
         8   -> exti_init
         8   -> flash_init
         8   -> gpio_init
         8   -> lptmr_counter_init
         8   -> motor_init
         8   -> pit_init
         8   -> set_irq_priority
         8   -> steer_init
         8   -> uart_init
      16   show_photo
        16   -> uartPrintf
        16   -> uartSendChar
      16   show_photo_data
        16   -> uart0Printf
      16   show_photo_data_2
        16   -> uart0Printf
        16   -> uartSendChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d ">
       2  ?<Constant "\n">
     116  ?<Constant {0}>
     116  ?<Constant {0}>_1
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
     282  Erosion
      64  cam_init
       2  get_photo
     184  init
      62  show_photo
      60  show_photo_data
      70  show_photo_data_2

 
 238 bytes in section .rodata
 748 bytes in section .text
 
 748 bytes of CODE  memory
 238 bytes of CONST memory

Errors: none
Warnings: none
