///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM     15/Aug/2015  12:46:32 /
// Copyright 1999-2013 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\ /
//                    olcd\olcd.c                                             /
//    Command line =  C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\ /
//                    olcd\olcd.c -lCN C:\Users\Administrator\Desktop\MPU6050 /
//                    8.12\build\gpio_demo\FLASH\List\ -lB                    /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\FLASH\List\ -o C:\Users\Administrator\Desktop\MPU60 /
//                    508.12\build\gpio_demo\FLASH\Obj\ --no_cse --no_unroll  /
//                    --no_inline --no_code_motion --no_tbaa --no_clustering  /
//                    --no_scheduling --debug --endian=little                 /
//                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR     /
//                    Systems\Embedded Workbench                              /
//                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                  /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\ -I C:\Users\Administrator\Desktop\MPU60508.12\b /
//                    uild\gpio_demo\..\..\src\common\ -I                     /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\cpu\ -I C:\Users\Administrator\Desktop\MP /
//                    U60508.12\build\gpio_demo\..\..\src\drivers\ -I         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\gpio\ -I                          /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\flash\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\olcd\ -I                          /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\diskio\ -I                        /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\iospi\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\wdog\ -I                          /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\mcg\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\flash\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\uart\ -I                          /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\lptmr\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\LED\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\fun\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\FTM\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\pit\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\DIPswitch\ -I                     /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\steer\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\motor\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\laser\ -I                         /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\i2c\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\ADdevice\ -I                      /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\adc\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\serial_digtal_scope\ -I           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\MMA845x\ -I                       /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\exti\ -I                          /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\dma\ -I                           /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\platforms\ -I                             /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\projects\ -I                              /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\projects\gpio_demo\ -I                    /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\MPU6050\ -I                       /
//                    C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\..\..\src\drivers\steer\ -Ol                        /
//    List file    =  C:\Users\Administrator\Desktop\MPU60508.12\build\gpio_d /
//                    emo\FLASH\List\olcd.s                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN IOSPI_LCD_WrCmd
        EXTERN IOSPI_LCD_WrDat
        EXTERN gpio_init

        PUBLIC BUPT72x48
        PUBLIC Draw_BMP
        PUBLIC Draw_BUPTLogo
        PUBLIC Draw_MyCar
        PUBLIC F16x16
        PUBLIC F16x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LCDHead
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_DLY_us
        PUBLIC LCD_Fill
        PUBLIC LCD_Init
        PUBLIC LCD_P16x16Str
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P6x8Str_xiaoshudian
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_Print
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Rectangle
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_ShowInt
        PUBLIC MyCar128x64


        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant {0, 1, 2, 3, 4}>`:
        DATA
        DC8 0, 1, 2, 3, 4, 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
`?<Constant "BUPT Smartcar">`:
        DATA
        DC8 "BUPT Smartcar"
        DC8 0, 0
// C:\Users\Administrator\Desktop\MPU60508.12\src\drivers\olcd\olcd.c
//    1 /********************************************
//    2 使用说明：
//    3 OLED电源使用3.3V。   
//    4 ----------------
//    5 G    电源地
//    6 3.3V 接3.3V电源
//    7 D0   PORTA_PA14  
//    8 D1   PORTA_PA15
//    9 RST  PORTA_PA16 
//   10 DC   PORTA_PA17
//   11 CS   已接地，不用接
//   12 ============================================
//   13 OLED电源使用5V。   
//   14 ----------------
//   15 G    电源地
//   16 3.3V 接5V电源，电源跟模块之间串接100欧姆电阻，并加3.3V钳位二极管
//   17 D0   PORTA_PA14 单片机跟模块之间串接1k-3.3k电阻 
//   18 D1   PORTA_PA15 单片机跟模块之间串接1k-3.3k电阻 
//   19 RST  PORTA_PA16 单片机跟模块之间串接1k-3.3k电阻 
//   20 DC   PORTA_PA17 单片机跟模块之间串接1k-3.3k电阻 
//   21 CS   已接地，不用接  
//   22 
//   23 
//   24 4线SPI使用说明：
//   25 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   26 VCC 供内部逻辑电压 1.8~6V   
//   27 GND 地
//   28 
//   29 BS0 低电平
//   30 BS1 低电平
//   31 BS2 低电平
//   32 
//   33 CS  片选管脚
//   34 DC  命令数据选择管脚
//   35 RES 模块复位管脚 
//   36 D0（SCLK） ，时钟脚，由MCU控制
//   37 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   38 
//   39 D2 悬空      
//   40 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   41 RD  低电平 ，也可悬空，但最好设为低电平
//   42 RW  低电平 ，也可悬空，但最好设为低电平
//   43 RD  低电平 ，也可悬空，但最好设为低电平   
//   44 ============================================     
//   45 如果用户使用的是5V单片机，请看用户手册，切勿烧毁模块！  
//   46 ============================================*/
//   47 
//   48 
//   49 
//   50 
//   51 
//   52 #include "olcd.h"
//   53 
//   54 #define XLevelL		0x00
//   55 #define XLevelH		0x10
//   56 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   57 #define Max_Column	128
//   58 #define Max_Row		  64
//   59 #define	Brightness	0xCF 
//   60 
//   61 #define X_WIDTH 128
//   62 #define Y_WIDTH 64
//   63 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   64 const byte F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   65 {
//   66     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   67     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   68     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   69     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   70     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   71     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   72     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   73     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   74     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   75     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   76     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   77     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   78     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   79     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   80     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   81     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   82     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   83     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   84     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   85     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   86     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   87     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   88     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   89     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   90     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   91     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   92     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   93     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   94     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   95     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   96     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   97     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   98     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   99     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  100     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  101     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  102     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  103     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  104     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  105     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  106     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  107     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  108     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  109     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  110     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  111     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  112     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  113     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  114     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  115     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  116     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  117     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  118     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  119     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  120     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  121     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  122     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  123     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  124     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  125     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  126     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  127     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  128     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  129     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  130     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  131     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  132     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  133     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  134     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  135     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  136     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  137     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  138     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  139     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  140     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  141     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  142     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  143     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  144     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  145     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  146     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  147     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  148     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  149     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  150     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  151     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  152     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  153     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  154     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  155     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  156     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  157     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  158 };
//  159 //======================================================
//  160 // 128X64I液晶底层驱动[14X16]字体库
//  161 // 设计者: yangxj
//  162 // 描  述: 字符库：北京邮电大学智能车团队
//  163 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  164 const byte F16x16_Idx[] = 
F16x16_Idx:
        DATA
        DC8 0B1H, 0B1H, 0BEH, 0A9H, 0D3H, 0CAH, 0B5H, 0E7H
        DC8 0B4H, 0F3H, 0D1H, 0A7H, 0D6H, 0C7H, 0C4H, 0DCH
        DC8 0B3H, 0B5H, 0C9H, 0E8H, 0D6H, 0C3H, 0B7H, 0A2H
        DC8 0CFH, 0D4H, 0CAH, 0BEH, 0CDH, 0EAH, 0B3H, 0C9H
        DC8 0D6H, 0B5H, 0B2H, 0E2H, 0BEH, 0E0H, 0CBH, 0D9H
        DC8 0C8H, 0A1H, 0CFH, 0FBH, 0D7H, 0B4H, 0CCH, 0ACH
        DC8 0B2H, 0CEH, 0CAH, 0FDH, 0B6H, 0E6H, 0BBH, 0FAH
        DC8 0B5H, 0F7H, 0
        DC8 0
//  165 {
//  166 	"北京邮电大学智能车设置发显示完成值测距速取消状态参数舵机调"
//  167 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  168 const byte F16x16[] = {  
F16x16:
        DATA
        DC8 0, 32, 32, 32, 32, 255, 0, 0, 255, 32, 16, 8, 12, 0, 0, 0, 32, 96
        DC8 32, 16, 16, 127, 0, 0, 63, 64, 64, 64, 64, 64, 112, 0, 8, 8, 8, 232
        DC8 40, 40, 41, 46, 40, 40, 40, 248, 40, 12, 8, 0, 0, 0, 64, 35, 26, 66
        DC8 130, 126, 2, 10, 18, 51, 96, 0, 0, 0, 0, 248, 8, 8, 255, 8, 8, 252
        DC8 8, 252, 4, 68, 180, 12, 0, 0, 0, 127, 33, 33, 63, 33, 33, 127, 0
        DC8 255, 8, 16, 32, 17, 14, 0, 0, 248, 72, 72, 72, 72, 255, 72, 72, 72
        DC8 72, 252, 8, 0, 0, 0, 0, 7, 2, 2, 2, 2, 63, 66, 66, 66, 66, 71, 64
        DC8 112, 0, 0, 32, 32, 32, 32, 32, 32, 160, 127, 160, 32, 32, 32, 32
        DC8 48, 32, 0, 0, 64, 64, 32, 16, 12, 3, 0, 1, 6, 8, 16, 32, 96, 32, 0
        DC8 64, 48, 17, 150, 144, 144, 145, 150, 144, 144, 152, 20, 19, 80, 48
        DC8 0, 4, 4, 4, 4, 4, 68, 132, 126, 6, 5, 4, 4, 4, 6, 4, 0, 32, 40, 39
        DC8 228, 60, 164, 38, 36, 32, 252, 132, 132, 132, 254, 4, 0, 4, 2, 1
        DC8 252, 84, 84, 87, 84, 84, 85, 84, 254, 4, 1, 0, 0, 16, 216, 84, 83
        DC8 80, 220, 48, 0, 127, 144, 136, 132, 134, 224, 0, 0, 0, 255, 9, 73
        DC8 137, 127, 0, 0, 126, 144, 136, 132, 134, 128, 224, 0, 0, 4, 196
        DC8 164, 148, 140, 135, 244, 132, 132, 196, 132, 6, 4, 0, 0, 4, 4, 4, 4
        DC8 4, 4, 4, 255, 4, 4, 4, 4, 4, 6, 4, 0, 64, 64, 66, 204, 0, 64, 160
        DC8 159, 129, 129, 129, 159, 160, 32, 32, 0, 0, 0, 0, 127, 160, 144, 64
        DC8 67, 44, 16, 40, 38, 65, 192, 64, 0, 0, 16, 23, 213, 85, 87, 85, 125
        DC8 85, 87, 85, 213, 23, 16, 0, 0, 64, 64, 64, 127, 85, 85, 85, 85, 85
        DC8 85, 85, 127, 64, 96, 64, 0, 0, 16, 24, 22, 16, 144, 240, 159, 144
        DC8 144, 146, 148, 16, 24, 16, 0, 64, 32, 144, 136, 70, 65, 35, 20, 8
        DC8 20, 34, 33, 64, 192, 64, 0, 0, 0, 0, 254, 146, 146, 146, 146, 146
        DC8 146, 146, 255, 2, 0, 0, 0, 64, 66, 68, 77, 64, 127, 64, 64, 64, 127
        DC8 64, 73, 68, 102, 64, 0, 64, 64, 66, 66, 66, 66, 66, 194, 66, 66, 66
        DC8 67, 66, 96, 64, 0, 0, 16, 8, 4, 6, 64, 128, 127, 0, 0, 2, 4, 12, 24
        DC8 0, 0, 16, 12, 4, 36, 36, 36, 37, 38, 36, 36, 52, 36, 132, 20, 12, 0
        DC8 0, 129, 129, 65, 49, 15, 1, 1, 63, 65, 65, 65, 65, 65, 112, 0, 0, 0
        DC8 248, 136, 136, 136, 136, 8, 127, 136, 10, 12, 8, 200, 0, 0, 64, 32
        DC8 31, 0, 8, 16, 15, 64, 32, 19, 28, 36, 67, 128, 240, 0, 128, 64, 32
        DC8 248, 7, 4, 228, 164, 164, 191, 164, 164, 246, 36, 0, 0, 0, 0, 0
        DC8 255, 64, 64, 127, 74, 74, 74, 74, 74, 127, 64, 64, 0, 16, 34, 108
        DC8 0, 128, 252, 4, 244, 4, 254, 4, 248, 0, 254, 0, 0, 4, 4, 254, 1, 64
        DC8 39, 16, 15, 16, 103, 0, 71, 128, 127, 0, 0, 0, 62, 34, 226, 34, 62
        DC8 0, 254, 34, 34, 34, 34, 243, 34, 0, 0, 32, 127, 32, 63, 18, 18, 0
        DC8 127, 66, 66, 66, 66, 71, 96, 64, 0, 64, 66, 68, 204, 0, 244, 148
        DC8 148, 148, 255, 148, 148, 148, 246, 4, 0, 0, 64, 32, 31, 32, 81, 72
        DC8 68, 66, 127, 66, 68, 76, 97, 32, 0, 2, 2, 254, 146, 146, 146, 254
        DC8 11, 234, 8, 8, 8, 200, 56, 0, 0, 16, 48, 31, 8, 8, 8, 255, 64, 32
        DC8 27, 4, 10, 49, 96, 32, 0, 16, 34, 100, 12, 128, 0, 242, 148, 144
        DC8 159, 144, 148, 250, 16, 0, 0, 4, 4, 254, 1, 0, 0, 255, 4, 4, 4, 68
        DC8 132, 127, 0, 0, 0, 0, 8, 48, 0, 255, 32, 32, 32, 32, 255, 32, 34
        DC8 36, 48, 32, 0, 8, 12, 2, 1, 255, 64, 32, 28, 3, 0, 3, 12, 48, 96
        DC8 32, 0, 4, 4, 132, 132, 68, 36, 84, 143, 20, 36, 68, 68, 132, 134
        DC8 132, 0, 1, 33, 28, 0, 60, 64, 66, 76, 64, 64, 112, 4, 8, 49, 0, 0
        DC8 32, 32, 32, 40, 168, 108, 59, 40, 168, 106, 172, 40, 32, 48, 32, 0
        DC8 4, 132, 130, 129, 74, 74, 73, 37, 36, 18, 16, 9, 2, 6, 2, 0, 16
        DC8 146, 84, 48, 255, 80, 148, 50, 216, 23, 16, 16, 240, 24, 16, 0, 2
        DC8 130, 78, 51, 34, 82, 142, 64, 35, 20, 8, 22, 97, 192, 64, 0, 128
        DC8 128, 252, 150, 165, 252, 32, 24, 200, 9, 10, 8, 136, 40, 24, 0, 64
        DC8 32, 31, 66, 132, 127, 0, 0, 63, 68, 66, 65, 64, 112, 0, 0, 16, 16
        DC8 208, 255, 144, 16, 0, 252, 4, 4, 4, 254, 4, 0, 0, 0, 4, 3, 0, 255
        DC8 128, 65, 32, 31, 0, 0, 0, 63, 64, 64, 112, 0, 32, 33, 230, 0, 0
        DC8 254, 130, 146, 146, 254, 146, 210, 130, 255, 2, 0, 0, 0, 63, 144
        DC8 72, 63, 0, 62, 18, 18, 18, 94, 128, 127, 0, 0
//  169 	  0x00,0x20,0x20,0x20,0x20,0xFF,0x00,0x00,
//  170       0xFF,0x20,0x10,0x08,0x0C,0x00,0x00,0x00,
//  171       0x20,0x60,0x20,0x10,0x10,0x7F,0x00,0x00,
//  172       0x3F,0x40,0x40,0x40,0x40,0x40,0x70,0x00,//"北", 
//  173 
//  174  	  0x08,0x08,0x08,0xE8,0x28,0x28,0x29,0x2E,
//  175       0x28,0x28,0x28,0xF8,0x28,0x0C,0x08,0x00,
//  176       0x00,0x00,0x40,0x23,0x1A,0x42,0x82,0x7E,
//  177       0x02,0x0A,0x12,0x33,0x60,0x00,0x00,0x00,//"京",
//  178 
//  179  	  0x00,0xF8,0x08,0x08,0xFF,0x08,0x08,0xFC,
//  180       0x08,0xFC,0x04,0x44,0xB4,0x0C,0x00,0x00,
//  181       0x00,0x7F,0x21,0x21,0x3F,0x21,0x21,0x7F,
//  182       0x00,0xFF,0x08,0x10,0x20,0x11,0x0E,0x00,//"邮",
//  183 
//  184  	  0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,
//  185       0x48,0x48,0x48,0xFC,0x08,0x00,0x00,0x00,
//  186       0x00,0x07,0x02,0x02,0x02,0x02,0x3F,0x42,
//  187       0x42,0x42,0x42,0x47,0x40,0x70,0x00,0x00,//"电",
//  188 
//  189  	  0x20,0x20,0x20,0x20,0x20,0x20,0xA0,0x7F,
//  190       0xA0,0x20,0x20,0x20,0x20,0x30,0x20,0x00,
//  191       0x00,0x40,0x40,0x20,0x10,0x0C,0x03,0x00,
//  192       0x01,0x06,0x08,0x10,0x20,0x60,0x20,0x00,//"大",
//  193 
//  194  	  0x40,0x30,0x11,0x96,0x90,0x90,0x91,0x96,
//  195       0x90,0x90,0x98,0x14,0x13,0x50,0x30,0x00,
//  196       0x04,0x04,0x04,0x04,0x04,0x44,0x84,0x7E,
//  197       0x06,0x05,0x04,0x04,0x04,0x06,0x04,0x00,//"学",
//  198 
//  199  	  0x20,0x28,0x27,0xE4,0x3C,0xA4,0x26,0x24,
//  200       0x20,0xFC,0x84,0x84,0x84,0xFE,0x04,0x00,
//  201       0x04,0x02,0x01,0xFC,0x54,0x54,0x57,0x54,
//  202       0x54,0x55,0x54,0xFE,0x04,0x01,0x00,0x00,//"智",
//  203 
//  204  	  0x10,0xD8,0x54,0x53,0x50,0xDC,0x30,0x00,
//  205       0x7F,0x90,0x88,0x84,0x86,0xE0,0x00,0x00,
//  206       0x00,0xFF,0x09,0x49,0x89,0x7F,0x00,0x00,
//  207       0x7E,0x90,0x88,0x84,0x86,0x80,0xE0,0x00,//"能",
//  208 
//  209  	  0x00,0x04,0xC4,0xA4,0x94,0x8C,0x87,0xF4,
//  210       0x84,0x84,0xC4,0x84,0x06,0x04,0x00,0x00,
//  211       0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFF,
//  212       0x04,0x04,0x04,0x04,0x04,0x06,0x04,0x00,//"车",
//  213 
//  214  	  0x40,0x40,0x42,0xCC,0x00,0x40,0xA0,0x9F,
//  215       0x81,0x81,0x81,0x9F,0xA0,0x20,0x20,0x00,
//  216       0x00,0x00,0x00,0x7F,0xA0,0x90,0x40,0x43,
//  217       0x2C,0x10,0x28,0x26,0x41,0xC0,0x40,0x00,//"设",
//  218 
//  219  	  0x00,0x10,0x17,0xD5,0x55,0x57,0x55,0x7D,
//  220       0x55,0x57,0x55,0xD5,0x17,0x10,0x00,0x00,
//  221       0x40,0x40,0x40,0x7F,0x55,0x55,0x55,0x55,
//  222       0x55,0x55,0x55,0x7F,0x40,0x60,0x40,0x00,//"置",
//  223 
//  224  	  0x00,0x10,0x18,0x16,0x10,0x90,0xF0,0x9F,
//  225       0x90,0x90,0x92,0x94,0x10,0x18,0x10,0x00,
//  226       0x40,0x20,0x90,0x88,0x46,0x41,0x23,0x14,
//  227       0x08,0x14,0x22,0x21,0x40,0xC0,0x40,0x00,//"发",
//  228 
//  229  	  0x00,0x00,0x00,0xFE,0x92,0x92,0x92,0x92,
//  230       0x92,0x92,0x92,0xFF,0x02,0x00,0x00,0x00,
//  231       0x40,0x42,0x44,0x4D,0x40,0x7F,0x40,0x40,
//  232       0x40,0x7F,0x40,0x49,0x44,0x66,0x40,0x00,//"显",
//  233 
//  234  	  0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xC2,
//  235       0x42,0x42,0x42,0x43,0x42,0x60,0x40,0x00,
//  236       0x00,0x10,0x08,0x04,0x06,0x40,0x80,0x7F,
//  237       0x00,0x00,0x02,0x04,0x0C,0x18,0x00,0x00,//"示",
//  238 	  
//  239 	  0x10,0x0C,0x04,0x24,0x24,0x24,0x25,0x26,
//  240       0x24,0x24,0x34,0x24,0x84,0x14,0x0C,0x00,
//  241       0x00,0x81,0x81,0x41,0x31,0x0F,0x01,0x01,
//  242       0x3F,0x41,0x41,0x41,0x41,0x41,0x70,0x00,//"完", 
//  243 
//  244 	  0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0x08,
//  245       0x7F,0x88,0x0A,0x0C,0x08,0xC8,0x00,0x00,
//  246       0x40,0x20,0x1F,0x00,0x08,0x10,0x0F,0x40,
//  247       0x20,0x13,0x1C,0x24,0x43,0x80,0xF0,0x00,//"成", 
//  248 		
//  249 	  0x80,0x40,0x20,0xF8,0x07,0x04,0xE4,0xA4,
//  250       0xA4,0xBF,0xA4,0xA4,0xF6,0x24,0x00,0x00,
//  251       0x00,0x00,0x00,0xFF,0x40,0x40,0x7F,0x4A,
//  252       0x4A,0x4A,0x4A,0x4A,0x7F,0x40,0x40,0x00,//"值",
//  253 	  
//  254 	  0x10,0x22,0x6C,0x00,0x80,0xFC,0x04,0xF4,
//  255       0x04,0xFE,0x04,0xF8,0x00,0xFE,0x00,0x00,
//  256       0x04,0x04,0xFE,0x01,0x40,0x27,0x10,0x0F,
//  257       0x10,0x67,0x00,0x47,0x80,0x7F,0x00,0x00,//"测", 
//  258 
//  259  	  0x00,0x3E,0x22,0xE2,0x22,0x3E,0x00,0xFE,
//  260       0x22,0x22,0x22,0x22,0xF3,0x22,0x00,0x00,
//  261       0x20,0x7F,0x20,0x3F,0x12,0x12,0x00,0x7F,
//  262       0x42,0x42,0x42,0x42,0x47,0x60,0x40,0x00,//"距",
//  263 
//  264 	  0x40,0x42,0x44,0xCC,0x00,0xF4,0x94,0x94,
//  265       0x94,0xFF,0x94,0x94,0x94,0xF6,0x04,0x00,
//  266       0x00,0x40,0x20,0x1F,0x20,0x51,0x48,0x44,
//  267       0x42,0x7F,0x42,0x44,0x4C,0x61,0x20,0x00,//"速",
//  268 	  
//  269 	  0x02,0x02,0xFE,0x92,0x92,0x92,0xFE,0x0B,
//  270       0xEA,0x08,0x08,0x08,0xC8,0x38,0x00,0x00,
//  271       0x10,0x30,0x1F,0x08,0x08,0x08,0xFF,0x40,
//  272       0x20,0x1B,0x04,0x0A,0x31,0x60,0x20,0x00,//"取", 
//  273 
//  274 	  0x10,0x22,0x64,0x0C,0x80,0x00,0xF2,0x94,
//  275       0x90,0x9F,0x90,0x94,0xFA,0x10,0x00,0x00,
//  276       0x04,0x04,0xFE,0x01,0x00,0x00,0xFF,0x04,
//  277       0x04,0x04,0x44,0x84,0x7F,0x00,0x00,0x00,//"消", 
//  278 	  
//  279 	  
//  280 	  0x00,0x08,0x30,0x00,0xFF,0x20,0x20,0x20,
//  281       0x20,0xFF,0x20,0x22,0x24,0x30,0x20,0x00,
//  282       0x08,0x0C,0x02,0x01,0xFF,0x40,0x20,0x1C,
//  283       0x03,0x00,0x03,0x0C,0x30,0x60,0x20,0x00,//"状",
//  284 
//  285 	  0x04,0x04,0x84,0x84,0x44,0x24,0x54,0x8F,
//  286       0x14,0x24,0x44,0x44,0x84,0x86,0x84,0x00,
//  287       0x01,0x21,0x1C,0x00,0x3C,0x40,0x42,0x4C,
//  288       0x40,0x40,0x70,0x04,0x08,0x31,0x00,0x00,//"态", 
//  289 	  
//  290 	  
//  291 	  0x20,0x20,0x20,0x28,0xA8,0x6C,0x3B,0x28,
//  292       0xA8,0x6A,0xAC,0x28,0x20,0x30,0x20,0x00,
//  293       0x04,0x84,0x82,0x81,0x4A,0x4A,0x49,0x25,
//  294       0x24,0x12,0x10,0x09,0x02,0x06,0x02,0x00,//"参", 
//  295 
//  296 	  0x10,0x92,0x54,0x30,0xFF,0x50,0x94,0x32,
//  297       0xD8,0x17,0x10,0x10,0xF0,0x18,0x10,0x00,
//  298       0x02,0x82,0x4E,0x33,0x22,0x52,0x8E,0x40,
//  299       0x23,0x14,0x08,0x16,0x61,0xC0,0x40,0x00,//"数",
//  300 	  
//  301 	  0x80,0x80,0xFC,0x96,0xA5,0xFC,0x20,0x18,
//  302       0xC8,0x09,0x0A,0x08,0x88,0x28,0x18,0x00,
//  303       0x40,0x20,0x1F,0x42,0x84,0x7F,0x00,0x00,
//  304       0x3F,0x44,0x42,0x41,0x40,0x70,0x00,0x00,//"舵", 
//  305 
//  306  	  0x10,0x10,0xD0,0xFF,0x90,0x10,0x00,0xFC,
//  307       0x04,0x04,0x04,0xFE,0x04,0x00,0x00,0x00,
//  308       0x04,0x03,0x00,0xFF,0x80,0x41,0x20,0x1F,
//  309       0x00,0x00,0x00,0x3F,0x40,0x40,0x70,0x00,//"机",
//  310 
//  311 	  0x20,0x21,0xE6,0x00,0x00,0xFE,0x82,0x92,
//  312       0x92,0xFE,0x92,0xD2,0x82,0xFF,0x02,0x00,
//  313       0x00,0x00,0x3F,0x90,0x48,0x3F,0x00,0x3E,
//  314       0x12,0x12,0x12,0x5E,0x80,0x7F,0x00,0x00,//"调", 
//  315 };
//  316 
//  317 //======================================================
//  318 // 128X64I液晶底层驱动[8X16]字体库
//  319 // 设计者: powerint
//  320 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  321 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  322 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  323 const byte F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  324 {
//  325   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  326   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  327   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  328   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  329   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  330   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  331   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  332   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  333   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  334   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  335   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  336   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  337   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  338   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  339   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  340   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  341   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  342   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  343   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  344   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  345   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  346   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  347   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  348   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  349   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  350   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  351   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  352   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  353   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  354   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  355   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  356   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  357   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  358   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  359   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  360   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  361   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  362   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  363   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  364   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  365   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  366   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  367   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  368   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  369   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  370   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  371   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  372   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  373   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  374   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  375   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  376   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  377   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  378   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  379   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  380   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  381   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  382   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  383   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  384   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  385   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  386   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  387   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  388   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  389   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  390   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  391   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  392   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  393   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  394   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  395   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  396   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  397   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  398   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  399   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  400   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  401   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  402   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  403   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  404   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  405   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  406   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  407   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  408   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  409   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  410   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  411   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  412   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  413   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  414   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  415   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  416   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  417   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  418   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  419   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  420 
//  421 };
//  422 //数据水平，字节垂直
//  423 //======================================================
//  424 // 北京邮电大学LOGO
//  425 // 设计者: yangxj
//  426 // 描  述: 北京邮电大学logo
//  427 //======================================================

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  428 byte BUPT72x48[432] = 
BUPT72x48:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192, 224, 224, 112, 112, 56
        DC8 184, 152, 220, 220, 204, 238, 238, 238, 230, 246, 247, 247, 247
        DC8 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 247, 247, 247
        DC8 247, 246, 230, 238, 238, 206, 220, 220, 156, 184, 56, 112, 112, 224
        DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 240, 248, 60, 30, 15, 7, 3, 1, 1, 0, 0, 0, 1, 1, 1, 3, 3, 3, 7
        DC8 7, 15, 15, 31, 63, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 191, 127, 127, 247, 247
        DC8 239, 207, 159, 63, 126, 252, 252, 249, 243, 231, 135, 31, 62, 124
        DC8 248, 240, 192, 128, 0, 0, 0, 248, 255, 255, 255, 131, 128, 128, 192
        DC8 192, 192, 224, 224, 224, 224, 224, 224, 192, 192, 192, 192, 192
        DC8 192, 192, 192, 192, 192, 192, 224, 224, 240, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 243, 231
        DC8 159, 30, 28, 9, 7, 15, 7, 7, 6, 1, 3, 15, 207, 239, 239, 239, 228
        DC8 64, 1, 15, 255, 255, 254, 240, 0, 15, 127, 255, 255, 225, 129, 1, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 48, 120, 208, 192, 64, 0, 0, 0, 0, 1, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 192, 240, 252, 255, 255, 127, 63, 15, 0, 192, 248
        DC8 255, 255, 63, 7, 0, 0, 0, 0, 3, 7, 15, 30, 60, 120, 240, 224, 224
        DC8 192, 128, 128, 0, 96, 112, 240, 248, 240, 240, 224, 224, 224, 192
        DC8 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
        DC8 128, 128, 195, 195, 203, 248, 248, 240, 224, 240, 240, 248, 248
        DC8 124, 126, 63, 31, 159, 207, 199, 227, 241, 120, 124, 62, 31, 15, 7
        DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 7, 7, 15
        DC8 14, 14, 28, 28, 29, 57, 57, 59, 51, 51, 115, 115, 119, 119, 119
        DC8 119, 119, 119, 103, 119, 119, 119, 119, 115, 115, 115, 51, 51, 59
        DC8 57, 57, 25, 28, 28, 28, 14, 14, 7, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0
//  429 {
//  430 
//  431 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xE0,0xE0,0x70,0x70,
//  432 0x38,0xB8,0x98,0xDC,0xDC,0xCC,0xEE,0xEE,0xEE,0xE6,0xF6,0xF7,0xF7,0xF7,0xF3,0xF3,
//  433 0xF3,0xF3,0xF3,0xF3,0xF3,0xF3,0xF3,0xF3,0xF7,0xF7,0xF7,0xF7,0xF6,0xE6,0xEE,0xEE,
//  434 0xCE,0xDC,0xDC,0x9C,0xB8,0x38,0x70,0x70,0xE0,0xE0,0xC0,0xC0,0x80,0x80,0x00,0x00,
//  435 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  436 0x00,0x00,0xC0,0xE0,0xF0,0xF8,0x3C,0x1E,0x0F,0x07,0x03,0x01,0x01,0x00,0x00,0x00,
//  437 0x01,0x01,0x01,0x03,0x03,0x03,0x07,0x07,0x0F,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,
//  438 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x7F,
//  439 0x7F,0xF7,0xF7,0xEF,0xCF,0x9F,0x3F,0x7E,0xFC,0xFC,0xF9,0xF3,0xE7,0x87,0x1F,0x3E,
//  440 0x7C,0xF8,0xF0,0xC0,0x80,0x00,0x00,0x00,
//  441 0xF8,0xFF,0xFF,0xFF,0x83,0x80,0x80,0xC0,0xC0,0xC0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,
//  442 0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,0xE0,0xF0,0xFF,0xFF,
//  443 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF9,0xF3,0xE7,0x9F,
//  444 0x1E,0x1C,0x09,0x07,0x0F,0x07,0x07,0x06,0x01,0x03,0x0F,0xCF,0xEF,0xEF,0xEF,0xE4,
//  445 0x40,0x01,0x0F,0xFF,0xFF,0xFE,0xF0,0x00,
//  446 0x0F,0x7F,0xFF,0xFF,0xE1,0x81,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  447 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  448 0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x78,0xD0,0xC0,0x40,0x00,0x00,0x00,0x00,0x01,
//  449 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xF0,0xFC,0xFF,0xFF,0x7F,0x3F,0x0F,
//  450 0x00,0xC0,0xF8,0xFF,0xFF,0x3F,0x07,0x00,
//  451 0x00,0x00,0x00,0x03,0x07,0x0F,0x1E,0x3C,0x78,0xF0,0xE0,0xE0,0xC0,0x80,0x80,0x00,
//  452 0x60,0x70,0xF0,0xF8,0xF0,0xF0,0xE0,0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x80,
//  453 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xC3,0xC3,0xCB,0xF8,0xF8,0xF0,0xE0,
//  454 0xF0,0xF0,0xF8,0xF8,0x7C,0x7E,0x3F,0x1F,0x9F,0xCF,0xC7,0xE3,0xF1,0x78,0x7C,0x3E,
//  455 0x1F,0x0F,0x07,0x01,0x00,0x00,0x00,0x00,
//  456 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x03,0x07,0x07,
//  457 0x0F,0x0E,0x0E,0x1C,0x1C,0x1D,0x39,0x39,0x3B,0x33,0x33,0x73,0x73,0x77,0x77,0x77,
//  458 0x77,0x77,0x77,0x67,0x77,0x77,0x77,0x77,0x73,0x73,0x73,0x33,0x33,0x3B,0x39,0x39,
//  459 0x19,0x1C,0x1C,0x1C,0x0E,0x0E,0x07,0x07,0x03,0x03,0x01,0x01,0x00,0x00,0x00,0x00,
//  460 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//  461  
//  462 }; 
//  463 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  464 void LCD_Set_Pos(byte x, byte y)
//  465 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  466   LCD_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
//  467   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
//  468   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
//  469 } 
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  470 void LCD_Fill(byte bmp_data)
//  471 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  472 	byte y,x;
//  473 	
//  474 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  475 	{
//  476 		LCD_WrCmd(0xb0+y);
//  477 		LCD_WrCmd(0x01);
//  478 		LCD_WrCmd(0x10);
//  479 		for(x=0;x<X_WIDTH;x++)
//  480 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
        MOVS     R0,#+1
        BL       IOSPI_LCD_WrCmd
        MOVS     R0,#+16
        BL       IOSPI_LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  481 	}
//  482 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  483 void LCD_CLS(void)
//  484 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  485 	byte y,x;	
//  486 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  487 	{
//  488 		LCD_WrCmd(0xb0+y);
//  489 		LCD_WrCmd(0x01);
//  490 		LCD_WrCmd(0x10); 
//  491 		for(x=0;x<X_WIDTH;x++)
//  492 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       IOSPI_LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
        MOVS     R0,#+1
        BL       IOSPI_LCD_WrCmd
        MOVS     R0,#+16
        BL       IOSPI_LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  493 	}
//  494 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  495 void LCD_DLY_ms(word ms)
//  496 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  497   word a;
//  498   while(ms)
//  499   {
//  500     a=96000/4;
??LCD_DLY_ms_1:
        MOVW     R1,#+24000
//  501     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  502     ms--;
        SUBS     R0,R0,#+1
//  503   }
??LCD_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  504   return;
        BX       LR               ;; return
//  505 }
//  506 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  507 void LCD_DLY_us(word us)
//  508 {                         
LCD_DLY_us:
        B.N      ??LCD_DLY_us_0
//  509   word a;
//  510   while(us)
//  511   {
//  512     a=180/4;
??LCD_DLY_us_1:
        MOVS     R1,#+45
//  513     while(a--);
??LCD_DLY_us_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_us_2
//  514     us--;
        SUBS     R0,R0,#+1
//  515   }
??LCD_DLY_us_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_us_1
//  516   return;
        BX       LR               ;; return
//  517 }
//  518 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  519 void LCD_Init(void)        
//  520 { 
LCD_Init:
        PUSH     {LR}
        SUB      SP,SP,#+12
//  521   //初始化IO口，输出
//  522   
//  523 #ifdef __IOSPI__
//  524   PORTx ports[5] = {PORTA,PORTB,PORTC,PORTD,PORTE};
        ADD      R0,SP,#+0
        LDR.W    R1,??DataTable7
        LDM      R1!,{R2,R3}
        STM      R0!,{R2,R3}
        SUBS     R1,R1,#+8
        SUBS     R0,R0,#+8
//  525   gpio_init(ports[PORT_D0/32], PORT_D0%32,GPO,1);     //初始化gpio
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+12
        LDRB     R0,[SP, #+2]
        BL       gpio_init
//  526   gpio_init(ports[PORT_D1/32], PORT_D1%32,GPO,0);     //初始化gpio
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+14
        LDRB     R0,[SP, #+2]
        BL       gpio_init
//  527   gpio_init(ports[PORT_RES/32],PORT_RES%32,GPO,0);    //初始化gpio
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+16
        LDRB     R0,[SP, #+2]
        BL       gpio_init
//  528   gpio_init(ports[PORT_DC/32], PORT_DC%32,GPO,0);     //初始化gpio
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+18
        LDRB     R0,[SP, #+2]
        BL       gpio_init
//  529   
//  530   SPI_RES = 0;
        LDR.W    R0,??DataTable7_1  ;; 0x400ff080
        LDR      R0,[R0, #+0]
        BICS     R0,R0,#0x10000
        LDR.W    R1,??DataTable7_1  ;; 0x400ff080
        STR      R0,[R1, #+0]
//  531   LCD_DLY_ms(50);
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  532   SPI_RES = 1;
        LDR.W    R0,??DataTable7_1  ;; 0x400ff080
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x10000
        LDR.W    R1,??DataTable7_1  ;; 0x400ff080
        STR      R0,[R1, #+0]
//  533 #else
//  534   gpio_init(ports[PORT_RES/32],PORT_RES%32,GPO,0);    //初始化gpio
//  535   gpio_init(ports[PORT_DC/32], PORT_DC%32,GPO,0);     //初始化gpio
//  536   
//  537   SPI_init(SPI0);
//  538   SPI_RES = 0;
//  539   LCD_DLY_ms(50);
//  540   SPI_RES = 1;
//  541 #endif
//  542   
//  543   LCD_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       IOSPI_LCD_WrCmd
//  544   LCD_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       IOSPI_LCD_WrCmd
//  545   LCD_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       IOSPI_LCD_WrCmd
//  546   LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       IOSPI_LCD_WrCmd
//  547   LCD_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       IOSPI_LCD_WrCmd
//  548   LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       IOSPI_LCD_WrCmd
//  549   LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       IOSPI_LCD_WrCmd
//  550   LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       IOSPI_LCD_WrCmd
//  551   LCD_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       IOSPI_LCD_WrCmd
//  552   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       IOSPI_LCD_WrCmd
//  553   LCD_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       IOSPI_LCD_WrCmd
//  554   LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       IOSPI_LCD_WrCmd
//  555   LCD_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       IOSPI_LCD_WrCmd
//  556   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       IOSPI_LCD_WrCmd
//  557   LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       IOSPI_LCD_WrCmd
//  558   LCD_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       IOSPI_LCD_WrCmd
//  559   LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       IOSPI_LCD_WrCmd
//  560   LCD_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       IOSPI_LCD_WrCmd
//  561   LCD_WrCmd(0x12);
        MOVS     R0,#+18
        BL       IOSPI_LCD_WrCmd
//  562   LCD_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       IOSPI_LCD_WrCmd
//  563   LCD_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       IOSPI_LCD_WrCmd
//  564   LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       IOSPI_LCD_WrCmd
//  565   LCD_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       IOSPI_LCD_WrCmd
//  566   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       IOSPI_LCD_WrCmd
//  567   LCD_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       IOSPI_LCD_WrCmd
//  568   LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       IOSPI_LCD_WrCmd
//  569   LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
        MOVS     R0,#+166
        BL       IOSPI_LCD_WrCmd
//  570   LCD_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       IOSPI_LCD_WrCmd
//  571   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  572   LCD_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  573 	
//  574 } 
        POP      {R0-R2,PC}       ;; return
//  575 //==============================================================
//  576 //函数名： void LCD_PutPixel(byte x,byte y)
//  577 //功能描述：绘制一个点（x,y）
//  578 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  579 //返回：无
//  580 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  581 void LCD_PutPixel(byte x,byte y)
//  582 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  583 	byte data1;  //data1当前点的数据 
//  584 	 
//  585   LCD_Set_Pos(x,y); 
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  586 	data1 = 0x01<<(y%8); 	
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  587 	LCD_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
//  588 	LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrCmd
//  589 	LCD_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       IOSPI_LCD_WrCmd
//  590 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrDat
//  591 }
        POP      {R4-R6,PC}       ;; return
//  592 //==============================================================
//  593 //函数名： void LCD_Rectangle(byte x1,byte y1,
//  594 //                   byte x2,byte y2,byte color,byte gif)
//  595 //功能描述：绘制一个实心矩形
//  596 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  597 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  598 //返回：无
//  599 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  600 void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
//  601 {
LCD_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
//  602 	byte n; 
//  603 		
//  604 	LCD_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  605 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??LCD_Rectangle_0
//  606 	{
//  607 		LCD_WrDat(0x01<<(y1%8)); 			
??LCD_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrDat
//  608 		if(gif == 1) 	LCD_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_2
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  609 	}  
??LCD_Rectangle_2:
        ADDS     R9,R9,#+1
??LCD_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_1
//  610 	LCD_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  611   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_3
//  612 	{
//  613 		LCD_WrDat(0x01<<(y2%8)); 			
??LCD_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       IOSPI_LCD_WrDat
//  614 		if(gif == 1) 	LCD_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_5
        MOVS     R0,#+5
        BL       LCD_DLY_ms
//  615 	}
??LCD_Rectangle_5:
        ADDS     R9,R9,#+1
??LCD_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_4
//  616 	
//  617 }  
        POP      {R0,R4-R9,PC}    ;; return
//  618 //==============================================================
//  619 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
//  620 //功能描述：写入一组标准ASCII字符串
//  621 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  622 //返回：无
//  623 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  624 void LCD_P6x8Str(byte x,byte y,byte ch[])
//  625 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  626   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_0
//  627   while (ch[j]!='\0')
//  628   {    
//  629     c =ch[j]-32;
//  630     if(x>126){x=0;y++;}
//  631     LCD_Set_Pos(x,y);    
//  632   	for(i=0;i<6;i++)     
//  633   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable7_2
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       IOSPI_LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??LCD_P6x8Str_1
//  634   	x+=6;
        ADDS     R4,R4,#+6
//  635   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
//  636   }
//  637 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  638 
//  639 
//  640 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  641 void LCD_P6x8Str_xiaoshudian(byte x,byte y,byte ch[])
//  642 {
LCD_P6x8Str_xiaoshudian:
        PUSH     {R3-R7,LR}
        MOVS     R5,R0
//  643   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R6,#+0
        MOVS     R4,#+0
//  644  // while (ch[j]!='\0')
//  645   //{    
//  646     c =ch[j]-32;
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R4, R2]
        SUBS     R0,R0,#+32
        MOVS     R7,R0
//  647     if(x>126){x=0;y++;}
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+127
        BLT.N    ??LCD_P6x8Str_xiaoshudian_0
        MOVS     R5,#+0
        ADDS     R1,R1,#+1
//  648     LCD_Set_Pos(x,y);    
??LCD_P6x8Str_xiaoshudian_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  649     //for(i=0;i<6;i++)     
//  650       LCD_WrDat(F6x8[c][i]);  
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable7_2
        MLA      R0,R0,R7,R1
        LDRB     R0,[R6, R0]
        BL       IOSPI_LCD_WrDat
//  651     x+=6;
        ADDS     R5,R5,#+6
//  652     j++;
        ADDS     R4,R4,#+1
//  653  // }
//  654 }
        POP      {R0,R4-R7,PC}    ;; return
//  655 //==============================================================
//  656 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
//  657 //功能描述：写入一组标准ASCII字符串
//  658 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  659 //返回：无
//  660 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  661 void LCD_P8x16Str(byte x,byte y,byte ch[])
//  662 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  663   byte c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_0
//  664         
//  665   while (ch[j]!='\0')
//  666   {    
//  667     c =ch[j]-32;
//  668     if(x>120){x=0;y++;}
//  669     LCD_Set_Pos(x,y);    
//  670   	for(i=0;i<8;i++)     
//  671   	  LCD_WrDat(F8X16[c*16+i]);
//  672   	LCD_Set_Pos(x,y+1);    
//  673   	for(i=0;i<8;i++)     
//  674   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.W    R1,??DataTable7_3
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       IOSPI_LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_1
//  675   	x+=8;
        ADDS     R4,R4,#+8
//  676   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.W    R1,??DataTable7_3
        LDRB     R0,[R0, R1]
        BL       IOSPI_LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_2
//  677   }
//  678 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  679 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  680 void LCD_P16x16Str(byte x,byte y,byte ch[])
//  681 {
LCD_P16x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
//  682 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
//  683 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??LCD_P16x16Str_0
//  684 	
//  685 	while(ch[ii] != '\0')
//  686 	{
//  687   	wm = 0;
//  688   	adder = 1;
//  689   	while(F16x16_Idx[wm] > 127)
//  690   	{
//  691   		if(F16x16_Idx[wm] == ch[ii])
//  692   		{
//  693   			if(F16x16_Idx[wm + 1] == ch[ii + 1])
//  694   			{
//  695   				adder = wm * 16;
//  696   				break;
//  697   			}
//  698   		}
//  699   		wm += 2;			
//  700   	}
//  701   	if(x>118){x=0;y++;}
//  702   	LCD_Set_Pos(x , y); 
//  703   	if(adder != 1)// 显示汉字					
//  704   	{
//  705   		LCD_Set_Pos(x , y);
//  706   		for(wm = 0;wm < 16;wm++)               
//  707   		{
//  708   			LCD_WrDat(F16x16[adder]);	
//  709   			adder += 1;
//  710   		}      
//  711   		LCD_Set_Pos(x,y + 1); 
//  712   		for(wm = 0;wm < 16;wm++)          
//  713   		{
//  714   			LCD_WrDat(F16x16[adder]);
//  715   			adder += 1;
//  716   		}   		
//  717   	}
//  718   	else			  //显示空白字符			
//  719   	{
//  720   		ii += 1;
//  721       LCD_Set_Pos(x,y);
//  722   		for(wm = 0;wm < 16;wm++)
//  723   		{
//  724   				LCD_WrDat(0);
//  725   		}
//  726   		LCD_Set_Pos(x,y + 1);
//  727   		for(wm = 0;wm < 16;wm++)
//  728   		{   		
//  729   				LCD_WrDat(0);	
??LCD_P16x16Str_1:
        MOVS     R0,#+0
        BL       IOSPI_LCD_WrDat
//  730   		}
        ADDS     R9,R9,#+1
??LCD_P16x16Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P16x16Str_1
//  731   	}
//  732   	x += 16;
??LCD_P16x16Str_3:
        ADDS     R6,R6,#+16
//  733   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P16x16Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??LCD_P16x16Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P16x16Str_5
??LCD_P16x16Str_6:
        ADDS     R9,R9,#+2
??LCD_P16x16Str_5:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.N    R0,??DataTable7_4
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??LCD_P16x16Str_7
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.N    R0,??DataTable7_4
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??LCD_P16x16Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDR.N    R0,??DataTable7_4
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??LCD_P16x16Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        LSLS     R8,R9,#+4
??LCD_P16x16Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??LCD_P16x16Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??LCD_P16x16Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+1
        BEQ.N    ??LCD_P16x16Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P16x16Str_10
??LCD_P16x16Str_11:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.N    R0,??DataTable7_5
        LDRB     R0,[R8, R0]
        BL       IOSPI_LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P16x16Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P16x16Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P16x16Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BGE.N    ??LCD_P16x16Str_3
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.N    R0,??DataTable7_5
        LDRB     R0,[R8, R0]
        BL       IOSPI_LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P16x16Str_12
??LCD_P16x16Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P16x16Str_13
??LCD_P16x16Str_14:
        MOVS     R0,#+0
        BL       IOSPI_LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P16x16Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P16x16Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P16x16Str_2
//  734 	}
//  735 }
??LCD_P16x16Str_4:
        POP      {R0,R4-R9,PC}    ;; return
//  736 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  737 void LCD_Print(byte x, byte y, byte ch[])
//  738 {
LCD_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  739 	byte ch2[3];
//  740 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??LCD_Print_0
//  741 	while(ch[ii] != '\0')
//  742 	{
//  743 		if(ch[ii] > 127)
//  744 		{
//  745 			ch2[0] = ch[ii];
??LCD_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  746 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  747 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  748 			LCD_P16x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P16x16Str
//  749 			x += 16;
        ADDS     R4,R4,#+16
//  750 			ii += 2;
        ADDS     R7,R7,#+2
//  751 		}
??LCD_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??LCD_Print_1
//  752 		else
//  753 		{
//  754 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  755 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  756 			LCD_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
//  757 			x += 8;
        ADDS     R4,R4,#+8
//  758 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??LCD_Print_0
//  759 		}
//  760 	}
//  761 } 
??LCD_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
//  762 
//  763 
//  764 //==============================================================
//  765 //函数名：void LED_ShowInt(byte x,byte y,byte ch[])
//  766 //功能描述：显示一个int字符
//  767 //参数：显示的位置（x,y），y为页范围0～7，要显示的数字
//  768 //返回：无
//  769 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  770 void LCD_ShowInt(byte x,byte y,int num)
//  771 {
LCD_ShowInt:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+12
//  772   byte tmpstr[6];
//  773   byte flag_sta = 0;
        MOVS     R6,#+0
//  774   byte flag_nat = 0;
        MOVS     R3,#+0
//  775   int m = 0;
        MOVS     R5,#+0
//  776   unsigned int i = 10000,j = 0;
        MOVW     R4,#+10000
        MOVS     R7,#+0
//  777   if(num < 0) 
        CMP      R2,#+0
        BPL.N    ??LCD_ShowInt_0
//  778   {
//  779       flag_nat = 1;
        MOVS     R3,#+1
//  780       num = num * -1;
        MOVS     R5,#-1
        MULS     R2,R5,R2
//  781   }
//  782   
//  783   for(m=0;m < 5;m++) 
??LCD_ShowInt_0:
        MOVS     R5,#+0
        B.N      ??LCD_ShowInt_1
//  784   {
//  785       j = num / i;
//  786       if(j == 0 && flag_sta == 0) 
//  787       {
//  788          if(flag_nat == 1) 
//  789          {
//  790             tmpstr[m] = '-';
//  791             if(m>0) tmpstr[m - 1] = ' ';
//  792          } 
//  793          else
//  794             tmpstr[m] = ' ';
//  795       } 
//  796       else 
//  797       {
//  798          tmpstr[m] = j + '0';
??LCD_ShowInt_2:
        ADD      R6,SP,#+0
        ADDS     R7,R7,#+48
        STRB     R7,[R5, R6]
//  799          flag_sta = 1;
        MOVS     R6,#+1
//  800       }
//  801       num = num % i;
??LCD_ShowInt_3:
        UDIV     R7,R2,R4
        MLS      R2,R4,R7,R2
//  802       i = i / 10;
        MOVS     R7,#+10
        UDIV     R4,R4,R7
        ADDS     R5,R5,#+1
??LCD_ShowInt_1:
        CMP      R5,#+5
        BGE.N    ??LCD_ShowInt_4
        UDIV     R7,R2,R4
        CMP      R7,#+0
        BNE.N    ??LCD_ShowInt_2
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BNE.N    ??LCD_ShowInt_2
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+1
        BNE.N    ??LCD_ShowInt_5
        ADD      R7,SP,#+0
        MOVS     R12,#+45
        STRB     R12,[R5, R7]
        CMP      R5,#+1
        BLT.N    ??LCD_ShowInt_3
        ADD      R7,SP,#+0
        ADDS     R7,R5,R7
        MOVS     R12,#+32
        STRB     R12,[R7, #-1]
        B.N      ??LCD_ShowInt_3
??LCD_ShowInt_5:
        ADD      R7,SP,#+0
        MOVS     R12,#+32
        STRB     R12,[R5, R7]
        B.N      ??LCD_ShowInt_3
//  803   }
//  804   if(flag_sta == 0)
??LCD_ShowInt_4:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BNE.N    ??LCD_ShowInt_6
//  805       tmpstr[4] = '0';
        MOVS     R2,#+48
        STRB     R2,[SP, #+4]
//  806   tmpstr[5] = '\0';
??LCD_ShowInt_6:
        MOVS     R2,#+0
        STRB     R2,[SP, #+5]
//  807   
//  808   LCD_P6x8Str(x,y,tmpstr);
        ADD      R2,SP,#+0
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
//  809 }
        POP      {R0-R2,R4-R7,PC}  ;; return
//  810 
//  811 //==============================================================
//  812 //函数名： void Draw_BMP(byte x,byte y)
//  813 //功能描述：显示BMP图片128×64
//  814 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
//  815 //返回：无
//  816 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  817 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
//  818 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
//  819   word ii=0;
        MOVS     R7,#+0
//  820   byte x,y;
//  821   
//  822   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
//  823   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
//  824 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
//  825 	{
//  826 		LCD_Set_Pos(x0,y);				
//  827     for(x=x0;x<x1;x++)
//  828 	    {      
//  829 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRB     R0,[R7, R8]
        BL       IOSPI_LCD_WrDat
        ADDS     R7,R7,#+1
//  830 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
//  831 	}
//  832 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
//  833 /***************************************************
//  834 ** 函数名： void Draw_BUPTLogo(void)
//  835 ** 功能描述：显示BUPT  loge
//  836 ** 参数:
//  837 ** 返回：无
//  838 ***************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  839 void Draw_BUPTLogo(byte xx,byte gif)
//  840 { 	
Draw_BUPTLogo:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  841   word ii=0;
        MOVS     R6,#+0
//  842   byte x = 0,y = 0;
        MOVS     R7,#+0
        MOVS     R8,#+0
//  843          
//  844   
//  845 	for(y=2;y<8;y++)
        MOVS     R0,#+2
        MOV      R8,R0
        B.N      ??Draw_BUPTLogo_0
//  846 	{
//  847           if(xx < Max_Column)
//  848 		LCD_Set_Pos(xx,y);	
//  849           else
//  850             LCD_Set_Pos(0,y);	
//  851             for(x=0;x<72;x++)
//  852 	    {      
//  853 	    	LCD_WrDat(BUPT72x48[ii++]);
??Draw_BUPTLogo_1:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDR.N    R0,??DataTable7_6
        LDRB     R0,[R6, R0]
        BL       IOSPI_LCD_WrDat
        ADDS     R6,R6,#+1
//  854 	    	if(gif == 1) 	LCD_DLY_ms(1);	    	
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+1
        BNE.N    ??Draw_BUPTLogo_2
        MOVS     R0,#+1
        BL       LCD_DLY_ms
//  855 	    }
??Draw_BUPTLogo_2:
        ADDS     R7,R7,#+1
??Draw_BUPTLogo_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+72
        BLT.N    ??Draw_BUPTLogo_1
        ADDS     R8,R8,#+1
??Draw_BUPTLogo_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??Draw_BUPTLogo_4
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BGE.N    ??Draw_BUPTLogo_5
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        B.N      ??Draw_BUPTLogo_6
??Draw_BUPTLogo_5:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
??Draw_BUPTLogo_6:
        MOVS     R7,#+0
        B.N      ??Draw_BUPTLogo_3
//  856 	}
//  857 }
??Draw_BUPTLogo_4:
        POP      {R4-R8,PC}       ;; return
//  858 
//  859 
//  860 
//  861 /***************************************************
//  862 ** 函数名： void LEDHead(void)
//  863 ** 功能描述：画出标题
//  864 ** 参数:
//  865 ** 返回：无
//  866 ***************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  867 void LCDHead(void)
//  868 { 	
LCDHead:
        PUSH     {R7,LR}
//  869   LCD_P6x8Str(20,0,"BUPT Smartcar");
        LDR.N    R2,??DataTable7_7
        MOVS     R1,#+0
        MOVS     R0,#+20
        BL       LCD_P6x8Str
//  870 }
        POP      {R0,PC}          ;; return
//  871 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  872 byte MyCar128x64[]=
MyCar128x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 254, 254, 62, 120
        DC8 112, 112, 120, 62, 254, 248, 248, 0, 248, 248, 0, 0, 248, 248, 0, 0
        DC8 0, 0, 248, 254, 254, 14, 14, 14, 0, 0, 0, 176, 176, 240, 240, 192
        DC8 0, 240, 240, 240, 96, 112, 96, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 64, 128, 64
        DC8 64, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0
        DC8 195, 207, 204, 204, 255, 63, 0, 0, 0, 0, 3, 15, 15, 14, 14, 14, 0
        DC8 0, 2, 15, 13, 15, 15, 15, 0, 15, 15, 15, 0, 0, 0, 0, 14, 14, 14, 0
        DC8 14, 14, 14, 0, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 12, 18, 36, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 1, 2, 4, 8, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 24, 36, 68, 136, 68, 36, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 128, 128, 192, 64, 64, 96, 160, 160, 240, 240, 112, 80, 112
        DC8 112, 112, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 252, 60, 60, 60
        DC8 92, 92, 80, 80, 80, 176, 188, 188, 188, 108, 96, 96, 192, 192, 192
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 12, 18, 36, 18, 12, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 17, 34, 17, 9
        DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 224, 240, 240, 112, 28, 12
        DC8 126, 126, 243, 255, 253, 30, 30, 14, 1, 129, 141, 141, 12, 12, 12
        DC8 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 128, 255, 254, 254, 254
        DC8 252, 224, 128, 128, 16, 17, 1, 131, 131, 130, 140, 156, 241, 241
        DC8 225, 131, 15, 15, 14, 30, 124, 124, 124, 240, 224, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 48, 72, 136, 16, 136, 72, 48, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128
        DC8 128, 192, 192, 192, 112, 112, 120, 120, 120, 120, 56, 120, 120, 78
        DC8 78, 78, 14, 14, 143, 135, 185, 185, 190, 62, 62, 62, 62, 63, 63, 63
        DC8 62, 62, 14, 14, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
        DC8 14, 14, 142, 142, 207, 143, 143, 143, 143, 15, 15, 15, 15, 14, 14
        DC8 14, 15, 15, 15, 15, 15, 143, 143, 135, 135, 70, 70, 64, 0, 48, 48
        DC8 48, 49, 55, 63, 62, 62, 62, 56, 248, 192, 192, 192, 0, 0, 0, 0, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 240, 248, 116, 116, 119, 15, 3, 3, 1, 128, 192
        DC8 240, 240, 240, 240, 248, 248, 248, 240, 240, 240, 192, 192, 129, 51
        DC8 67, 67, 133, 14, 120, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 255, 0, 0, 0, 0, 0
        DC8 0, 192, 248, 248, 120, 12, 198, 115, 115, 249, 249, 248, 248, 240
        DC8 240, 248, 248, 248, 248, 248, 248, 240, 240, 240, 192, 129, 131
        DC8 131, 7, 14, 188, 188, 248, 240, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 255, 243, 255
        DC8 62, 62, 14, 2, 252, 252, 254, 255, 255, 127, 127, 115, 3, 143, 143
        DC8 143, 3, 127, 127, 255, 255, 255, 254, 252, 252, 1, 0, 0, 255, 255
        DC8 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 255, 0, 0, 128, 128, 128, 128
        DC8 207, 63, 63, 60, 14, 3, 252, 252, 255, 255, 255, 255, 127, 127, 131
        DC8 143, 143, 143, 3, 63, 127, 127, 255, 255, 255, 255, 255, 254, 14
        DC8 255, 255, 255, 255, 63, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 143, 142, 142, 224, 224
        DC8 255, 255, 255, 255, 255, 254, 254, 142, 130, 241, 241, 241, 128
        DC8 252, 254, 255, 255, 255, 255, 255, 255, 254, 240, 240, 241, 241
        DC8 241, 240, 240, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242
        DC8 242, 242, 242, 242, 242, 242, 243, 243, 243, 243, 243, 243, 243
        DC8 243, 243, 241, 240, 240, 241, 241, 241, 241, 241, 240, 240, 240
        DC8 240, 254, 255, 255, 255, 255, 255, 255, 254, 254, 225, 241, 241
        DC8 241, 224, 236, 254, 254, 255, 255, 255, 255, 255, 243, 242, 227
        DC8 227, 227, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  873 {
//  874 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  875       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,
//  876       0xFE,0xFE,0x3E,0x78,0x70,0x70,0x78,0x3E,
//  877       0xFE,0xF8,0xF8,0x00,0xF8,0xF8,0x00,0x00,
//  878       0xF8,0xF8,0x00,0x00,0x00,0x00,0xF8,0xFE,
//  879       0xFE,0x0E,0x0E,0x0E,0x00,0x00,0x00,0xB0,
//  880       0xB0,0xF0,0xF0,0xC0,0x00,0xF0,0xF0,0xF0,
//  881       0x60,0x70,0x60,0x20,0x00,0x00,0x00,0x00,
//  882       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  883       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  884       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  885       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  886       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  887       0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x40,
//  888       0x80,0x40,0x40,0x80,0x00,0x00,0x00,0x00,
//  889       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  890       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  891       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
//  892       0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//  893       0x0F,0x0F,0x0F,0x00,0xC3,0xCF,0xCC,0xCC,
//  894       0xFF,0x3F,0x00,0x00,0x00,0x00,0x03,0x0F,
//  895       0x0F,0x0E,0x0E,0x0E,0x00,0x00,0x02,0x0F,
//  896       0x0D,0x0F,0x0F,0x0F,0x00,0x0F,0x0F,0x0F,
//  897       0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x00,
//  898       0x0E,0x0E,0x0E,0x00,0x0E,0x0E,0x0E,0x00,
//  899       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  900       0x00,0x00,0x00,0x00,0x00,0x0C,0x12,0x24,
//  901       0x12,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,
//  902       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  903       0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,
//  904       0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,
//  905       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  906       0x00,0x00,0x00,0x00,0x00,0x18,0x24,0x44,
//  907       0x88,0x44,0x24,0x18,0x00,0x00,0x00,0x00,
//  908       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  909       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  910       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  911       0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,
//  912       0xC0,0x40,0x40,0x60,0xA0,0xA0,0xF0,0xF0,
//  913       0x70,0x50,0x70,0x70,0x70,0x3C,0x3C,0x3C,
//  914       0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0xFC,
//  915       0x3C,0x3C,0x3C,0x5C,0x5C,0x50,0x50,0x50,
//  916       0xB0,0xBC,0xBC,0xBC,0x6C,0x60,0x60,0xC0,
//  917       0xC0,0xC0,0x80,0x80,0x80,0x00,0x00,0x00,
//  918       0x00,0x00,0x00,0x00,0x0C,0x12,0x24,0x12,
//  919       0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  920       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  921       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  922       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  923       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  924       0x00,0x00,0x00,0x00,0x06,0x09,0x11,0x22,
//  925       0x11,0x09,0x06,0x00,0x00,0x00,0x00,0x00,
//  926       0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0xF0,
//  927       0xF0,0x70,0x1C,0x0C,0x7E,0x7E,0xF3,0xFF,
//  928       0xFD,0x1E,0x1E,0x0E,0x01,0x81,0x8D,0x8D,
//  929       0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
//  930       0x0C,0x0C,0x0C,0x0C,0x00,0x00,0x80,0xFF,
//  931       0xFE,0xFE,0xFE,0xFC,0xE0,0x80,0x80,0x10,
//  932       0x11,0x01,0x83,0x83,0x82,0x8C,0x9C,0xF1,
//  933       0xF1,0xE1,0x83,0x0F,0x0F,0x0E,0x1E,0x7C,
//  934       0x7C,0x7C,0xF0,0xE0,0x80,0x00,0x00,0x00,
//  935       0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x48,
//  936       0x88,0x10,0x88,0x48,0x30,0x00,0x00,0x00,
//  937       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  938       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  939       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  940       0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0x70,
//  941       0x70,0x78,0x78,0x78,0x78,0x38,0x78,0x78,
//  942       0x4E,0x4E,0x4E,0x0E,0x0E,0x8F,0x87,0xB9,
//  943       0xB9,0xBE,0x3E,0x3E,0x3E,0x3E,0x3F,0x3F,
//  944       0x3F,0x3E,0x3E,0x0E,0x0E,0x0F,0x0F,0x0F,
//  945       0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
//  946       0x0E,0x0E,0x0E,0x0E,0x8E,0x8E,0xCF,0x8F,
//  947       0x8F,0x8F,0x8F,0x0F,0x0F,0x0F,0x0F,0x0E,
//  948       0x0E,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x8F,
//  949       0x8F,0x87,0x87,0x46,0x46,0x40,0x00,0x30,
//  950       0x30,0x30,0x31,0x37,0x3F,0x3E,0x3E,0x3E,
//  951       0x38,0xF8,0xC0,0xC0,0xC0,0x00,0x00,0x00,
//  952       0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
//  953       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  954       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  955       0x00,0x00,0x00,0x00,0x00,0x80,0xF0,0xF8,
//  956       0x74,0x74,0x77,0x0F,0x03,0x03,0x01,0x80,
//  957       0xC0,0xF0,0xF0,0xF0,0xF0,0xF8,0xF8,0xF8,
//  958       0xF0,0xF0,0xF0,0xC0,0xC0,0x81,0x33,0x43,
//  959       0x43,0x85,0x0E,0x78,0xC0,0xC0,0x00,0x00,
//  960       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  961       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  962       0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x03,
//  963       0x03,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,
//  964       0x00,0xC0,0xF8,0xF8,0x78,0x0C,0xC6,0x73,
//  965       0x73,0xF9,0xF9,0xF8,0xF8,0xF0,0xF0,0xF8,
//  966       0xF8,0xF8,0xF8,0xF8,0xF8,0xF0,0xF0,0xF0,
//  967       0xC0,0x81,0x83,0x83,0x07,0x0E,0xBC,0xBC,
//  968       0xF8,0xF0,0xC0,0x80,0x80,0x00,0x00,0x00,
//  969       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  970       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  971       0x00,0x00,0x00,0x3E,0x3E,0xFF,0xF3,0xFF,
//  972       0x3E,0x3E,0x0E,0x02,0xFC,0xFC,0xFE,0xFF,
//  973       0xFF,0x7F,0x7F,0x73,0x03,0x8F,0x8F,0x8F,
//  974       0x03,0x7F,0x7F,0xFF,0xFF,0xFF,0xFE,0xFC,
//  975       0xFC,0x01,0x00,0x00,0xFF,0xFF,0xC0,0x00,
//  976       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  977       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  978       0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
//  979       0x80,0x80,0xFF,0x00,0x00,0x80,0x80,0x80,
//  980       0x80,0xCF,0x3F,0x3F,0x3C,0x0E,0x03,0xFC,
//  981       0xFC,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F,0x83,
//  982       0x8F,0x8F,0x8F,0x03,0x3F,0x7F,0x7F,0xFF,
//  983       0xFF,0xFF,0xFF,0xFF,0xFE,0x0E,0xFF,0xFF,
//  984       0xFF,0xFF,0x3F,0x0F,0x0F,0x00,0x00,0x00,
//  985       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  986       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  987       0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x8F,
//  988       0x8E,0x8E,0xE0,0xE0,0xFF,0xFF,0xFF,0xFF,
//  989       0xFF,0xFE,0xFE,0x8E,0x82,0xF1,0xF1,0xF1,
//  990       0x80,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,
//  991       0xFF,0xFE,0xF0,0xF0,0xF1,0xF1,0xF1,0xF0,
//  992       0xF0,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
//  993       0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,0xF2,
//  994       0xF2,0xF3,0xF3,0xF3,0xF3,0xF3,0xF3,0xF3,
//  995       0xF3,0xF3,0xF1,0xF0,0xF0,0xF1,0xF1,0xF1,
//  996       0xF1,0xF1,0xF0,0xF0,0xF0,0xF0,0xFE,0xFF,
//  997       0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xE1,
//  998       0xF1,0xF1,0xF1,0xE0,0xEC,0xFE,0xFE,0xFF,
//  999       0xFF,0xFF,0xFF,0xFF,0xF3,0xF2,0xE3,0xE3,
// 1000       0xE3,0xE1,0x00,0x00,0x00,0x00,0x00,0x00,
// 1001       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 1002 };
// 1003 //MyCar

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1004 void Draw_MyCar(byte xx,byte gif)
// 1005 { 	
Draw_MyCar:
        PUSH     {R4-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
// 1006 	word ii=0;
        MOVS     R6,#+0
// 1007 	byte x = 0,y = 0;
        MOVS     R7,#+0
        MOVS     R8,#+0
// 1008 	
// 1009 	for(y=0;y<8;y++)
        MOVS     R0,#+0
        MOV      R8,R0
        B.N      ??Draw_MyCar_0
// 1010 	{
// 1011 	  
// 1012 		if(xx < Max_Column)
// 1013 			LCD_Set_Pos(xx,y);	
// 1014 		else
// 1015 			LCD_Set_Pos(0,y);	
// 1016 	  
// 1017 		for(x=0;x<128;x++)
// 1018 		{      
// 1019 			LCD_WrDat(MyCar128x64[ii++]);
??Draw_MyCar_1:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDR.N    R0,??DataTable7_8
        LDRB     R0,[R6, R0]
        BL       IOSPI_LCD_WrDat
        ADDS     R6,R6,#+1
// 1020 			if(gif == 1) 	
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+1
        BNE.N    ??Draw_MyCar_2
// 1021 			  	LCD_DLY_us(500);	    	
        MOV      R0,#+500
        BL       LCD_DLY_us
// 1022 		}
??Draw_MyCar_2:
        ADDS     R7,R7,#+1
??Draw_MyCar_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+128
        BLT.N    ??Draw_MyCar_1
        ADDS     R8,R8,#+1
??Draw_MyCar_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BGE.N    ??Draw_MyCar_4
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BGE.N    ??Draw_MyCar_5
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        B.N      ??Draw_MyCar_6
??Draw_MyCar_5:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
??Draw_MyCar_6:
        MOVS     R7,#+0
        B.N      ??Draw_MyCar_3
// 1023 	}
// 1024 }
??Draw_MyCar_4:
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7:
        DC32     `?<Constant {0, 1, 2, 3, 4}>`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_1:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_2:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_3:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_4:
        DC32     F16x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_5:
        DC32     F16x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_6:
        DC32     BUPT72x48

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_7:
        DC32     `?<Constant "BUPT Smartcar">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_8:
        DC32     MyCar128x64

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
// 1 456 bytes in section .data
// 3 084 bytes in section .rodata
// 2 060 bytes in section .text
// 
// 2 060 bytes of CODE  memory
// 3 084 bytes of CONST memory
// 1 456 bytes of DATA  memory
//
//Errors: none
//Warnings: none
