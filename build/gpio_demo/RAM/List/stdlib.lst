###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     24/Mar/2012  16:13:07 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\workspace\myworkspace\SW_K60\src\common\stdlib.c      #
#    Command line =  D:\workspace\myworkspace\SW_K60\src\common\stdlib.c      #
#                    -lCN D:\workspace\myworkspace\SW_K60\build\gpio_demo\RAM #
#                    \List\ -lB D:\workspace\myworkspace\SW_K60\build\gpio_de #
#                    mo\RAM\List\ -o D:\workspace\myworkspace\SW_K60\build\gp #
#                    io_demo\RAM\Obj\ --no_cse --no_unroll --no_inline        #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_3\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I D:\workspace\myworkspace\SW_K60\build\gpio_d #
#                    emo\..\ -I D:\workspace\myworkspace\SW_K60\build\gpio_de #
#                    mo\..\..\src\common\ -I D:\workspace\myworkspace\SW_K60\ #
#                    build\gpio_demo\..\..\src\cpu\ -I                        #
#                    D:\workspace\myworkspace\SW_K60\build\gpio_demo\..\..\sr #
#                    c\drivers\ -I D:\workspace\myworkspace\SW_K60\build\gpio #
#                    _demo\..\..\src\drivers\gpio\ -I                         #
#                    D:\workspace\myworkspace\SW_K60\build\gpio_demo\..\..\sr #
#                    c\drivers\wdog\ -I D:\workspace\myworkspace\SW_K60\build #
#                    \gpio_demo\..\..\src\drivers\mcg\ -I                     #
#                    D:\workspace\myworkspace\SW_K60\build\gpio_demo\..\..\sr #
#                    c\drivers\uart\ -I D:\workspace\myworkspace\SW_K60\build #
#                    \gpio_demo\..\..\src\platforms\ -I                       #
#                    D:\workspace\myworkspace\SW_K60\build\gpio_demo\..\..\sr #
#                    c\projects\ -I D:\workspace\myworkspace\SW_K60\build\gpi #
#                    o_demo\..\..\src\projects\fire_gpio_demo\ -Ol            #
#    List file    =  D:\workspace\myworkspace\SW_K60\build\gpio_demo\RAM\List #
#                    \stdlib.lst                                              #
#    Object file  =  D:\workspace\myworkspace\SW_K60\build\gpio_demo\RAM\Obj\ #
#                    stdlib.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\myworkspace\SW_K60\src\common\stdlib.c
      1          /*
      2           * File:        stdlib.c
      3           * Purpose:     Functions normally found in a standard C lib.
      4           *
      5           * Notes:       This supports ASCII only!!!
      6           *
      7           */
      8          
      9          #include "common.h"
     10          #include "stdlib.h"
     11          
     12          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     13          int
     14          isspace (int ch)
     15          {
     16              if ((ch == ' ') || (ch == '\t'))    /* \n ??? */
   \                     isspace:
   \   00000000   0x2820             CMP      R0,#+32
   \   00000002   0xD001             BEQ.N    ??isspace_0
   \   00000004   0x2809             CMP      R0,#+9
   \   00000006   0xD101             BNE.N    ??isspace_1
     17                  return TRUE;
   \                     ??isspace_0:
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??isspace_2
     18              else
     19                  return FALSE;
   \                     ??isspace_1:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??isspace_2:
   \   0000000E   0x4770             BX       LR               ;; return
     20          }
     21          
     22          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          int
     24          isalnum (int ch)
     25          {
     26              /* ASCII only */
     27              if (((ch >= '0') && (ch <= '9')) ||
     28                  ((ch >= 'A') && (ch <= 'Z')) ||
     29                  ((ch >= 'a') && (ch <= 'z')))
   \                     isalnum:
   \   00000000   0xF1B0 0x0130      SUBS     R1,R0,#+48
   \   00000004   0x290A             CMP      R1,#+10
   \   00000006   0xD306             BCC.N    ??isalnum_0
   \   00000008   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   0000000C   0x291A             CMP      R1,#+26
   \   0000000E   0xD302             BCC.N    ??isalnum_0
   \   00000010   0x3861             SUBS     R0,R0,#+97
   \   00000012   0x281A             CMP      R0,#+26
   \   00000014   0xD201             BCS.N    ??isalnum_1
     30                  return TRUE;
   \                     ??isalnum_0:
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE000             B.N      ??isalnum_2
     31              else
     32                  return FALSE;
   \                     ??isalnum_1:
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??isalnum_2:
   \   0000001C   0x4770             BX       LR               ;; return
     33          }
     34          
     35          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          int
     37          isdigit (int ch)
     38          {
     39              /* ASCII only */
     40              if ((ch >= '0') && (ch <= '9'))
   \                     isdigit:
   \   00000000   0x3830             SUBS     R0,R0,#+48
   \   00000002   0x280A             CMP      R0,#+10
   \   00000004   0xD201             BCS.N    ??isdigit_0
     41                  return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??isdigit_1
     42              else
     43                  return FALSE;
   \                     ??isdigit_0:
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??isdigit_1:
   \   0000000C   0x4770             BX       LR               ;; return
     44          }
     45          
     46          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          int
     48          isupper (int ch)
     49          {
     50              /* ASCII only */
     51              if ((ch >= 'A') && (ch <= 'Z'))
   \                     isupper:
   \   00000000   0x3841             SUBS     R0,R0,#+65
   \   00000002   0x281A             CMP      R0,#+26
   \   00000004   0xD201             BCS.N    ??isupper_0
     52                  return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??isupper_1
     53              else
     54                  return FALSE;
   \                     ??isupper_0:
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??isupper_1:
   \   0000000C   0x4770             BX       LR               ;; return
     55          }
     56          
     57          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     58          int
     59          strcasecmp (const char *s1, const char *s2)
     60          {
   \                     strcasecmp:
   \   00000000   0xB410             PUSH     {R4}
     61              char    c1, c2;
     62              int     result = 0;
   \   00000002   0x2200             MOVS     R2,#+0
     63          
     64              while (result == 0)
   \                     ??strcasecmp_0:
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD11A             BNE.N    ??strcasecmp_1
     65              {
     66                  c1 = *s1++;
   \   00000008   0x7803             LDRB     R3,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
     67                  c2 = *s2++;
   \   0000000C   0x780C             LDRB     R4,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
     68                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000010   0xF1B3 0x0261      SUBS     R2,R3,#+97
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x2A1A             CMP      R2,#+26
   \   00000018   0xD200             BCS.N    ??strcasecmp_2
     69                      c1 = (char)(c1 - ' ');
   \   0000001A   0x3B20             SUBS     R3,R3,#+32
     70                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strcasecmp_2:
   \   0000001C   0xF1B4 0x0261      SUBS     R2,R4,#+97
   \   00000020   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000022   0x2A1A             CMP      R2,#+26
   \   00000024   0xD200             BCS.N    ??strcasecmp_3
     71                      c2 = (char)(c2 - ' ');
   \   00000026   0x3C20             SUBS     R4,R4,#+32
     72                  if ((result = (c1 - c2)) != 0)
   \                     ??strcasecmp_3:
   \   00000028   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x1B1A             SUBS     R2,R3,R4
   \   0000002E   0x2A00             CMP      R2,#+0
   \   00000030   0xD105             BNE.N    ??strcasecmp_1
     73                      break;
     74                  if ((c1 == 0) || (c2 == 0))
   \                     ??strcasecmp_4:
   \   00000032   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000034   0x2B00             CMP      R3,#+0
   \   00000036   0xD002             BEQ.N    ??strcasecmp_5
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD1E2             BNE.N    ??strcasecmp_0
     75                      break;
     76              }
     77              return result;
   \                     ??strcasecmp_5:
   \                     ??strcasecmp_1:
   \   0000003E   0x0010             MOVS     R0,R2
   \   00000040   0xBC10             POP      {R4}
   \   00000042   0x4770             BX       LR               ;; return
     78          }
     79          
     80          
     81          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          int
     83          strncasecmp (const char *s1, const char *s2, int n)
     84          {
   \                     strncasecmp:
   \   00000000   0xB470             PUSH     {R4-R6}
     85              char    c1, c2;
     86              int     k = 0;
   \   00000002   0x2600             MOVS     R6,#+0
     87              int     result = 0;
   \   00000004   0x2300             MOVS     R3,#+0
     88          
     89              while ( k++ < n )
   \                     ??strncasecmp_0:
   \   00000006   0x0034             MOVS     R4,R6
   \   00000008   0x1C66             ADDS     R6,R4,#+1
   \   0000000A   0x4294             CMP      R4,R2
   \   0000000C   0xDA1A             BGE.N    ??strncasecmp_1
     90              {
     91                  c1 = *s1++;
   \   0000000E   0x7804             LDRB     R4,[R0, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
     92                  c2 = *s2++;
   \   00000012   0x780D             LDRB     R5,[R1, #+0]
   \   00000014   0x1C49             ADDS     R1,R1,#+1
     93                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000016   0xF1B4 0x0361      SUBS     R3,R4,#+97
   \   0000001A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   0x2B1A             CMP      R3,#+26
   \   0000001E   0xD200             BCS.N    ??strncasecmp_2
     94                      c1 = (char)(c1 - ' ');
   \   00000020   0x3C20             SUBS     R4,R4,#+32
     95                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strncasecmp_2:
   \   00000022   0xF1B5 0x0361      SUBS     R3,R5,#+97
   \   00000026   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000028   0x2B1A             CMP      R3,#+26
   \   0000002A   0xD200             BCS.N    ??strncasecmp_3
     96                      c2 = (char)(c2 - ' ');
   \   0000002C   0x3D20             SUBS     R5,R5,#+32
     97                  if ((result = (c1 - c2)) != 0)
   \                     ??strncasecmp_3:
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x1B63             SUBS     R3,R4,R5
   \   00000034   0x2B00             CMP      R3,#+0
   \   00000036   0xD105             BNE.N    ??strncasecmp_1
     98                      break;
     99                  if ((c1 == 0) || (c2 == 0))
   \                     ??strncasecmp_4:
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD002             BEQ.N    ??strncasecmp_5
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD1E0             BNE.N    ??strncasecmp_0
    100                      break;
    101              }
    102              return result;
   \                     ??strncasecmp_5:
   \                     ??strncasecmp_1:
   \   00000044   0x0018             MOVS     R0,R3
   \   00000046   0xBC70             POP      {R4-R6}
   \   00000048   0x4770             BX       LR               ;; return
    103          }
    104          
    105          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          uint32
    107          strtoul (char *str, char **ptr, int base)
    108          {
   \                     strtoul:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    109              unsigned long rvalue;
    110              int c, err, neg;
    111              char *endp;
    112              char *startp;
    113          
    114              rvalue = 0;  err = 0;  neg = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    115          
    116              /* Check for invalid arguments */
    117              if ((str == NULL) || (base < 0) || (base == 1) || (base > 36))
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD005             BEQ.N    ??strtoul_0
   \   00000018   0x2E00             CMP      R6,#+0
   \   0000001A   0xD403             BMI.N    ??strtoul_0
   \   0000001C   0x2E01             CMP      R6,#+1
   \   0000001E   0xD001             BEQ.N    ??strtoul_0
   \   00000020   0x2E25             CMP      R6,#+37
   \   00000022   0xDB04             BLT.N    ??strtoul_1
    118              {
    119                  if (ptr != NULL)
   \                     ??strtoul_0:
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD000             BEQ.N    ??strtoul_2
    120                  {
    121                      *ptr = str;
   \   00000028   0x602C             STR      R4,[R5, #+0]
    122                  }
    123                  return 0;
   \                     ??strtoul_2:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE064             B.N      ??strtoul_3
    124              }
    125          
    126              /* Skip leading white spaces */
    127              for (startp = str; isspace(*startp); ++startp)
   \                     ??strtoul_1:
   \   0000002E   0x46A2             MOV      R10,R4
   \   00000030   0xE001             B.N      ??strtoul_4
   \                     ??strtoul_5:
   \   00000032   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??strtoul_4:
   \   00000036   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   0000003A   0x.... 0x....      BL       isspace
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1F7             BNE.N    ??strtoul_5
    128                  ;
    129          
    130              /* Check for notations */
    131              switch (startp[0])
   \   00000042   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000046   0x282D             CMP      R0,#+45
   \   00000048   0xD011             BEQ.N    ??strtoul_6
   \   0000004A   0x2830             CMP      R0,#+48
   \   0000004C   0xD114             BNE.N    ??strtoul_7
    132              {
    133                  case '0':
    134                      if ((startp[1] == 'x') || (startp[1] == 'X'))
   \                     ??strtoul_8:
   \   0000004E   0xF89A 0x0001      LDRB     R0,[R10, #+1]
   \   00000052   0x2878             CMP      R0,#+120
   \   00000054   0xD003             BEQ.N    ??strtoul_9
   \   00000056   0xF89A 0x0001      LDRB     R0,[R10, #+1]
   \   0000005A   0x2858             CMP      R0,#+88
   \   0000005C   0xD106             BNE.N    ??strtoul_10
    135                      {
    136                          if ((base == 0) || (base == 16))
   \                     ??strtoul_9:
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD001             BEQ.N    ??strtoul_11
   \   00000062   0x2E10             CMP      R6,#+16
   \   00000064   0xD102             BNE.N    ??strtoul_10
    137                          {
    138                              base = 16;
   \                     ??strtoul_11:
   \   00000066   0x2610             MOVS     R6,#+16
    139                              startp = &startp[2];
   \   00000068   0xF11A 0x0A02      ADDS     R10,R10,#+2
    140                          }
    141                      }
    142                      break;
   \                     ??strtoul_10:
   \   0000006C   0xE004             B.N      ??strtoul_12
    143                  case '-':
    144                      neg = 1;
   \                     ??strtoul_6:
   \   0000006E   0xF05F 0x0901      MOVS     R9,#+1
    145                      startp = &startp[1];
   \   00000072   0xF11A 0x0A01      ADDS     R10,R10,#+1
    146                      break;
   \   00000076   0xE7FF             B.N      ??strtoul_12
    147                  default:
    148                      break;
    149              }
    150          
    151              if (base == 0)
   \                     ??strtoul_7:
   \                     ??strtoul_12:
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD100             BNE.N    ??strtoul_13
    152                  base = 10;
   \   0000007C   0x260A             MOVS     R6,#+10
    153          
    154              /* Check for invalid chars in str */
    155              for ( endp = startp; (c = *endp) != '\0'; ++endp)
   \                     ??strtoul_13:
   \   0000007E   0xE003             B.N      ??strtoul_14
    156              {
    157                  /* Check for 0..9,Aa-Zz */
    158                  if (!isalnum(c))
    159                  {
    160                      err = 1;
    161                      break;
    162                  }
    163          
    164                  /* Convert char to num in 0..36 */
    165                  if (isdigit(c))
    166                  {
    167                      c = c - '0';
    168                  }
    169                  else
    170                  {
    171                      if (isupper(c))
    172                      {
    173                          c = c - 'A' + 10;
    174                      }
    175                      else
    176                      {
    177                          c = c - 'a' + 10;
    178                      }
    179                  }
    180          
    181                  /* check c against base */
    182                  if (c >= base)
    183                  {
    184                      err = 1;
    185                      break;
    186                  }
    187          
    188                  if (neg)
    189                  {
    190                      rvalue = (rvalue * base) - c;
    191                  }
    192                  else
    193                  {
    194                      rvalue = (rvalue * base) + c;
   \                     ??strtoul_15:
   \   00000080   0xFB06 0xB707      MLA      R7,R6,R7,R11
    195                  }
   \                     ??strtoul_16:
   \   00000084   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??strtoul_14:
   \   00000088   0xF89A 0xB000      LDRB     R11,[R10, #+0]
   \   0000008C   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000090   0xD006             BEQ.N    ??strtoul_17
   \   00000092   0x4658             MOV      R0,R11
   \   00000094   0x.... 0x....      BL       isalnum
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD10D             BNE.N    ??strtoul_18
   \   0000009C   0xF05F 0x0801      MOVS     R8,#+1
    196              }
    197          
    198              /* Upon exit, endp points to the character at which valid info */
    199              /* STOPS.  No chars including and beyond endp are used.        */
    200          
    201              if (ptr != NULL)
   \                     ??strtoul_17:
   \   000000A0   0x2D00             CMP      R5,#+0
   \   000000A2   0xD001             BEQ.N    ??strtoul_19
    202                  *ptr = endp;
   \   000000A4   0xF8C5 0xA000      STR      R10,[R5, #+0]
    203          
    204              if (err)
   \                     ??strtoul_19:
   \   000000A8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000AC   0xD023             BEQ.N    ??strtoul_20
    205              {
    206                  if (ptr != NULL)
   \   000000AE   0x2D00             CMP      R5,#+0
   \   000000B0   0xD000             BEQ.N    ??strtoul_21
    207                      *ptr = str;
   \   000000B2   0x602C             STR      R4,[R5, #+0]
    208                  
    209                  return 0;
   \                     ??strtoul_21:
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0xE01F             B.N      ??strtoul_3
    210              }
   \                     ??strtoul_18:
   \   000000B8   0x4658             MOV      R0,R11
   \   000000BA   0x.... 0x....      BL       isdigit
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD002             BEQ.N    ??strtoul_22
   \   000000C2   0xF1BB 0x0B30      SUBS     R11,R11,#+48
   \   000000C6   0xE009             B.N      ??strtoul_23
   \                     ??strtoul_22:
   \   000000C8   0x4658             MOV      R0,R11
   \   000000CA   0x.... 0x....      BL       isupper
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD002             BEQ.N    ??strtoul_24
   \   000000D2   0xF1BB 0x0B37      SUBS     R11,R11,#+55
   \   000000D6   0xE001             B.N      ??strtoul_23
   \                     ??strtoul_24:
   \   000000D8   0xF1BB 0x0B57      SUBS     R11,R11,#+87
   \                     ??strtoul_23:
   \   000000DC   0x45B3             CMP      R11,R6
   \   000000DE   0xDB02             BLT.N    ??strtoul_25
   \   000000E0   0xF05F 0x0801      MOVS     R8,#+1
   \   000000E4   0xE7DC             B.N      ??strtoul_17
   \                     ??strtoul_25:
   \   000000E6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000EA   0xD0C9             BEQ.N    ??strtoul_15
   \   000000EC   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000F0   0xEBB0 0x070B      SUBS     R7,R0,R11
   \   000000F4   0xE7C6             B.N      ??strtoul_16
    211              else
    212              {
    213                  return rvalue;
   \                     ??strtoul_20:
   \   000000F6   0x0038             MOVS     R0,R7
   \                     ??strtoul_3:
   \   000000F8   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    214              }
    215          }
    216          
    217          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    218          int
    219          strlen (const char *str)
    220          {
    221              char *s = (char *)str;
    222              int len = 0;
   \                     strlen:
   \   00000000   0x2100             MOVS     R1,#+0
    223          
    224              if (s == NULL)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD102             BNE.N    ??strlen_0
    225                  return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE006             B.N      ??strlen_1
    226          
    227              while (*s++ != '\0')
    228                  ++len;
   \                     ??strlen_2:
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \                     ??strlen_0:
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0x1C50             ADDS     R0,R2,#+1
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD1F9             BNE.N    ??strlen_2
    229          
    230              return len;
   \   00000016   0x0008             MOVS     R0,R1
   \                     ??strlen_1:
   \   00000018   0x4770             BX       LR               ;; return
    231          }
    232          
    233          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    234          char *
    235          strcat (char *dest, const char *src)
    236          {
   \                     strcat:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    237              char *dp;
    238              char *sp = (char *)src;
   \   00000004   0x000D             MOVS     R5,R1
    239          
    240              if ((dest != NULL) && (src != NULL))
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00F             BEQ.N    ??strcat_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD00D             BEQ.N    ??strcat_0
    241              {
    242                  dp = &dest[strlen(dest)];
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x1900             ADDS     R0,R0,R4
   \   00000016   0xE003             B.N      ??strcat_1
    243          
    244                  while (*sp != '\0')
    245                  {
    246                      *dp++ = *sp++;
   \                     ??strcat_2:
   \   00000018   0x7829             LDRB     R1,[R5, #+0]
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
    247                  }
   \                     ??strcat_1:
   \   00000020   0x7829             LDRB     R1,[R5, #+0]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD1F8             BNE.N    ??strcat_2
    248                  *dp = '\0';
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    249              }
    250              return dest;
   \                     ??strcat_0:
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    251          }
    252          
    253          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          char *
    255          strncat (char *dest, const char *src, int n)
    256          {
   \                     strncat:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    257              char *dp;
    258              char *sp = (char *)src;
   \   00000006   0x000E             MOVS     R6,R1
    259          
    260              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD015             BEQ.N    ??strncat_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD013             BEQ.N    ??strncat_0
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xDB11             BLT.N    ??strncat_0
    261              {
    262                  dp = &dest[strlen(dest)];
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x1900             ADDS     R0,R0,R4
   \   0000001C   0xE003             B.N      ??strncat_1
    263          
    264                  while ((*sp != '\0') && (n-- > 0))
    265                  {
    266                      *dp++ = *sp++;
   \                     ??strncat_2:
   \   0000001E   0x7831             LDRB     R1,[R6, #+0]
   \   00000020   0x7001             STRB     R1,[R0, #+0]
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0x1C40             ADDS     R0,R0,#+1
    267                  }
   \                     ??strncat_1:
   \   00000026   0x7831             LDRB     R1,[R6, #+0]
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD003             BEQ.N    ??strncat_3
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x1E4D             SUBS     R5,R1,#+1
   \   00000030   0x2901             CMP      R1,#+1
   \   00000032   0xDAF4             BGE.N    ??strncat_2
    268                  *dp = '\0';
   \                     ??strncat_3:
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x7001             STRB     R1,[R0, #+0]
    269              }
    270              return dest;
   \                     ??strncat_0:
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    271          }
    272          
    273          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          char *
    275          strcpy (char *dest, const char *src)
    276          {
    277              char *dp = (char *)dest;
   \                     strcpy:
   \   00000000   0x0002             MOVS     R2,R0
    278              char *sp = (char *)src;
   \   00000002   0x000B             MOVS     R3,R1
    279          
    280              if ((dest != NULL) && (src != NULL))
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD00B             BEQ.N    ??strcpy_0
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD009             BEQ.N    ??strcpy_0
   \   0000000C   0xE003             B.N      ??strcpy_1
    281              {
    282                  while (*sp != '\0')
    283                  {
    284                      *dp++ = *sp++;
   \                     ??strcpy_2:
   \   0000000E   0x7819             LDRB     R1,[R3, #+0]
   \   00000010   0x7011             STRB     R1,[R2, #+0]
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
   \   00000014   0x1C52             ADDS     R2,R2,#+1
    285                  }
   \                     ??strcpy_1:
   \   00000016   0x7819             LDRB     R1,[R3, #+0]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD1F8             BNE.N    ??strcpy_2
    286                  *dp = '\0';
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7011             STRB     R1,[R2, #+0]
    287              }
    288              return dest;
   \                     ??strcpy_0:
   \   00000020   0x4770             BX       LR               ;; return
    289          }
    290          
    291          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    292          char *
    293          strncpy (char *dest, const char *src, int n)
    294          {
   \                     strncpy:
   \   00000000   0xB410             PUSH     {R4}
    295              char *dp = (char *)dest;
   \   00000002   0x0003             MOVS     R3,R0
    296              char *sp = (char *)src;
   \   00000004   0x000C             MOVS     R4,R1
    297          
    298              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD011             BEQ.N    ??strncpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD00F             BEQ.N    ??strncpy_0
   \   0000000E   0x2A01             CMP      R2,#+1
   \   00000010   0xDB0D             BLT.N    ??strncpy_0
   \   00000012   0xE003             B.N      ??strncpy_1
    299              {
    300                  while ((*sp != '\0') && (n-- > 0))
    301                  {
    302                      *dp++ = *sp++;
   \                     ??strncpy_2:
   \   00000014   0x7821             LDRB     R1,[R4, #+0]
   \   00000016   0x7019             STRB     R1,[R3, #+0]
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \   0000001A   0x1C5B             ADDS     R3,R3,#+1
    303                  }
   \                     ??strncpy_1:
   \   0000001C   0x7821             LDRB     R1,[R4, #+0]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD003             BEQ.N    ??strncpy_3
   \   00000022   0x0011             MOVS     R1,R2
   \   00000024   0x1E4A             SUBS     R2,R1,#+1
   \   00000026   0x2901             CMP      R1,#+1
   \   00000028   0xDAF4             BGE.N    ??strncpy_2
    304                  *dp = '\0';
   \                     ??strncpy_3:
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x7019             STRB     R1,[R3, #+0]
    305              }
    306              return dest;
   \                     ??strncpy_0:
   \   0000002E   0xBC10             POP      {R4}
   \   00000030   0x4770             BX       LR               ;; return
    307          }
    308          
    309          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          int
    311          strcmp (const char *s1, const char *s2)
    312          {
    313              /* No checks for NULL */
    314              char *s1p = (char *)s1;
    315              char *s2p = (char *)s2;
   \                     strcmp:
   \   00000000   0xE001             B.N      ??strcmp_0
    316          
    317              while (*s2p != '\0')
    318              {
    319                  if (*s1p != *s2p)
    320                      break;
    321          
    322                  ++s1p;
   \                     ??strcmp_1:
   \   00000002   0x1C40             ADDS     R0,R0,#+1
    323                  ++s2p;
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \                     ??strcmp_0:
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD003             BEQ.N    ??strcmp_2
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0x780B             LDRB     R3,[R1, #+0]
   \   00000010   0x429A             CMP      R2,R3
   \   00000012   0xD0F6             BEQ.N    ??strcmp_1
    324              }
    325              return (*s1p - *s2p);
   \                     ??strcmp_2:
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x7809             LDRB     R1,[R1, #+0]
   \   00000018   0x1A40             SUBS     R0,R0,R1
   \   0000001A   0x4770             BX       LR               ;; return
    326          }
    327          
    328          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          int
    330          strncmp (const char *s1, const char *s2, int n)
    331          {
   \                     strncmp:
   \   00000000   0xB410             PUSH     {R4}
    332              /* No checks for NULL */
    333              char *s1p = (char *)s1;
    334              char *s2p = (char *)s2;
    335          
    336              if (n <= 0)
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xDA03             BGE.N    ??strncmp_0
    337                  return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE00E             B.N      ??strncmp_1
    338          
    339              while (*s2p != '\0')
    340              {
    341                  if (*s1p != *s2p)
    342                      break;
    343          
    344                  if (--n == 0)
    345                      break;
    346          
    347                  ++s1p;
   \                     ??strncmp_2:
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
    348                  ++s2p;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??strncmp_0:
   \   0000000E   0x780B             LDRB     R3,[R1, #+0]
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD006             BEQ.N    ??strncmp_3
   \   00000014   0x7803             LDRB     R3,[R0, #+0]
   \   00000016   0x780C             LDRB     R4,[R1, #+0]
   \   00000018   0x42A3             CMP      R3,R4
   \   0000001A   0xD102             BNE.N    ??strncmp_3
   \                     ??strncmp_4:
   \   0000001C   0x1E52             SUBS     R2,R2,#+1
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD1F3             BNE.N    ??strncmp_2
    349              }
    350              return (*s1p - *s2p);
   \                     ??strncmp_3:
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x7809             LDRB     R1,[R1, #+0]
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \                     ??strncmp_1:
   \   00000028   0xBC10             POP      {R4}
   \   0000002A   0x4770             BX       LR               ;; return
    351          }
    352          
    353          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    354          void *
    355          memcpy (void *dest, const void *src, unsigned n)
    356          {
   \                     memcpy:
   \   00000000   0xB430             PUSH     {R4,R5}
    357              int longs, bytes;
    358              uint32 *dpl = (uint32 *)dest;
   \   00000002   0x0004             MOVS     R4,R0
    359              uint32 *spl = (uint32 *)src;
   \   00000004   0x000D             MOVS     R5,R1
    360              uint8  *dpb, *spb;
    361          
    362              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD019             BEQ.N    ??memcpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD017             BEQ.N    ??memcpy_0
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD015             BEQ.N    ??memcpy_0
    363              {
    364                  bytes = (n & 0x3);
   \   00000012   0xF012 0x0303      ANDS     R3,R2,#0x3
    365                  longs = (n - bytes) >> 2;
   \   00000016   0x1AD1             SUBS     R1,R2,R3
   \   00000018   0x0889             LSRS     R1,R1,#+2
   \   0000001A   0xE003             B.N      ??memcpy_1
    366              
    367                  while (longs--)
    368                      *dpl++ = *spl++;
   \                     ??memcpy_2:
   \   0000001C   0x682A             LDR      R2,[R5, #+0]
   \   0000001E   0x6022             STR      R2,[R4, #+0]
   \   00000020   0x1D2D             ADDS     R5,R5,#+4
   \   00000022   0x1D24             ADDS     R4,R4,#+4
   \                     ??memcpy_1:
   \   00000024   0x000A             MOVS     R2,R1
   \   00000026   0x1E51             SUBS     R1,R2,#+1
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD1F7             BNE.N    ??memcpy_2
    369                  
    370                  dpb = (uint8 *)dpl;
    371                  spb = (uint8 *)spl;
   \   0000002C   0xE003             B.N      ??memcpy_3
    372                  
    373                  while (bytes--)
    374                      *dpb++ = *spb++;
   \                     ??memcpy_4:
   \   0000002E   0x7829             LDRB     R1,[R5, #+0]
   \   00000030   0x7021             STRB     R1,[R4, #+0]
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \                     ??memcpy_3:
   \   00000036   0x0019             MOVS     R1,R3
   \   00000038   0x1E4B             SUBS     R3,R1,#+1
   \   0000003A   0x2900             CMP      R1,#+0
   \   0000003C   0xD1F7             BNE.N    ??memcpy_4
    375              }
    376              return dest;
   \                     ??memcpy_0:
   \   0000003E   0xBC30             POP      {R4,R5}
   \   00000040   0x4770             BX       LR               ;; return
    377          }
    378          
    379          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    380          void *
    381          memset (void *s, int c, unsigned n)
    382          {
   \                     memset:
   \   00000000   0xB410             PUSH     {R4}
    383              /* Not optimized, but very portable */
    384              unsigned char *sp = (unsigned char *)s;
   \   00000002   0x0003             MOVS     R3,R0
    385          
    386              if ((s != NULL) && (n > 0))
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD008             BEQ.N    ??memset_0
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD102             BNE.N    ??memset_1
   \   0000000C   0xE005             B.N      ??memset_0
    387              {
    388                  while (n--)
    389                  {
    390                      *sp++ = (unsigned char)c;
   \                     ??memset_2:
   \   0000000E   0x7019             STRB     R1,[R3, #+0]
   \   00000010   0x1C5B             ADDS     R3,R3,#+1
    391                  }
   \                     ??memset_1:
   \   00000012   0x0014             MOVS     R4,R2
   \   00000014   0x1E62             SUBS     R2,R4,#+1
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD1F9             BNE.N    ??memset_2
    392              }
    393              return s;
   \                     ??memset_0:
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
    394          }
    395          
    396          /****************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  isalnum
        0  isdigit
        0  isspace
        0  isupper
        8  memcpy
        4  memset
        4  strcasecmp
       16  strcat
             16 -> strlen
        0  strcmp
        0  strcpy
        0  strlen
       12  strncasecmp
       16  strncat
             16 -> strlen
        4  strncmp
        4  strncpy
       40  strtoul
             40 -> isalnum
             40 -> isdigit
             40 -> isspace
             40 -> isupper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  isalnum
      14  isdigit
      16  isspace
      14  isupper
      66  memcpy
      30  memset
      68  strcasecmp
      46  strcat
      28  strcmp
      34  strcpy
      26  strlen
      74  strncasecmp
      60  strncat
      44  strncmp
      50  strncpy
     252  strtoul

 
 852 bytes in section .text
 
 852 bytes of CODE memory

Errors: none
Warnings: none
