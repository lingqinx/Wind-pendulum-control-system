###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:55:24 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\common\startup.c                               #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\common\startup.c -lCN                          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\gpio_demo\..\ -I                   #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\common\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\cpu\ -I                  #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\gpio\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\wdog\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\mcg\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\uart\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\lptmr\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\fun\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\led\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\i2c\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\MMA845x\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\motor\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\pit\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\steer\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ftm\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\DIPswitch\ -I    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\dma\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\platforms\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\ -I             #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\gpio_demo\ -Ol  #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\startup.lst               #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\startup.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\common\startup.c
      1          /******************** (C) COPYRIGHT 2011 野火嵌入式开发工作室 ********************
      2           * 文件名       ：startup.c
      3           * 描述         ：kinetis的启动代码，把中断向量表、初始化数据、以__ramfunc声明的子函数复制到RAM区
      4           *          
      5           * 实验平台     ：野火kinetis开发板
      6           * 库版本       ：
      7           * 
      8           * 作者         ：飞思卡尔公司
      9           * 淘宝店       ：http://firestm32.taobao.com
     10           * 技术支持论坛 ：http://www.ourdev.cn/bbs/bbs_list.jsp?bbs_id=1008   
     11          **********************************************************************************/	
     12          
     13          #include "common.h"
     14          
     15          #if (defined(IAR))
     16          	#pragma section = ".data"
     17          	#pragma section = ".data_init"
     18          	#pragma section = ".bss"
     19          	#pragma section = "CodeRelocate"
     20          	#pragma section = "CodeRelocateRam"
     21          #endif
     22          
     23          /********************************************************************/
     24          //复制中断向量表、初始化数据、以__ramfunc声明的子函数复制到RAM区(对flash操作的函数必须这样)

   \                                 In section .text, align 4, keep-with-next
     25          void
     26          common_startup(void)
     27          {
   \                     common_startup:
   \   00000000   0xB580             PUSH     {R7,LR}
     28          
     29          #if (defined(CW))	
     30              extern char __START_BSS[];
     31              extern char __END_BSS[];
     32              extern uint32 __DATA_ROM[];
     33              extern uint32 __DATA_RAM[];
     34              extern char __DATA_END[];
     35          #endif
     36          
     37              /* Declare a counter we'll use in all of the copy loops */
     38              uint32 n;
     39          
     40              /* Declare pointers for various data sections. These pointers
     41               * are initialized using values pulled in from the linker file
     42               */
     43              uint8 * data_ram, * data_rom, * data_rom_end;
     44              uint8 * bss_start, * bss_end;
     45          
     46          
     47              /* 这两个数组的地址 在  链接器Linker文件，即ICF文件 定义       */
     48              /* 这两个全局变量在上面.icf文件里可以找到，里面定义了它们的地址*/  
     49              extern uint32 __VECTOR_TABLE[];
     50              extern uint32 __VECTOR_RAM[];
     51          
     52              /* 检测是否需要 复制中断向量表                            */
     53              /*如果它们地址不一样，则复制flash内的向量表到RAM区得向量表*/
     54              if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000002   0x481C             LDR.N    R0,??common_startup_0
   \   00000004   0x491C             LDR.N    R1,??common_startup_0+0x4
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD00B             BEQ.N    ??common_startup_1
     55              {
     56                  for (n = 0; n < 0x410; n++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE006             B.N      ??common_startup_2
     57                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \                     ??common_startup_3:
   \   0000000E   0x4919             LDR.N    R1,??common_startup_0
   \   00000010   0x4A19             LDR.N    R2,??common_startup_0+0x4
   \   00000012   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \                     ??common_startup_2:
   \   0000001C   0xF5B0 0x6F82      CMP      R0,#+1040
   \   00000020   0xD3F5             BCC.N    ??common_startup_3
     58              }
     59          
     60              /* 把 中断向量表地址 重新指向 RAM 里的 中断向量表 */
     61              write_vtor((uint32)__VECTOR_RAM);  
   \                     ??common_startup_1:
   \   00000022   0x4814             LDR.N    R0,??common_startup_0
   \   00000024   0x.... 0x....      BL       write_vtor
     62              
     63                
     64              
     65              /*获取初始化数据地址*/
     66              #if (defined(CW))
     67                  data_ram = (uint8 *)__DATA_RAM;
     68          	data_rom = (uint8 *)__DATA_ROM; 
     69                  data_rom_end  = (uint8 *)__DATA_END; /* This is actually a RAM address in CodeWarrior */
     70                  n = data_rom_end - data_ram;
     71              #elif (defined(IAR))
     72                  data_ram = __section_begin(".data");
   \   00000028   0x4914             LDR.N    R1,??common_startup_0+0x8
     73                  data_rom = __section_begin(".data_init");
   \   0000002A   0x4A15             LDR.N    R2,??common_startup_0+0xC
     74                  data_rom_end = __section_end(".data_init");
   \   0000002C   0x4815             LDR.N    R0,??common_startup_0+0x10
     75                  n = data_rom_end - data_rom;
   \   0000002E   0x1A80             SUBS     R0,R0,R2
   \   00000030   0xE003             B.N      ??common_startup_4
     76              #endif		
     77          		
     78          	/* 复制初始化数据 */
     79          	while (n--)
     80          		*data_ram++ = *data_rom++;
   \                     ??common_startup_5:
   \   00000032   0x7813             LDRB     R3,[R2, #+0]
   \   00000034   0x700B             STRB     R3,[R1, #+0]
   \   00000036   0x1C52             ADDS     R2,R2,#+1
   \   00000038   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_4:
   \   0000003A   0x0003             MOVS     R3,R0
   \   0000003C   0x1E58             SUBS     R0,R3,#+1
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xD1F7             BNE.N    ??common_startup_5
     81          	
     82          	
     83                /* 获取 .bss 段的地址 (初始化数据为0) */
     84                #if (defined(CW))
     85                        bss_start = (uint8 *)__START_BSS;
     86                        bss_end = (uint8 *)__END_BSS;
     87                #elif (defined(IAR))
     88                        bss_start = __section_begin(".bss");
   \   00000042   0x4911             LDR.N    R1,??common_startup_0+0x14
     89                        bss_end = __section_end(".bss");
   \   00000044   0x4811             LDR.N    R0,??common_startup_0+0x18
     90                #endif
     91                        
     92          
     93                /* 清除初始化为0的数据段 */
     94                n = bss_end - bss_start;
   \   00000046   0x1A40             SUBS     R0,R0,R1
   \   00000048   0xE002             B.N      ??common_startup_6
     95                while(n--)
     96                  *bss_start++ = 0;
   \                     ??common_startup_7:
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x700A             STRB     R2,[R1, #+0]
   \   0000004E   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_6:
   \   00000050   0x0002             MOVS     R2,R0
   \   00000052   0x1E50             SUBS     R0,R2,#+1
   \   00000054   0x2A00             CMP      R2,#+0
   \   00000056   0xD1F8             BNE.N    ??common_startup_7
     97          
     98                /* 把以__ramfunc声明的子函数复制到RAM区	 */
     99                #if (defined(IAR))
    100                    uint8* code_relocate_ram  = __section_begin("CodeRelocateRam");
   \   00000058   0x490D             LDR.N    R1,??common_startup_0+0x1C
    101                    uint8* code_relocate      = __section_begin("CodeRelocate");
   \   0000005A   0x4A0E             LDR.N    R2,??common_startup_0+0x20
    102                    uint8* code_relocate_end  = __section_end("CodeRelocate");
   \   0000005C   0x480E             LDR.N    R0,??common_startup_0+0x24
    103          
    104                    /* Copy functions from ROM to RAM */
    105                    n = code_relocate_end - code_relocate;
   \   0000005E   0x1A80             SUBS     R0,R0,R2
   \   00000060   0xE003             B.N      ??common_startup_8
    106                    while (n--)
    107                            *code_relocate_ram++ = *code_relocate++;
   \                     ??common_startup_9:
   \   00000062   0x7813             LDRB     R3,[R2, #+0]
   \   00000064   0x700B             STRB     R3,[R1, #+0]
   \   00000066   0x1C52             ADDS     R2,R2,#+1
   \   00000068   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_8:
   \   0000006A   0x0003             MOVS     R3,R0
   \   0000006C   0x1E58             SUBS     R0,R3,#+1
   \   0000006E   0x2B00             CMP      R3,#+0
   \   00000070   0xD1F7             BNE.N    ??common_startup_9
    108                #endif
    109          }
   \   00000072   0xBD01             POP      {R0,PC}          ;; return
   \                     ??common_startup_0:
   \   00000074   0x........         DC32     __VECTOR_RAM
   \   00000078   0x........         DC32     __VECTOR_TABLE
   \   0000007C   0x........         DC32     SFB(`.data`)
   \   00000080   0x........         DC32     SFB(`.data_init`)
   \   00000084   0x........         DC32     SFE(`.data_init`)
   \   00000088   0x........         DC32     SFB(`.bss`)
   \   0000008C   0x........         DC32     SFE(`.bss`)
   \   00000090   0x........         DC32     SFB(CodeRelocateRam)
   \   00000094   0x........         DC32     SFB(CodeRelocate)
   \   00000098   0x........         DC32     SFE(CodeRelocate)
    110          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  common_startup
             8 -> write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     156  common_startup

 
 156 bytes in section .text
 
 156 bytes of CODE memory

Errors: none
Warnings: none
