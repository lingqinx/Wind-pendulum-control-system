###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:55:20 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\i2c\i2c.c                              #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\i2c\i2c.c -lCN                         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\gpio_demo\..\ -I                   #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\common\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\cpu\ -I                  #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\gpio\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\wdog\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\mcg\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\uart\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\lptmr\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\fun\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\led\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\i2c\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\MMA845x\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\motor\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\pit\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\steer\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ftm\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\DIPswitch\ -I    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\dma\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\platforms\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\ -I             #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\gpio_demo\ -Ol  #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\i2c.lst                   #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\i2c.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\drivers\i2c\i2c.c
      1          /******************** (C) COPYRIGHT 2011 野火嵌入式开发工作室 ********************
      2           * 文件名       ：i2c.c
      3           * 描述         ：i2c驱动函数
      4           * 备注         ：修改自官方例程
      5           *
      6           * 实验平台     ：野火kinetis开发板
      7           * 库版本       ：
      8           * 嵌入系统     ：
      9           *
     10           * 作者         ：
     11           * 淘宝店       ：http://firestm32.taobao.com
     12           * 技术支持论坛 ：http://www.ourdev.cn/bbs/bbs_list.jsp?bbs_id=1008
     13          **********************************************************************************/	
     14          
     15          
     16          #include "common.h"
     17          #include "i2c.h"
     18          
     19          

   \                                 In section .bss, align 1
     20          unsigned char MasterTransmission;
   \                     MasterTransmission:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     21          unsigned char SlaveID;
   \                     SlaveID:
   \   00000000                      DS8 1
     22          

   \                                 In section .data, align 4
     23          volatile struct I2C_MemMap *I2Cx[2]={I2C0_BASE_PTR,I2C1_BASE_PTR}; //定义两个指针数组保存 I2Cx 的地址
   \                     I2Cx:
   \   00000000   0x40066000         DC32 40066000H, 40067000H
   \              0x40067000   
     24          
     25          
     26          /*************************************************************************
     27          *                             野火嵌入式开发工作室
     28          *
     29          *  函数名称：I2C_init
     30          *  功能说明：I2C初始化，设置波特率和启动I2C
     31          *  参数说明：I2Cn        模块号（I2C0、I2C1）
     32          *  函数返回：无
     33          *  修改时间：2012-1-20
     34          *  备    注：
     35          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          void I2C_init(I2Cn i2cn)
     37          {
     38            u8 mult;
     39            if(bus_clk_khz<=50000)mult=0;             //bus 一分频
   \                     I2C_init:
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF24C 0x3251      MOVW     R2,#+50001
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD201             BCS.N    ??I2C_init_0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xE007             B.N      ??I2C_init_1
     40            else  if(bus_clk_khz<=100000)mult=1;      //bus 二分频
   \                     ??I2C_init_0:
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x....             LDR.N    R2,??DataTable4_1  ;; 0x186a1
   \   00000016   0x4291             CMP      R1,R2
   \   00000018   0xD201             BCS.N    ??I2C_init_2
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0xE000             B.N      ??I2C_init_1
     41            else      mult=2;                         //bus 四分频
   \                     ??I2C_init_2:
   \   0000001E   0x2102             MOVS     R1,#+2
     42          
     43              if(i2cn==I2C0)
   \                     ??I2C_init_1:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD10E             BNE.N    ??I2C_init_3
     44              {
     45                  /* 开启时钟 */
     46                  SIM_SCGC4 |= SIM_SCGC4_I2C0_MASK;         //开启 I2C0时钟
   \   00000026   0x....             LDR.N    R2,??DataTable4_2  ;; 0x40048034
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xF052 0x0240      ORRS     R2,R2,#0x40
   \   0000002E   0x....             LDR.N    R3,??DataTable4_2  ;; 0x40048034
   \   00000030   0x601A             STR      R2,[R3, #+0]
     47          
     48                  /* 配置 I2C0功能的 GPIO 接口 */
     49                  if(I2C0_SCL==PTB0)
     50                      PORTB_PCR0 = PORT_PCR_MUX(2);
   \   00000032   0x....             LDR.N    R2,??DataTable4_3  ;; 0x4004a000
   \   00000034   0xF44F 0x7300      MOV      R3,#+512
   \   00000038   0x6013             STR      R3,[R2, #+0]
     51                   else if(I2C0_SCL==PTB2)
     52                      PORTB_PCR2 = PORT_PCR_MUX(2);
     53          #if K60PIN == 144u
     54                   else if(I2C0_SCL==PTD8)
     55                      PORTD_PCR8 = (PORT_PCR_MUX(2)|0x03);
     56          #endif
     57                   else
     58                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     59          
     60                  if(I2C0_SDA==PTB1)
     61                      PORTB_PCR1 = PORT_PCR_MUX(2);
   \   0000003A   0x....             LDR.N    R2,??DataTable4_4  ;; 0x4004a004
   \   0000003C   0xF44F 0x7300      MOV      R3,#+512
   \   00000040   0x6013             STR      R3,[R2, #+0]
   \   00000042   0xE00D             B.N      ??I2C_init_4
     62                   else if(I2C0_SDA==PTB3)
     63                      PORTB_PCR3 = PORT_PCR_MUX(2);
     64          #if K60PIN == 144u
     65                   else if(I2C0_SDA==PTD9)
     66                      PORTD_PCR9 = (PORT_PCR_MUX(2)|0x02);
     67          #endif
     68                   else
     69                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     70              }
     71              else
     72              {
     73                  /* 开启时钟 */
     74                  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;         //开启 I2C1时钟
   \                     ??I2C_init_3:
   \   00000044   0x....             LDR.N    R2,??DataTable4_2  ;; 0x40048034
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000004C   0x....             LDR.N    R3,??DataTable4_2  ;; 0x40048034
   \   0000004E   0x601A             STR      R2,[R3, #+0]
     75          
     76                  /* 配置 I2C1功能的 GPIO 接口 */
     77                  if(I2C1_SCL==PTE1)
     78                      PORTE_PCR1 = PORT_PCR_MUX(6);
     79                  else if(I2C1_SCL==PTC10)
     80                      PORTC_PCR10 = PORT_PCR_MUX(2);
   \   00000050   0x....             LDR.N    R2,??DataTable4_5  ;; 0x4004b028
   \   00000052   0xF44F 0x7300      MOV      R3,#+512
   \   00000056   0x6013             STR      R3,[R2, #+0]
     81                   else
     82                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     83          
     84                  if(I2C1_SDA==PTE0)
     85                      PORTE_PCR0 = PORT_PCR_MUX(6);
     86                  else if (I2C1_SDA==PTC11)
     87                      PORTC_PCR11 = PORT_PCR_MUX(2);
   \   00000058   0x....             LDR.N    R2,??DataTable4_6  ;; 0x4004b02c
   \   0000005A   0xF44F 0x7300      MOV      R3,#+512
   \   0000005E   0x6013             STR      R3,[R2, #+0]
     88                  else
     89                      assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     90          
     91              }
     92          
     93              /* 设置频率 */
     94          #ifdef SCCB
     95              mult = 1;
     96              I2C_F_REG(I2Cx[i2cn])  = I2C_F_MULT(mult) | I2C_F_ICR(0x3F) ; 
     97          #else
     98              I2C_F_REG(I2Cx[i2cn])  = I2C_F_MULT(mult) | I2C_F_ICR(0x17) ; 
   \                     ??I2C_init_4:
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x....             LDR.N    R2,??DataTable4_7
   \   00000064   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000068   0x0189             LSLS     R1,R1,#+6
   \   0000006A   0xF051 0x0117      ORRS     R1,R1,#0x17
   \   0000006E   0x7051             STRB     R1,[R2, #+1]
     99          #endif
    100             // I2C_F_REG(I2Cx[i2cn])  = 0x14;  
    101              // I2C Frequency Divider register (I2Cx_F)  I2C分频寄存器   I2C最大波特率为 400k
    102              
    103              // MULT=00  即  mul = 1
    104              // ICR =14  ICR为Clock rate时钟频率
    105              // 从《k16 reference manual.pdf》P1460 可得：
    106              // ICR    SCL Divider   SDA Hold Value    SCL Hold (Start) Value    SCL Hold (Stop) Value
    107              //  14        80              17                   34                         41
    108              //  17       128              21                   58                         65
    109              // I2C baud rate = bus speed (Hz)/(mul × SCL divider)  即这里 50MHz/(1 ×128)=390.625kHz
    110              // SDA hold time = bus period (s) × mul × SDA hold value
    111              // SCL start hold time = bus period (s) × mul × SCL start hold value
    112              // SCL stop hold time = bus period (s) × mul × SCL stop hold value
    113          
    114              /* 使能 IIC1 */
    115              I2C_C1_REG(I2Cx[i2cn]) = I2C_C1_IICEN_MASK;
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x....             LDR.N    R1,??DataTable4_7
   \   00000074   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000078   0x2180             MOVS     R1,#+128
   \   0000007A   0x7081             STRB     R1,[R0, #+2]
    116          }
   \   0000007C   0x4770             BX       LR               ;; return
    117          
    118          /*************************************************************************
    119          *                             野火嵌入式开发工作室
    120          *
    121          *  函数名称：I2C_StartTransmission
    122          *  功能说明：启动 I2C 传输
    123          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    124          *            SlaveID     7位从机地址
    125          *            MSmode      读写模式（ MWSR 或 MRSW ）
    126          *  函数返回：无
    127          *  修改时间：2012-1-20
    128          *  备    注：
    129          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          void I2C_StartTransmission (I2Cn i2cn,u8 SlaveID,MSmode Mode)
    131          {
    132          
    133              //ASSERT(Mode == MWSR || Mode == MRSW);         //使用断言，检测 Mode 是否为 读 或 写
    134          
    135              SlaveID =( SlaveID << 1 ) | Mode ;             //确定写地址和读地址
   \                     I2C_StartTransmission:
   \   00000000   0xEA52 0x0141      ORRS     R1,R2,R1, LSL #+1
    136          
    137              /* send start signal */
    138              i2c_Start(i2cn);
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x....             LDR.N    R2,??DataTable4_7
   \   00000008   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000C   0x7892             LDRB     R2,[R2, #+2]
   \   0000000E   0xF052 0x0210      ORRS     R2,R2,#0x10
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x....             LDR.N    R3,??DataTable4_7
   \   00000016   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000001A   0x709A             STRB     R2,[R3, #+2]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x....             LDR.N    R2,??DataTable4_7
   \   00000020   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000024   0x7892             LDRB     R2,[R2, #+2]
   \   00000026   0xF052 0x0220      ORRS     R2,R2,#0x20
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x....             LDR.N    R3,??DataTable4_7
   \   0000002E   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000032   0x709A             STRB     R2,[R3, #+2]
    139          
    140              /* send ID with W/R bit */
    141              i2c_write_byte(i2cn,SlaveID);
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x....             LDR.N    R2,??DataTable4_7
   \   00000038   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000003C   0x7101             STRB     R1,[R0, #+4]
    142          }
   \   0000003E   0x4770             BX       LR               ;; return
    143          
    144          /*************************************************************************
    145          *                             野火嵌入式开发工作室
    146          *
    147          *  函数名称：Pause
    148          *  功能说明：延时，I2C读写后，需要延时一下
    149          *  参数说明：无
    150          *  函数返回：无
    151          *  修改时间：2012-1-20
    152          *  备    注：在官方基础上增大延时数
    153          *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    154          void Pause(void){
    155              u16 n;
    156              for(n=1;n<core_clk_mhz/2;n++) {          //注意，这个数据太小，会导致读取错误。2us
   \                     Pause:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xE001             B.N      ??Pause_0
    157                  asm("nop");
   \                     ??Pause_1:
   \   00000004   0xBF00             nop              
    158              }
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \                     ??Pause_0:
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x....             LDR.N    R1,??DataTable4_8
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0xEBB0 0x0F51      CMP      R0,R1, LSR #+1
   \   00000012   0xD3F7             BCC.N    ??Pause_1
    159          }
   \   00000014   0x4770             BX       LR               ;; return
    160          
    161          /*************************************************************************
    162          *                             野火嵌入式开发工作室
    163          *
    164          *  函数名称：I2C_ReadAddr
    165          *  功能说明：读取I2C设备指定地址寄存器的数据
    166          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    167          *            SlaveID     7位从机地址
    168          *            Addr        从机的寄存器地址
    169          *  函数返回：从机寄存器的数据
    170          *  修改时间：2012-1-20
    171          *  备    注：转换时大约是0.11ms
    172          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    173          u8 I2C_ReadAddr(I2Cn i2cn,u8 SlaveID,u8 Addr)
    174          {
   \                     I2C_ReadAddr:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    175              u8 result;
    176          
    177              /* Send Slave Address */
    178              I2C_StartTransmission (i2cn,SlaveID,MWSR);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       I2C_StartTransmission
    179              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_0:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable4_7
   \   0000001A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0xD5F8             BPL.N    ??I2C_ReadAddr_0
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable4_7
   \   00000028   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000002E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x....             LDR.N    R1,??DataTable4_7
   \   00000036   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000003A   0x70C8             STRB     R0,[R1, #+3]
    180          
    181              /* Write Register Address */
    182              i2c_write_byte(i2cn,Addr);
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x....             LDR.N    R0,??DataTable4_7
   \   00000040   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000044   0x7106             STRB     R6,[R0, #+4]
    183              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_1:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x....             LDR.N    R0,??DataTable4_7
   \   0000004A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000050   0x0780             LSLS     R0,R0,#+30
   \   00000052   0xD5F8             BPL.N    ??I2C_ReadAddr_1
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x....             LDR.N    R0,??DataTable4_7
   \   00000058   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000005E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x....             LDR.N    R1,??DataTable4_7
   \   00000066   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000006A   0x70C8             STRB     R0,[R1, #+3]
    184          #ifdef SCCB  //没有再次发送
    185              I2C_StartTransmission (i2cn,SlaveID,MWSR);
    186              i2c_Wait(i2cn);
    187          #else
    188              /* Do a repeated start */
    189              i2c_RepeatedStart(i2cn);
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable4_7
   \   00000070   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000074   0x7880             LDRB     R0,[R0, #+2]
   \   00000076   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000007A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   0x....             LDR.N    R1,??DataTable4_7
   \   0000007E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000082   0x7088             STRB     R0,[R1, #+2]
    190              //I2C0_C1 |= I2C_C1_RSTA_MASK;
    191          #endif
    192              /* Send Slave Address */
    193              i2c_write_byte(i2cn,( SlaveID << 1) | MRSW );
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x....             LDR.N    R0,??DataTable4_7
   \   00000088   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000008C   0x0069             LSLS     R1,R5,#+1
   \   0000008E   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000092   0x7101             STRB     R1,[R0, #+4]
    194              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_2:
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0x....             LDR.N    R0,??DataTable4_7
   \   00000098   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000009C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000009E   0x0780             LSLS     R0,R0,#+30
   \   000000A0   0xD5F8             BPL.N    ??I2C_ReadAddr_2
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0x....             LDR.N    R0,??DataTable4_7
   \   000000A6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000AA   0x78C0             LDRB     R0,[R0, #+3]
   \   000000AC   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B2   0x....             LDR.N    R1,??DataTable4_7
   \   000000B4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B8   0x70C8             STRB     R0,[R1, #+3]
    195          
    196              /* Put in Rx Mode */
    197              i2c_PutinRxMode(i2cn);
   \   000000BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BC   0x....             LDR.N    R0,??DataTable4_7
   \   000000BE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000C2   0x7880             LDRB     R0,[R0, #+2]
   \   000000C4   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0x....             LDR.N    R1,??DataTable4_7
   \   000000CC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000D0   0x7088             STRB     R0,[R1, #+2]
    198          
    199              /* Turn off ACK since this is second to last byte being read*/
    200              i2c_DisableAck(i2cn); //不应答
   \   000000D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D4   0x....             LDR.N    R0,??DataTable4_7
   \   000000D6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000DA   0x7880             LDRB     R0,[R0, #+2]
   \   000000DC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000E0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E2   0x....             LDR.N    R1,??DataTable4_7
   \   000000E4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000E8   0x7088             STRB     R0,[R1, #+2]
    201          
    202              /* Dummy read 虚假读取*/
    203              result = I2C_D_REG(I2Cx[i2cn])  ;
   \   000000EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EC   0x....             LDR.N    R0,??DataTable4_7
   \   000000EE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F2   0x7905             LDRB     R5,[R0, #+4]
    204              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_3:
   \   000000F4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F6   0x....             LDR.N    R0,??DataTable4_7
   \   000000F8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000FC   0x78C0             LDRB     R0,[R0, #+3]
   \   000000FE   0x0780             LSLS     R0,R0,#+30
   \   00000100   0xD5F8             BPL.N    ??I2C_ReadAddr_3
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x....             LDR.N    R0,??DataTable4_7
   \   00000106   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000010A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000010C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000110   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000112   0x....             LDR.N    R1,??DataTable4_7
   \   00000114   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000118   0x70C8             STRB     R0,[R1, #+3]
    205          
    206              /* Send stop since about to read last byte */
    207              i2c_Stop(i2cn);
   \   0000011A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011C   0x....             LDR.N    R0,??DataTable4_7
   \   0000011E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000122   0x7880             LDRB     R0,[R0, #+2]
   \   00000124   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000128   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012A   0x....             LDR.N    R1,??DataTable4_7
   \   0000012C   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000130   0x7088             STRB     R0,[R1, #+2]
   \   00000132   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000134   0x....             LDR.N    R0,??DataTable4_7
   \   00000136   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000013A   0x7880             LDRB     R0,[R0, #+2]
   \   0000013C   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000140   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000142   0x....             LDR.N    R1,??DataTable4_7
   \   00000144   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000148   0x7088             STRB     R0,[R1, #+2]
    208          
    209              /* Read byte */
    210              result = I2C_D_REG(I2Cx[i2cn])  ;
   \   0000014A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014C   0x....             LDR.N    R0,??DataTable4_7
   \   0000014E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000152   0x7905             LDRB     R5,[R0, #+4]
    211              
    212              Pause();                                        //延时太短的话，可能写出错
   \   00000154   0x.... 0x....      BL       Pause
    213          
    214              return result;
   \   00000158   0x0028             MOVS     R0,R5
   \   0000015A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015C   0xBD70             POP      {R4-R6,PC}       ;; return
    215          }
    216          
    217          
    218          /*************************************************************************
    219          *                             野火嵌入式开发工作室
    220          *
    221          *  函数名称：I2C_WriteAddr
    222          *  功能说明：写入一个字节数据到I2C设备指定寄存器地址
    223          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    224          *            SlaveID     7位从机地址
    225          *            Addr        从机的寄存器地址
    226          *            Data        数据
    227          *  函数返回：无
    228          *  修改时间：2012-1-20
    229          *  备    注：
    230          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          void I2C_WriteAddr(I2Cn i2cn,u8 SlaveID,u8 Addr,u8 Data)
    232          {
   \                     I2C_WriteAddr:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    233              /* send data to slave */
    234              I2C_StartTransmission(i2cn,SlaveID,MWSR);      //启动传输
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       I2C_StartTransmission
    235              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_0:
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable4_7
   \   00000018   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x0780             LSLS     R0,R0,#+30
   \   00000020   0xD5F8             BPL.N    ??I2C_WriteAddr_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x....             LDR.N    R0,??DataTable4_7
   \   00000026   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000002C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x....             LDR.N    R1,??DataTable4_7
   \   00000034   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000038   0x70C8             STRB     R0,[R1, #+3]
    236          
    237              i2c_write_byte(i2cn,Addr);                     //写地址
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x....             LDR.N    R0,??DataTable4_7
   \   0000003E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000042   0x7105             STRB     R5,[R0, #+4]
    238              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_1:
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x....             LDR.N    R0,??DataTable4_7
   \   00000048   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004E   0x0780             LSLS     R0,R0,#+30
   \   00000050   0xD5F8             BPL.N    ??I2C_WriteAddr_1
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x....             LDR.N    R0,??DataTable4_7
   \   00000056   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000005C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x....             LDR.N    R1,??DataTable4_7
   \   00000064   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000068   0x70C8             STRB     R0,[R1, #+3]
    239          
    240              i2c_write_byte(i2cn,Data);                     //写数据
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x....             LDR.N    R0,??DataTable4_7
   \   0000006E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000072   0x7106             STRB     R6,[R0, #+4]
    241              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_2:
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x....             LDR.N    R0,??DataTable4_7
   \   00000078   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000007E   0x0780             LSLS     R0,R0,#+30
   \   00000080   0xD5F8             BPL.N    ??I2C_WriteAddr_2
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x....             LDR.N    R0,??DataTable4_7
   \   00000086   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000008A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x....             LDR.N    R1,??DataTable4_7
   \   00000094   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000098   0x70C8             STRB     R0,[R1, #+3]
    242          
    243              i2c_Stop(i2cn);
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x....             LDR.N    R0,??DataTable4_7
   \   0000009E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000A2   0x7880             LDRB     R0,[R0, #+2]
   \   000000A4   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0x....             LDR.N    R1,??DataTable4_7
   \   000000AC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B0   0x7088             STRB     R0,[R1, #+2]
   \   000000B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B4   0x....             LDR.N    R0,??DataTable4_7
   \   000000B6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000BA   0x7880             LDRB     R0,[R0, #+2]
   \   000000BC   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x....             LDR.N    R1,??DataTable4_7
   \   000000C4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000C8   0x7088             STRB     R0,[R1, #+2]
    244          
    245              Pause();                                        //延时太短的话，可能写出错
   \   000000CA   0x.... 0x....      BL       Pause
    246          }
   \   000000CE   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x000186A1         DC32     0x186a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4004B028         DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     I2Cx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     core_clk_mhz

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  I2C_ReadAddr
             16 -> I2C_StartTransmission
             16 -> Pause
        0  I2C_StartTransmission
       16  I2C_WriteAddr
             16 -> I2C_StartTransmission
             16 -> Pause
        0  I2C_init
        0  Pause


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
     350  I2C_ReadAddr
      64  I2C_StartTransmission
     208  I2C_WriteAddr
     126  I2C_init
       8  I2Cx
       1  MasterTransmission
      22  Pause
       1  SlaveID

 
   2 bytes in section .bss
   8 bytes in section .data
 806 bytes in section .text
 
 806 bytes of CODE memory
  10 bytes of DATA memory

Errors: none
Warnings: none
