###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Dec/2013  00:56:38 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\MMA845x\MMA845x.c                      #
#    Command line =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\src\drivers\MMA845x\MMA845x.c -lCN                 #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -lB                      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\ -o                       #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\ --no_cse --no_unroll      #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\Administrator\Desktop\杨向军的K60模板 #
#                    _只有基本IO操作\build\gpio_demo\..\ -I                   #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\common\ -I               #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\cpu\ -I                  #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ -I              #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\gpio\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\wdog\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\mcg\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\uart\ -I         #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\lptmr\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\fun\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\led\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\i2c\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\MMA845x\ -I      #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\motor\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\pit\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\steer\ -I        #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\ftm\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\DIPswitch\ -I    #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\drivers\dma\ -I          #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\platforms\ -I            #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\ -I             #
#                    C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\..\..\src\projects\gpio_demo\ -Ol  #
#    List file    =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\List\MMA845x.lst               #
#    Object file  =  C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本I #
#                    O操作\build\gpio_demo\RAM\Obj\MMA845x.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\杨向军的K60模板_只有基本IO操作\src\drivers\MMA845x\MMA845x.c
      1          /*
      2          ************************************************************************
      3          *                北京邮电大学 K60 学习例程                                        
      4          * 文件名 :[MMA845x.c] 
      5          * 描  述 ：MMA845x函数定义
      6          *设计改进：snowwolf
      7          *  Email ：snowwolf2012@qq.com
      8          * 说  明 ：MMA845x函数定义
      9          ***********************************************************************
     10          */
     11          
     12          #include "MMA845x.h"
     13          
     14          #ifdef K60IIC
     15          
     16          /*************************************************************************
     17          *  函数名称：MMA845x_Init
     18          *  功能说明：初始化8451
     19          *  参数说明：无
     20          *  函数返回：无
     21          *  修改时间：2012-2-2   已测试
     22          *  备    注：
     23          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     24          void MMA845x_Init(void)
     25          {
   \                     MMA845x_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
     26              char v = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     27              I2C_init(MMA845xI2C);                                 //初始化I2C0
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       I2C_init
     28                 
     29              MMA845x_WRITE_BYTE(CTRL_REG1,ASLP_RATE_20MS+DATA_RATE_5MS);	
   \   0000000A   0x2310             MOVS     R3,#+16
   \   0000000C   0x222A             MOVS     R2,#+42
   \   0000000E   0x211C             MOVS     R1,#+28
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       I2C_WriteAddr
     30              delayus(10);
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       delayus
     31              MMA845x_WRITE_BYTE(XYZ_DATA_CFG_REG, FULL_SCALE_2G); //2G
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x220E             MOVS     R2,#+14
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_WriteAddr
     32              delayus(10);
   \   00000028   0x200A             MOVS     R0,#+10
   \   0000002A   0x.... 0x....      BL       delayus
     33              MMA845x_WRITE_BYTE(CTRL_REG1, ACTIVE_MASK);          //激活状态
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0x222A             MOVS     R2,#+42
   \   00000032   0x211C             MOVS     R1,#+28
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       I2C_WriteAddr
     34              delayus(10);
   \   0000003A   0x200A             MOVS     R0,#+10
   \   0000003C   0x.... 0x....      BL       delayus
     35              v= MMA845x_READ_BYTE(WHO_AM_I_REG);
   \   00000040   0x220D             MOVS     R2,#+13
   \   00000042   0x211C             MOVS     R1,#+28
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       I2C_ReadAddr
   \   0000004A   0x0004             MOVS     R4,R0
     36              delayus(10);
   \   0000004C   0x200A             MOVS     R0,#+10
   \   0000004E   0x.... 0x....      BL       delayus
     37              if((v == MMA8451Q_ID)||(v == MMA8452Q_ID)||(v == MMA8453Q_ID)) 
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C1A             CMP      R4,#+26
   \   00000056   0xD005             BEQ.N    ??MMA845x_Init_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C2A             CMP      R4,#+42
   \   0000005C   0xD002             BEQ.N    ??MMA845x_Init_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C3A             CMP      R4,#+58
   \   00000062   0xD103             BNE.N    ??MMA845x_Init_1
     38              {
     39                 uartPrintf("\n8451  init OK!");    
   \                     ??MMA845x_Init_0:
   \   00000064   0x....             LDR.N    R0,??DataTable0
   \   00000066   0x.... 0x....      BL       uartPrintf
   \   0000006A   0xE002             B.N      ??MMA845x_Init_2
     40              }
     41              else
     42              {
     43                 uartPrintf("\n8451  init Failed!");  	
   \                     ??MMA845x_Init_1:
   \   0000006C   0x....             LDR.N    R0,??DataTable0_1
   \   0000006E   0x.... 0x....      BL       uartPrintf
     44              }
     45              /* //测试寄存器是否写入
     46              //MMA845x_WRITE_BYTE(CTRL_REG1,0xBA);
     47              v= MMA845x_READ_BYTE(CTRL_REG1);
     48              uartPrintf("\ndata = 0x%X\n",v);  
     49              v= MMA845x_READ_BYTE(XYZ_DATA_CFG_REG);
     50              uartPrintf("\ndata = 0x%X\n",v);
     51              */
     52          }
   \                     ??MMA845x_Init_2:
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
     53          
     54          /*************************************************************************
     55          *  函数名称：MMA845x_readbyte
     56          *  功能说明：从特定地址读取一个值
     57          *  参数说明：无
     58          *  函数返回：无
     59          *  修改时间：2012-2-2   已测试
     60          *  备    注：
     61          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     62          unsigned char MMA845x_readbyte(unsigned char address)
     63          {
   \                     MMA845x_readbyte:
   \   00000000   0xB580             PUSH     {R7,LR}
     64              return I2C_ReadAddr(MMA845xI2C,MMA845x_IIC_ADDRESS,address);
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x211C             MOVS     R1,#+28
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       I2C_ReadAddr
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
     65          }
     66          
     67          
     68          /*************************************************************************
     69          *  函数名称：MMA845x_readbyte
     70          *  功能说明：从特定地址写入一个值
     71          *  参数说明：无
     72          *  函数返回：无
     73          *  修改时间：2012-2-2   已测试
     74          *  备    注：
     75          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          void MMA845x_writebyte(unsigned char address, unsigned char thedata)
     77          {
   \                     MMA845x_writebyte:
   \   00000000   0xB580             PUSH     {R7,LR}
     78              I2C_WriteAddr(MMA845xI2C,MMA845x_IIC_ADDRESS,address,thedata);
   \   00000002   0x000B             MOVS     R3,R1
   \   00000004   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       I2C_WriteAddr
     79          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     80          
     81          /*************************************************************************
     82          *  函数名称：Get845xX_xbit
     83          *  功能说明：读取一个值
     84          *  参数说明：u8 N  取平均的次数
     85          *  函数返回：无
     86          *  修改时间：2012-2-2   已测试
     87          *  备    注：经测试读取一次的时间是0.11ms,建议每ms读取5次求平均
     88          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     89          u8 Get845xX_8bit(u8 N) 
     90          {
   \                     Get845xX_8bit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     91              u16 tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     92              u8 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     93              
     94              for(i = 0; i < N; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0xE007             B.N      ??Get845xX_8bit_0
     95                  tmp += MMA845x_READ_BYTE(OUT_X_MSB_REG); 
   \                     ??Get845xX_8bit_1:
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x211C             MOVS     R1,#+28
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       I2C_ReadAddr
   \   00000018   0xFA55 0xF580      UXTAB    R5,R5,R0
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \                     ??Get845xX_8bit_0:
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x42A6             CMP      R6,R4
   \   00000024   0xD3F3             BCC.N    ??Get845xX_8bit_1
     96              tmp = tmp / N;
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xFB95 0xF5F4      SDIV     R5,R5,R4
     97              
     98              return (u8)tmp;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          u16 Get845xX_10bit(u8 N) 
    102          {
   \                     Get845xX_10bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    103              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    104              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    105              u16 xm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    106              u16 xl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    107              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xX_10bit_0
    108              {
    109                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
   \                     ??Get845xX_10bit_1:
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    110                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    111                
    112                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 6) & 0x03FF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1180             ASRS     R0,R0,#+6
   \   00000034   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000036   0x0D80             LSRS     R0,R0,#+22
   \   00000038   0x1986             ADDS     R6,R0,R6
    113              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xX_10bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xX_10bit_1
    114              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    115              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    116          }
    117          
    118          

   \                                 In section .text, align 2, keep-with-next
    119          u16 Get845xX_12bit(u8 N) 
    120          {
   \                     Get845xX_12bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    121              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    122              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    123              u16 xm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    124              u16 xl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    125              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xX_12bit_0
    126              {
    127                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
   \                     ??Get845xX_12bit_1:
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    128                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    129                
    130                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 4) & 0x0FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1100             ASRS     R0,R0,#+4
   \   00000034   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000036   0x0D00             LSRS     R0,R0,#+20
   \   00000038   0x1986             ADDS     R6,R0,R6
    131              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xX_12bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xX_12bit_1
    132              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    133              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    134          }
    135          

   \                                 In section .text, align 2, keep-with-next
    136          u16 Get845xX_14bit(u8 N) 
    137          {
   \                     Get845xX_14bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    138              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    139              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    140              u16 xm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    141              u16 xl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    142              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xX_14bit_0
    143              {
    144                xm = MMA845x_READ_BYTE(OUT_X_MSB_REG); 
   \                     ??Get845xX_14bit_1:
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    145                xl = MMA845x_READ_BYTE(OUT_X_LSB_REG);
   \   0000001E   0x2202             MOVS     R2,#+2
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    146                
    147                tmp += (   ((((xm<<8) & 0xFF00  ) |  (xl&0x00FF)) >> 2) & 0x3FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1080             ASRS     R0,R0,#+2
   \   00000034   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   00000036   0x0C80             LSRS     R0,R0,#+18
   \   00000038   0x1986             ADDS     R6,R0,R6
    148              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xX_14bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xX_14bit_1
    149              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    150              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    151          }
    152          

   \                                 In section .text, align 2, keep-with-next
    153          u8 Get845xY_8bit(u8 N) 
    154          {
   \                     Get845xY_8bit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    155              u16 tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    156              u8 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    157              
    158              for(i = 0; i < N; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0xE007             B.N      ??Get845xY_8bit_0
    159                  tmp += MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
   \                     ??Get845xY_8bit_1:
   \   0000000E   0x2203             MOVS     R2,#+3
   \   00000010   0x211C             MOVS     R1,#+28
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       I2C_ReadAddr
   \   00000018   0xFA55 0xF580      UXTAB    R5,R5,R0
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \                     ??Get845xY_8bit_0:
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x42A6             CMP      R6,R4
   \   00000024   0xD3F3             BCC.N    ??Get845xY_8bit_1
    160              tmp = tmp / N;
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xFB95 0xF5F4      SDIV     R5,R5,R4
    161              
    162              return (u8)tmp;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    163          }
    164          

   \                                 In section .text, align 2, keep-with-next
    165          u16 Get845xY_10bit(u8 N) 
    166          {
   \                     Get845xY_10bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    167              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    168              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    169              u16 ym = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    170              u16 yl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    171              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xY_10bit_0
    172              {
    173                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
   \                     ??Get845xY_10bit_1:
   \   00000012   0x2203             MOVS     R2,#+3
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    174                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    175                
    176                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 6) & 0x03FF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1180             ASRS     R0,R0,#+6
   \   00000034   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000036   0x0D80             LSRS     R0,R0,#+22
   \   00000038   0x1986             ADDS     R6,R0,R6
    177              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xY_10bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xY_10bit_1
    178              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    179              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    180          }
    181          
    182          

   \                                 In section .text, align 2, keep-with-next
    183          u16 Get845xY_12bit(u8 N) 
    184          {
   \                     Get845xY_12bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    185              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    186              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    187              u16 ym = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    188              u16 yl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    189              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xY_12bit_0
    190              {
    191                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
   \                     ??Get845xY_12bit_1:
   \   00000012   0x2203             MOVS     R2,#+3
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    192                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    193                
    194                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 4) & 0x0FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1100             ASRS     R0,R0,#+4
   \   00000034   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000036   0x0D00             LSRS     R0,R0,#+20
   \   00000038   0x1986             ADDS     R6,R0,R6
    195              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xY_12bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xY_12bit_1
    196              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    197              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    198          }
    199          

   \                                 In section .text, align 2, keep-with-next
    200          u16 Get845xY_14bit(u8 N) 
    201          {
   \                     Get845xY_14bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    202              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    203              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    204              u16 ym = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    205              u16 yl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    206              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xY_14bit_0
    207              {
    208                ym = MMA845x_READ_BYTE(OUT_Y_MSB_REG); 
   \                     ??Get845xY_14bit_1:
   \   00000012   0x2203             MOVS     R2,#+3
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    209                yl = MMA845x_READ_BYTE(OUT_Y_LSB_REG);
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    210                
    211                tmp += (   ((((ym<<8) & 0xFF00  ) |  (yl&0x00FF)) >> 2) & 0x3FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1080             ASRS     R0,R0,#+2
   \   00000034   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   00000036   0x0C80             LSRS     R0,R0,#+18
   \   00000038   0x1986             ADDS     R6,R0,R6
    212              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xY_14bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xY_14bit_1
    213              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    214              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    215          }

   \                                 In section .text, align 2, keep-with-next
    216          u8 Get845xZ_8bit(u8 N) 
    217          {
   \                     Get845xZ_8bit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    218              u16 tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    219              u8 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    220              
    221              for(i = 0; i < N; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0xE007             B.N      ??Get845xZ_8bit_0
    222                  tmp += MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
   \                     ??Get845xZ_8bit_1:
   \   0000000E   0x2205             MOVS     R2,#+5
   \   00000010   0x211C             MOVS     R1,#+28
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       I2C_ReadAddr
   \   00000018   0xFA55 0xF580      UXTAB    R5,R5,R0
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \                     ??Get845xZ_8bit_0:
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x42A6             CMP      R6,R4
   \   00000024   0xD3F3             BCC.N    ??Get845xZ_8bit_1
    223              tmp = tmp / N;
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xFB95 0xF5F4      SDIV     R5,R5,R4
    224              
    225              return (u8)tmp;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    226          }
    227          

   \                                 In section .text, align 2, keep-with-next
    228          u16 Get845xZ_10bit(u8 N) 
    229          {
   \                     Get845xZ_10bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    230              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    231              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    232              u16 zm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    233              u16 zl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    234              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xZ_10bit_0
    235              {
    236                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
   \                     ??Get845xZ_10bit_1:
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    237                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
   \   0000001E   0x2206             MOVS     R2,#+6
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    238                
    239                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 6) & 0x03FF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1180             ASRS     R0,R0,#+6
   \   00000034   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000036   0x0D80             LSRS     R0,R0,#+22
   \   00000038   0x1986             ADDS     R6,R0,R6
    240              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xZ_10bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xZ_10bit_1
    241              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    242              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    243          }
    244          
    245          

   \                                 In section .text, align 2, keep-with-next
    246          u16 Get845xZ_12bit(u8 N) 
    247          {
   \                     Get845xZ_12bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    248              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    249              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    250              u16 zm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    251              u16 zl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    252              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xZ_12bit_0
    253              {
    254                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
   \                     ??Get845xZ_12bit_1:
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    255                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
   \   0000001E   0x2206             MOVS     R2,#+6
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    256                
    257                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 4) & 0x0FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1100             ASRS     R0,R0,#+4
   \   00000034   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000036   0x0D00             LSRS     R0,R0,#+20
   \   00000038   0x1986             ADDS     R6,R0,R6
    258              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xZ_12bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xZ_12bit_1
    259              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    260              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    261          }
    262          

   \                                 In section .text, align 2, keep-with-next
    263          u16 Get845xZ_14bit(u8 N) 
    264          {
   \                     Get845xZ_14bit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    265              u32 tmp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    266              u8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    267              u16 zm = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    268              u16 zl = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    269              for(i = 0; i < N; i++)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x000D             MOVS     R5,R1
   \   00000010   0xE014             B.N      ??Get845xZ_14bit_0
    270              {
    271                zm = MMA845x_READ_BYTE(OUT_Z_MSB_REG); 
   \                     ??Get845xZ_14bit_1:
   \   00000012   0x2205             MOVS     R2,#+5
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       I2C_ReadAddr
   \   0000001C   0x0007             MOVS     R7,R0
    272                zl = MMA845x_READ_BYTE(OUT_Z_LSB_REG);
   \   0000001E   0x2206             MOVS     R2,#+6
   \   00000020   0x211C             MOVS     R1,#+28
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       I2C_ReadAddr
    273                
    274                tmp += (   ((((zm<<8) & 0xFF00  ) |  (zl&0x00FF)) >> 2) & 0x3FFF);
   \   00000028   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEA50 0x2007      ORRS     R0,R0,R7, LSL #+8
   \   00000032   0x1080             ASRS     R0,R0,#+2
   \   00000034   0x0480             LSLS     R0,R0,#+18       ;; ZeroExtS R0,R0,#+18,#+18
   \   00000036   0x0C80             LSRS     R0,R0,#+18
   \   00000038   0x1986             ADDS     R6,R0,R6
    275              }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Get845xZ_14bit_0:
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x42A5             CMP      R5,R4
   \   00000042   0xD3E6             BCC.N    ??Get845xZ_14bit_1
    276              tmp = tmp / N;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xFBB6 0xF6F4      UDIV     R6,R6,R4
    277              return (u16)tmp;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    278          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     `?<Constant "\\n8451  init OK!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     `?<Constant "\\n8451  init Failed!">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n8451  init OK!">`:
   \   00000000   0x0A 0x38          DC8 "\0128451  init OK!"
   \              0x34 0x35    
   \              0x31 0x20    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x4F 0x4B    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n8451  init Failed!">`:
   \   00000000   0x0A 0x38          DC8 "\0128451  init Failed!"
   \              0x34 0x35    
   \              0x31 0x20    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x21 0x00    
    279          
    280          
    281          #endif
    282          #ifdef   IOIIC            // 模拟IIC
    283          
    284          unsigned char MMA845x_readbyte(unsigned char address)
    285          {
    286                  unsigned char ret = 100;
    287          	IIC_start();		//启动
    288          	send_byte(MMA845x_IIC_ADDRESS);	//写入设备ID及写信号
    289          	send_byte(address);	//X地址
    290          	IIC_start();		//重新发送开始
    291          	send_byte(MMA845x_IIC_ADDRESS+1);	//写入设备ID及读信
    292          	ret = read_byte();	//读取一字节
    293          	IIC_stop();
    294          	return ret;
    295          }
    296          
    297          //写入
    298          void MMA845x_writebyte(unsigned char address, unsigned char thedata)
    299          {
    300          	IIC_start();		//启动
    301          	send_byte(MMA845x_IIC_ADDRESS);	//写入设备ID及写信号
    302          	send_byte(address);	//X地址
    303          	send_byte(thedata);	//写入设备ID及读信
    304          	IIC_stop();
    305          }
    306          
    307          //初始化
    308          //初始化为指定模式
    309          void MMA845x_init()
    310          {	
    311                  byte v;
    312                  gpio_init(PORTD,8,GPO,1);
    313                  gpio_init(PORTD,9,GPO,1);
    314          	
    315          	MMA845x_writebyte(CTRL_REG1,ASLP_RATE_20MS+DATA_RATE_5MS);	
    316          	ioi2cnops(); ioi2cnops(); 
    317          	MMA845x_writebyte(XYZ_DATA_CFG_REG, FULL_SCALE_2G); //2G
    318          	ioi2cnops(); ioi2cnops(); 
    319          	MMA845x_writebyte(CTRL_REG1, ACTIVE_MASK);          //激活状态
    320          	ioi2cnops(); ioi2cnops(); 
    321          	
    322          	v= MMA845x_readbyte(WHO_AM_I_REG);
    323                  if((v == MMA8451Q_ID)||(v == MMA8452Q_ID)||(v == MMA8453Q_ID)) 
    324                  {
    325                     uartPrintf("\nMMA845x init OK!\n");
    326                  }
    327                  else
    328                  {
    329                     uartPrintf("\nMMA845x init Failed!\n"); 
    330                  }
    331          }
    332          
    333          
    334          unsigned char Get845xX() 
    335          {
    336              return MMA845x_readbyte(OUT_X_MSB_REG); 
    337          }
    338          unsigned char Get845xY() 
    339          {
    340              return MMA845x_readbyte(OUT_Y_MSB_REG); 
    341          }
    342          unsigned char Get845xZ() 
    343          {
    344              return MMA845x_readbyte(OUT_Z_MSB_REG); 
    345          }
    346          
    347          
    348          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  Get845xX_10bit
             24 -> I2C_ReadAddr
       24  Get845xX_12bit
             24 -> I2C_ReadAddr
       24  Get845xX_14bit
             24 -> I2C_ReadAddr
       16  Get845xX_8bit
             16 -> I2C_ReadAddr
       24  Get845xY_10bit
             24 -> I2C_ReadAddr
       24  Get845xY_12bit
             24 -> I2C_ReadAddr
       24  Get845xY_14bit
             24 -> I2C_ReadAddr
       16  Get845xY_8bit
             16 -> I2C_ReadAddr
       24  Get845xZ_10bit
             24 -> I2C_ReadAddr
       24  Get845xZ_12bit
             24 -> I2C_ReadAddr
       24  Get845xZ_14bit
             24 -> I2C_ReadAddr
       16  Get845xZ_8bit
             16 -> I2C_ReadAddr
        8  MMA845x_Init
              8 -> I2C_ReadAddr
              8 -> I2C_WriteAddr
              8 -> I2C_init
              8 -> delayus
              8 -> uartPrintf
        8  MMA845x_readbyte
              8 -> I2C_ReadAddr
        8  MMA845x_writebyte
              8 -> I2C_WriteAddr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "\n8451  init Failed!">
      16  ?<Constant "\n8451  init OK!">
       4  ??DataTable0
       4  ??DataTable0_1
      80  Get845xX_10bit
      80  Get845xX_12bit
      80  Get845xX_14bit
      52  Get845xX_8bit
      80  Get845xY_10bit
      80  Get845xY_12bit
      80  Get845xY_14bit
      52  Get845xY_8bit
      80  Get845xZ_10bit
      80  Get845xZ_12bit
      80  Get845xZ_14bit
      52  Get845xZ_8bit
     116  MMA845x_Init
      16  MMA845x_readbyte
      20  MMA845x_writebyte

 
    36 bytes in section .rodata
 1 036 bytes in section .text
 
 1 036 bytes of CODE  memory
    36 bytes of CONST memory

Errors: none
Warnings: 1
